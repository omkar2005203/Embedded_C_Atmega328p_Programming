
bin\Debug\MultipleSwitch_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000022b4  00002368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  00002370  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001a0  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000025c  00000000  00000000  00002513  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024cc  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001249  00000000  00000000  00004c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fdb  00000000  00000000  00005e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00007e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008476  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_1>
       8:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a9 30       	cpi	r26, 0x09	; 9
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e4 eb       	ldi	r30, 0xB4	; 180
      8c:	f2 e2       	ldi	r31, 0x22	; 34
      8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
      9a:	0e 94 1c 08 	call	0x1038	; 0x1038 <main>
      9e:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIOConfig>:
* Description: Configures the mode of the pin as INPUT/PULLUP or OUTPUT
* Arguments: pin and mode
* Returns: None
******************************************************************************/
void GPIOConfig(uint8_t pin,uint8_t mode)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <GPIOConfig+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	6a 83       	std	Y+2, r22	; 0x02
// INPUT configs for D
 if(pin == PD0 && mode == INPUT)
      b4:	89 81       	ldd	r24, Y+1	; 0x01
      b6:	88 23       	and	r24, r24
      b8:	51 f4       	brne	.+20     	; 0xce <GPIOConfig+0x28>
      ba:	8a 81       	ldd	r24, Y+2	; 0x02
      bc:	88 23       	and	r24, r24
      be:	39 f4       	brne	.+14     	; 0xce <GPIOConfig+0x28>
 {
    CLR_BIT(DDRD,PD0);
      c0:	aa e2       	ldi	r26, 0x2A	; 42
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	ea e2       	ldi	r30, 0x2A	; 42
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	8e 7f       	andi	r24, 0xFE	; 254
      cc:	8c 93       	st	X, r24
 }
if(pin == PD1 && mode == INPUT)
      ce:	89 81       	ldd	r24, Y+1	; 0x01
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	51 f4       	brne	.+20     	; 0xe8 <GPIOConfig+0x42>
      d4:	8a 81       	ldd	r24, Y+2	; 0x02
      d6:	88 23       	and	r24, r24
      d8:	39 f4       	brne	.+14     	; 0xe8 <GPIOConfig+0x42>
 {

    CLR_BIT(DDRD,PD1);
      da:	aa e2       	ldi	r26, 0x2A	; 42
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	ea e2       	ldi	r30, 0x2A	; 42
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	8d 7f       	andi	r24, 0xFD	; 253
      e6:	8c 93       	st	X, r24
 }

 if(pin == PD2 && mode == INPUT)
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	51 f4       	brne	.+20     	; 0x102 <GPIOConfig+0x5c>
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	88 23       	and	r24, r24
      f2:	39 f4       	brne	.+14     	; 0x102 <GPIOConfig+0x5c>
 {
    CLR_BIT(DDRD,PD2);
      f4:	aa e2       	ldi	r26, 0x2A	; 42
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	ea e2       	ldi	r30, 0x2A	; 42
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	8b 7f       	andi	r24, 0xFB	; 251
     100:	8c 93       	st	X, r24
 }

 if(pin == PD3 && mode == INPUT)
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	83 30       	cpi	r24, 0x03	; 3
     106:	51 f4       	brne	.+20     	; 0x11c <GPIOConfig+0x76>
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	88 23       	and	r24, r24
     10c:	39 f4       	brne	.+14     	; 0x11c <GPIOConfig+0x76>
 {
    CLR_BIT(DDRD,PD3);
     10e:	aa e2       	ldi	r26, 0x2A	; 42
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	ea e2       	ldi	r30, 0x2A	; 42
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	87 7f       	andi	r24, 0xF7	; 247
     11a:	8c 93       	st	X, r24
 }

 if(pin == PD4 && mode == INPUT)
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	51 f4       	brne	.+20     	; 0x136 <GPIOConfig+0x90>
     122:	8a 81       	ldd	r24, Y+2	; 0x02
     124:	88 23       	and	r24, r24
     126:	39 f4       	brne	.+14     	; 0x136 <GPIOConfig+0x90>
 {
    CLR_BIT(DDRD,PD4);
     128:	aa e2       	ldi	r26, 0x2A	; 42
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	ea e2       	ldi	r30, 0x2A	; 42
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	8f 7e       	andi	r24, 0xEF	; 239
     134:	8c 93       	st	X, r24
 }

 if(pin == PD5 && mode == INPUT)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	85 30       	cpi	r24, 0x05	; 5
     13a:	51 f4       	brne	.+20     	; 0x150 <GPIOConfig+0xaa>
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	88 23       	and	r24, r24
     140:	39 f4       	brne	.+14     	; 0x150 <GPIOConfig+0xaa>
 {
    CLR_BIT(DDRD,PD5);
     142:	aa e2       	ldi	r26, 0x2A	; 42
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	ea e2       	ldi	r30, 0x2A	; 42
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 7d       	andi	r24, 0xDF	; 223
     14e:	8c 93       	st	X, r24
 }
 if(pin == PD6 && mode == INPUT)
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	86 30       	cpi	r24, 0x06	; 6
     154:	51 f4       	brne	.+20     	; 0x16a <GPIOConfig+0xc4>
     156:	8a 81       	ldd	r24, Y+2	; 0x02
     158:	88 23       	and	r24, r24
     15a:	39 f4       	brne	.+14     	; 0x16a <GPIOConfig+0xc4>
 {
    CLR_BIT(DDRD,PD6);
     15c:	aa e2       	ldi	r26, 0x2A	; 42
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea e2       	ldi	r30, 0x2A	; 42
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8f 7b       	andi	r24, 0xBF	; 191
     168:	8c 93       	st	X, r24
 }
  if(pin == PD7 && mode == INPUT)
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	87 30       	cpi	r24, 0x07	; 7
     16e:	51 f4       	brne	.+20     	; 0x184 <GPIOConfig+0xde>
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	88 23       	and	r24, r24
     174:	39 f4       	brne	.+14     	; 0x184 <GPIOConfig+0xde>
 {
    CLR_BIT(DDRD,PD7);
     176:	aa e2       	ldi	r26, 0x2A	; 42
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	ea e2       	ldi	r30, 0x2A	; 42
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	8f 77       	andi	r24, 0x7F	; 127
     182:	8c 93       	st	X, r24
 }

 // Output configs for D
 if(pin == PD0 && mode == OUTPUT)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	88 23       	and	r24, r24
     188:	51 f4       	brne	.+20     	; 0x19e <GPIOConfig+0xf8>
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	39 f4       	brne	.+14     	; 0x19e <GPIOConfig+0xf8>
 {
    SET_BIT(DDRD,PD0);
     190:	aa e2       	ldi	r26, 0x2A	; 42
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ea e2       	ldi	r30, 0x2A	; 42
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	81 60       	ori	r24, 0x01	; 1
     19c:	8c 93       	st	X, r24
 }
if(pin == PD1 && mode == OUTPUT)
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	51 f4       	brne	.+20     	; 0x1b8 <GPIOConfig+0x112>
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	39 f4       	brne	.+14     	; 0x1b8 <GPIOConfig+0x112>
 {
    SET_BIT(DDRD,PD1);
     1aa:	aa e2       	ldi	r26, 0x2A	; 42
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	ea e2       	ldi	r30, 0x2A	; 42
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	82 60       	ori	r24, 0x02	; 2
     1b6:	8c 93       	st	X, r24
 }

 if(pin == PD2 && mode == OUTPUT)
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	51 f4       	brne	.+20     	; 0x1d2 <GPIOConfig+0x12c>
     1be:	8a 81       	ldd	r24, Y+2	; 0x02
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	39 f4       	brne	.+14     	; 0x1d2 <GPIOConfig+0x12c>
 {
    SET_BIT(DDRD,PD2);
     1c4:	aa e2       	ldi	r26, 0x2A	; 42
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	ea e2       	ldi	r30, 0x2A	; 42
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	84 60       	ori	r24, 0x04	; 4
     1d0:	8c 93       	st	X, r24
 }

 if(pin == PD3 && mode == OUTPUT)
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	83 30       	cpi	r24, 0x03	; 3
     1d6:	51 f4       	brne	.+20     	; 0x1ec <GPIOConfig+0x146>
     1d8:	8a 81       	ldd	r24, Y+2	; 0x02
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	39 f4       	brne	.+14     	; 0x1ec <GPIOConfig+0x146>
 {
    SET_BIT(DDRD,PD3);
     1de:	aa e2       	ldi	r26, 0x2A	; 42
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	ea e2       	ldi	r30, 0x2A	; 42
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	88 60       	ori	r24, 0x08	; 8
     1ea:	8c 93       	st	X, r24
 }

 if(pin == PD4 && mode == OUTPUT)
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	84 30       	cpi	r24, 0x04	; 4
     1f0:	51 f4       	brne	.+20     	; 0x206 <GPIOConfig+0x160>
     1f2:	8a 81       	ldd	r24, Y+2	; 0x02
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	39 f4       	brne	.+14     	; 0x206 <GPIOConfig+0x160>
 {
    SET_BIT(DDRD,PD4);
     1f8:	aa e2       	ldi	r26, 0x2A	; 42
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	ea e2       	ldi	r30, 0x2A	; 42
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 61       	ori	r24, 0x10	; 16
     204:	8c 93       	st	X, r24
 }

 if(pin == PD5 && mode == OUTPUT)
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	85 30       	cpi	r24, 0x05	; 5
     20a:	51 f4       	brne	.+20     	; 0x220 <GPIOConfig+0x17a>
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	39 f4       	brne	.+14     	; 0x220 <GPIOConfig+0x17a>
 {
    SET_BIT(DDRD,PD5);
     212:	aa e2       	ldi	r26, 0x2A	; 42
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	ea e2       	ldi	r30, 0x2A	; 42
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	80 62       	ori	r24, 0x20	; 32
     21e:	8c 93       	st	X, r24
 }
 if(pin == PD6 && mode == OUTPUT)
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	86 30       	cpi	r24, 0x06	; 6
     224:	51 f4       	brne	.+20     	; 0x23a <GPIOConfig+0x194>
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	39 f4       	brne	.+14     	; 0x23a <GPIOConfig+0x194>
 {
    SET_BIT(DDRD,PD6);
     22c:	aa e2       	ldi	r26, 0x2A	; 42
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	ea e2       	ldi	r30, 0x2A	; 42
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	80 64       	ori	r24, 0x40	; 64
     238:	8c 93       	st	X, r24
 }
  if(pin == PD7 && mode == OUTPUT)
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	87 30       	cpi	r24, 0x07	; 7
     23e:	51 f4       	brne	.+20     	; 0x254 <GPIOConfig+0x1ae>
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	39 f4       	brne	.+14     	; 0x254 <GPIOConfig+0x1ae>
 {
    SET_BIT(DDRD,PD7);
     246:	aa e2       	ldi	r26, 0x2A	; 42
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	ea e2       	ldi	r30, 0x2A	; 42
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	80 68       	ori	r24, 0x80	; 128
     252:	8c 93       	st	X, r24
 }

// For port B
// INPUT configs for B
 if(pin == PB0 && mode == INPUT)
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 23       	and	r24, r24
     258:	51 f4       	brne	.+20     	; 0x26e <GPIOConfig+0x1c8>
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	88 23       	and	r24, r24
     25e:	39 f4       	brne	.+14     	; 0x26e <GPIOConfig+0x1c8>
 {
    CLR_BIT(DDRB,PB0);
     260:	a4 e2       	ldi	r26, 0x24	; 36
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e4 e2       	ldi	r30, 0x24	; 36
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	8e 7f       	andi	r24, 0xFE	; 254
     26c:	8c 93       	st	X, r24
 }
if(pin == PB1 && mode == INPUT)
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	51 f4       	brne	.+20     	; 0x288 <GPIOConfig+0x1e2>
     274:	8a 81       	ldd	r24, Y+2	; 0x02
     276:	88 23       	and	r24, r24
     278:	39 f4       	brne	.+14     	; 0x288 <GPIOConfig+0x1e2>
 {

    CLR_BIT(DDRB,PB1);
     27a:	a4 e2       	ldi	r26, 0x24	; 36
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e4 e2       	ldi	r30, 0x24	; 36
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8d 7f       	andi	r24, 0xFD	; 253
     286:	8c 93       	st	X, r24
 }

 if(pin == PB2 && mode == INPUT)
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	51 f4       	brne	.+20     	; 0x2a2 <GPIOConfig+0x1fc>
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	88 23       	and	r24, r24
     292:	39 f4       	brne	.+14     	; 0x2a2 <GPIOConfig+0x1fc>
 {
    CLR_BIT(DDRB,PB2);
     294:	a4 e2       	ldi	r26, 0x24	; 36
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e4 e2       	ldi	r30, 0x24	; 36
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8b 7f       	andi	r24, 0xFB	; 251
     2a0:	8c 93       	st	X, r24
 }

 if(pin == PB3 && mode == INPUT)
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	83 30       	cpi	r24, 0x03	; 3
     2a6:	51 f4       	brne	.+20     	; 0x2bc <GPIOConfig+0x216>
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	88 23       	and	r24, r24
     2ac:	39 f4       	brne	.+14     	; 0x2bc <GPIOConfig+0x216>
 {
    CLR_BIT(DDRB,PB3);
     2ae:	a4 e2       	ldi	r26, 0x24	; 36
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	e4 e2       	ldi	r30, 0x24	; 36
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	87 7f       	andi	r24, 0xF7	; 247
     2ba:	8c 93       	st	X, r24
 }

 if(pin == PB4 && mode == INPUT)
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	84 30       	cpi	r24, 0x04	; 4
     2c0:	51 f4       	brne	.+20     	; 0x2d6 <GPIOConfig+0x230>
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	88 23       	and	r24, r24
     2c6:	39 f4       	brne	.+14     	; 0x2d6 <GPIOConfig+0x230>
 {
    CLR_BIT(DDRB,PB4);
     2c8:	a4 e2       	ldi	r26, 0x24	; 36
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	e4 e2       	ldi	r30, 0x24	; 36
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	8f 7e       	andi	r24, 0xEF	; 239
     2d4:	8c 93       	st	X, r24
 }

 if(pin == PB5 && mode == INPUT)
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	85 30       	cpi	r24, 0x05	; 5
     2da:	51 f4       	brne	.+20     	; 0x2f0 <GPIOConfig+0x24a>
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	88 23       	and	r24, r24
     2e0:	39 f4       	brne	.+14     	; 0x2f0 <GPIOConfig+0x24a>
 {
    CLR_BIT(DDRB,PB5);
     2e2:	a4 e2       	ldi	r26, 0x24	; 36
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e4 e2       	ldi	r30, 0x24	; 36
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8f 7d       	andi	r24, 0xDF	; 223
     2ee:	8c 93       	st	X, r24
 }
 if(pin == PB6 && mode == INPUT)
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	86 30       	cpi	r24, 0x06	; 6
     2f4:	51 f4       	brne	.+20     	; 0x30a <GPIOConfig+0x264>
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	88 23       	and	r24, r24
     2fa:	39 f4       	brne	.+14     	; 0x30a <GPIOConfig+0x264>
 {
    CLR_BIT(DDRB,PB6);
     2fc:	a4 e2       	ldi	r26, 0x24	; 36
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e4 e2       	ldi	r30, 0x24	; 36
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	8f 7b       	andi	r24, 0xBF	; 191
     308:	8c 93       	st	X, r24
 }
  if(pin == PB7 && mode == INPUT)
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	87 30       	cpi	r24, 0x07	; 7
     30e:	51 f4       	brne	.+20     	; 0x324 <GPIOConfig+0x27e>
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 23       	and	r24, r24
     314:	39 f4       	brne	.+14     	; 0x324 <GPIOConfig+0x27e>
 {
    CLR_BIT(DDRB,PB7);
     316:	a4 e2       	ldi	r26, 0x24	; 36
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e4 e2       	ldi	r30, 0x24	; 36
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	8f 77       	andi	r24, 0x7F	; 127
     322:	8c 93       	st	X, r24
 }

 // Output configs for B
 if(pin == PB0 && mode == OUTPUT)
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	88 23       	and	r24, r24
     328:	51 f4       	brne	.+20     	; 0x33e <GPIOConfig+0x298>
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	39 f4       	brne	.+14     	; 0x33e <GPIOConfig+0x298>
 {
    SET_BIT(DDRB,PB0);
     330:	a4 e2       	ldi	r26, 0x24	; 36
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	e4 e2       	ldi	r30, 0x24	; 36
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	81 60       	ori	r24, 0x01	; 1
     33c:	8c 93       	st	X, r24
 }
if(pin == PB1 && mode == OUTPUT)
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	51 f4       	brne	.+20     	; 0x358 <GPIOConfig+0x2b2>
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	39 f4       	brne	.+14     	; 0x358 <GPIOConfig+0x2b2>
 {
    SET_BIT(DDRB,PB1);
     34a:	a4 e2       	ldi	r26, 0x24	; 36
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e4 e2       	ldi	r30, 0x24	; 36
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	82 60       	ori	r24, 0x02	; 2
     356:	8c 93       	st	X, r24
 }

 if(pin == PB2 && mode == OUTPUT)
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	51 f4       	brne	.+20     	; 0x372 <GPIOConfig+0x2cc>
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	39 f4       	brne	.+14     	; 0x372 <GPIOConfig+0x2cc>
 {
    SET_BIT(DDRB,PB2);
     364:	a4 e2       	ldi	r26, 0x24	; 36
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	e4 e2       	ldi	r30, 0x24	; 36
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	84 60       	ori	r24, 0x04	; 4
     370:	8c 93       	st	X, r24
 }

 if(pin == PB3 && mode == OUTPUT)
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	51 f4       	brne	.+20     	; 0x38c <GPIOConfig+0x2e6>
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	39 f4       	brne	.+14     	; 0x38c <GPIOConfig+0x2e6>
 {
    SET_BIT(DDRB,PB3);
     37e:	a4 e2       	ldi	r26, 0x24	; 36
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	e4 e2       	ldi	r30, 0x24	; 36
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	8c 93       	st	X, r24
 }

 if(pin == PB4 && mode == OUTPUT)
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	84 30       	cpi	r24, 0x04	; 4
     390:	51 f4       	brne	.+20     	; 0x3a6 <GPIOConfig+0x300>
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	39 f4       	brne	.+14     	; 0x3a6 <GPIOConfig+0x300>
 {
    SET_BIT(DDRB,PB4);
     398:	a4 e2       	ldi	r26, 0x24	; 36
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	e4 e2       	ldi	r30, 0x24	; 36
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	80 61       	ori	r24, 0x10	; 16
     3a4:	8c 93       	st	X, r24
 }

 if(pin == PB5 && mode == OUTPUT)
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	85 30       	cpi	r24, 0x05	; 5
     3aa:	51 f4       	brne	.+20     	; 0x3c0 <GPIOConfig+0x31a>
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	39 f4       	brne	.+14     	; 0x3c0 <GPIOConfig+0x31a>
 {
    SET_BIT(DDRB,PB5);
     3b2:	a4 e2       	ldi	r26, 0x24	; 36
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e4 e2       	ldi	r30, 0x24	; 36
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	8c 93       	st	X, r24
 }
 if(pin == PB6 && mode == OUTPUT)
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	86 30       	cpi	r24, 0x06	; 6
     3c4:	51 f4       	brne	.+20     	; 0x3da <GPIOConfig+0x334>
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	39 f4       	brne	.+14     	; 0x3da <GPIOConfig+0x334>
 {
    SET_BIT(DDRB,PB6);
     3cc:	a4 e2       	ldi	r26, 0x24	; 36
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e4 e2       	ldi	r30, 0x24	; 36
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	80 64       	ori	r24, 0x40	; 64
     3d8:	8c 93       	st	X, r24
 }
  if(pin == PB7 && mode == OUTPUT)
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	87 30       	cpi	r24, 0x07	; 7
     3de:	51 f4       	brne	.+20     	; 0x3f4 <GPIOConfig+0x34e>
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	39 f4       	brne	.+14     	; 0x3f4 <GPIOConfig+0x34e>
 {
    SET_BIT(DDRB,PB7);
     3e6:	a4 e2       	ldi	r26, 0x24	; 36
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e4 e2       	ldi	r30, 0x24	; 36
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	8c 93       	st	X, r24
 }


// for port C
// INPUT configs for C
 if(pin == PC0 && mode == INPUT)
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 23       	and	r24, r24
     3f8:	51 f4       	brne	.+20     	; 0x40e <GPIOConfig+0x368>
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	88 23       	and	r24, r24
     3fe:	39 f4       	brne	.+14     	; 0x40e <GPIOConfig+0x368>
 {
    CLR_BIT(DDRC,PC0);
     400:	a7 e2       	ldi	r26, 0x27	; 39
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	e7 e2       	ldi	r30, 0x27	; 39
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	8e 7f       	andi	r24, 0xFE	; 254
     40c:	8c 93       	st	X, r24
 }
if(pin == PC1 && mode == INPUT)
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	51 f4       	brne	.+20     	; 0x428 <GPIOConfig+0x382>
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	88 23       	and	r24, r24
     418:	39 f4       	brne	.+14     	; 0x428 <GPIOConfig+0x382>
 {

    CLR_BIT(DDRC,PC1);
     41a:	a7 e2       	ldi	r26, 0x27	; 39
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	e7 e2       	ldi	r30, 0x27	; 39
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	8d 7f       	andi	r24, 0xFD	; 253
     426:	8c 93       	st	X, r24
 }

 if(pin == PC2 && mode == INPUT)
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	82 30       	cpi	r24, 0x02	; 2
     42c:	51 f4       	brne	.+20     	; 0x442 <GPIOConfig+0x39c>
     42e:	8a 81       	ldd	r24, Y+2	; 0x02
     430:	88 23       	and	r24, r24
     432:	39 f4       	brne	.+14     	; 0x442 <GPIOConfig+0x39c>
 {
    CLR_BIT(DDRC,PC2);
     434:	a7 e2       	ldi	r26, 0x27	; 39
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	e7 e2       	ldi	r30, 0x27	; 39
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	8b 7f       	andi	r24, 0xFB	; 251
     440:	8c 93       	st	X, r24
 }

 if(pin == PC3 && mode == INPUT)
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	83 30       	cpi	r24, 0x03	; 3
     446:	51 f4       	brne	.+20     	; 0x45c <GPIOConfig+0x3b6>
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	88 23       	and	r24, r24
     44c:	39 f4       	brne	.+14     	; 0x45c <GPIOConfig+0x3b6>
 {
    CLR_BIT(DDRC,PC3);
     44e:	a7 e2       	ldi	r26, 0x27	; 39
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	e7 e2       	ldi	r30, 0x27	; 39
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	87 7f       	andi	r24, 0xF7	; 247
     45a:	8c 93       	st	X, r24
 }

 if(pin == PC4 && mode == INPUT)
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	84 30       	cpi	r24, 0x04	; 4
     460:	51 f4       	brne	.+20     	; 0x476 <GPIOConfig+0x3d0>
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	88 23       	and	r24, r24
     466:	39 f4       	brne	.+14     	; 0x476 <GPIOConfig+0x3d0>
 {
    CLR_BIT(DDRC,PC4);
     468:	a7 e2       	ldi	r26, 0x27	; 39
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e7 e2       	ldi	r30, 0x27	; 39
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	8f 7e       	andi	r24, 0xEF	; 239
     474:	8c 93       	st	X, r24
 }

 if(pin == PC5 && mode == INPUT)
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	85 30       	cpi	r24, 0x05	; 5
     47a:	51 f4       	brne	.+20     	; 0x490 <GPIOConfig+0x3ea>
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	88 23       	and	r24, r24
     480:	39 f4       	brne	.+14     	; 0x490 <GPIOConfig+0x3ea>
 {
    CLR_BIT(DDRC,PC5);
     482:	a7 e2       	ldi	r26, 0x27	; 39
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e7 e2       	ldi	r30, 0x27	; 39
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 7d       	andi	r24, 0xDF	; 223
     48e:	8c 93       	st	X, r24
 }
 if(pin == PC6 && mode == INPUT)
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	86 30       	cpi	r24, 0x06	; 6
     494:	51 f4       	brne	.+20     	; 0x4aa <GPIOConfig+0x404>
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	88 23       	and	r24, r24
     49a:	39 f4       	brne	.+14     	; 0x4aa <GPIOConfig+0x404>
 {
    CLR_BIT(DDRC,PC6);
     49c:	a7 e2       	ldi	r26, 0x27	; 39
     49e:	b0 e0       	ldi	r27, 0x00	; 0
     4a0:	e7 e2       	ldi	r30, 0x27	; 39
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	8f 7b       	andi	r24, 0xBF	; 191
     4a8:	8c 93       	st	X, r24
 }

 // Output configs for C
 if(pin == PC0 && mode == OUTPUT)
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	88 23       	and	r24, r24
     4ae:	51 f4       	brne	.+20     	; 0x4c4 <GPIOConfig+0x41e>
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	39 f4       	brne	.+14     	; 0x4c4 <GPIOConfig+0x41e>
 {
    SET_BIT(DDRC,PC0);
     4b6:	a7 e2       	ldi	r26, 0x27	; 39
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e7 e2       	ldi	r30, 0x27	; 39
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	8c 93       	st	X, r24
 }
if(pin == PC1 && mode == OUTPUT)
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	51 f4       	brne	.+20     	; 0x4de <GPIOConfig+0x438>
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	39 f4       	brne	.+14     	; 0x4de <GPIOConfig+0x438>
 {
    SET_BIT(DDRC,PC1);
     4d0:	a7 e2       	ldi	r26, 0x27	; 39
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	e7 e2       	ldi	r30, 0x27	; 39
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	8c 93       	st	X, r24
 }

 if(pin == PC2 && mode == OUTPUT)
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	51 f4       	brne	.+20     	; 0x4f8 <GPIOConfig+0x452>
     4e4:	8a 81       	ldd	r24, Y+2	; 0x02
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	39 f4       	brne	.+14     	; 0x4f8 <GPIOConfig+0x452>
 {
    SET_BIT(DDRC,PC2);
     4ea:	a7 e2       	ldi	r26, 0x27	; 39
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	e7 e2       	ldi	r30, 0x27	; 39
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	84 60       	ori	r24, 0x04	; 4
     4f6:	8c 93       	st	X, r24
 }

 if(pin == PC3 && mode == OUTPUT)
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	51 f4       	brne	.+20     	; 0x512 <GPIOConfig+0x46c>
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	39 f4       	brne	.+14     	; 0x512 <GPIOConfig+0x46c>
 {
    SET_BIT(DDRC,PC3);
     504:	a7 e2       	ldi	r26, 0x27	; 39
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	e7 e2       	ldi	r30, 0x27	; 39
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	8c 93       	st	X, r24
 }

 if(pin == PC4 && mode == OUTPUT)
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	84 30       	cpi	r24, 0x04	; 4
     516:	51 f4       	brne	.+20     	; 0x52c <GPIOConfig+0x486>
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	39 f4       	brne	.+14     	; 0x52c <GPIOConfig+0x486>
 {
    SET_BIT(DDRC,PC4);
     51e:	a7 e2       	ldi	r26, 0x27	; 39
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	e7 e2       	ldi	r30, 0x27	; 39
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	80 61       	ori	r24, 0x10	; 16
     52a:	8c 93       	st	X, r24
 }

 if(pin == PC5 && mode == OUTPUT)
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	85 30       	cpi	r24, 0x05	; 5
     530:	51 f4       	brne	.+20     	; 0x546 <GPIOConfig+0x4a0>
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	39 f4       	brne	.+14     	; 0x546 <GPIOConfig+0x4a0>
 {
    SET_BIT(DDRC,PC5);
     538:	a7 e2       	ldi	r26, 0x27	; 39
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e7 e2       	ldi	r30, 0x27	; 39
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 62       	ori	r24, 0x20	; 32
     544:	8c 93       	st	X, r24
 }
 if(pin == PC6 && mode == OUTPUT)
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	86 30       	cpi	r24, 0x06	; 6
     54a:	51 f4       	brne	.+20     	; 0x560 <GPIOConfig+0x4ba>
     54c:	8a 81       	ldd	r24, Y+2	; 0x02
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	39 f4       	brne	.+14     	; 0x560 <GPIOConfig+0x4ba>
 {
    SET_BIT(DDRC,PC6);
     552:	a7 e2       	ldi	r26, 0x27	; 39
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	e7 e2       	ldi	r30, 0x27	; 39
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	8c 93       	st	X, r24

 // All PULL_UP Configurations

// PORTB pull ups:

 if(pin == PB0 && mode == PULL_UP)
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	88 23       	and	r24, r24
     564:	51 f4       	brne	.+20     	; 0x57a <GPIOConfig+0x4d4>
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	39 f4       	brne	.+14     	; 0x57a <GPIOConfig+0x4d4>
 {
    SET_BIT(PORTB,PB0);
     56c:	a5 e2       	ldi	r26, 0x25	; 37
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	e5 e2       	ldi	r30, 0x25	; 37
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	81 60       	ori	r24, 0x01	; 1
     578:	8c 93       	st	X, r24
 }
if(pin == PB1 && mode == PULL_UP)
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	51 f4       	brne	.+20     	; 0x594 <GPIOConfig+0x4ee>
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	39 f4       	brne	.+14     	; 0x594 <GPIOConfig+0x4ee>
 {
    SET_BIT(PORTB,PB1);
     586:	a5 e2       	ldi	r26, 0x25	; 37
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e5 e2       	ldi	r30, 0x25	; 37
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	82 60       	ori	r24, 0x02	; 2
     592:	8c 93       	st	X, r24
 }

 if(pin == PB2 && mode == PULL_UP)
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	51 f4       	brne	.+20     	; 0x5ae <GPIOConfig+0x508>
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	39 f4       	brne	.+14     	; 0x5ae <GPIOConfig+0x508>
 {
    SET_BIT(PORTB,PB2);
     5a0:	a5 e2       	ldi	r26, 0x25	; 37
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	e5 e2       	ldi	r30, 0x25	; 37
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	84 60       	ori	r24, 0x04	; 4
     5ac:	8c 93       	st	X, r24
 }

 if(pin == PB3 && mode == PULL_UP)
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	51 f4       	brne	.+20     	; 0x5c8 <GPIOConfig+0x522>
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	39 f4       	brne	.+14     	; 0x5c8 <GPIOConfig+0x522>
 {
    SET_BIT(PORTB,PB3);
     5ba:	a5 e2       	ldi	r26, 0x25	; 37
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e5 e2       	ldi	r30, 0x25	; 37
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	88 60       	ori	r24, 0x08	; 8
     5c6:	8c 93       	st	X, r24
 }

 if(pin == PB4 && mode == PULL_UP)
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	84 30       	cpi	r24, 0x04	; 4
     5cc:	51 f4       	brne	.+20     	; 0x5e2 <GPIOConfig+0x53c>
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	39 f4       	brne	.+14     	; 0x5e2 <GPIOConfig+0x53c>
 {
    SET_BIT(PORTB,PB4);
     5d4:	a5 e2       	ldi	r26, 0x25	; 37
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e5 e2       	ldi	r30, 0x25	; 37
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	80 61       	ori	r24, 0x10	; 16
     5e0:	8c 93       	st	X, r24
 }

 if(pin == PB5 && mode == PULL_UP)
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	85 30       	cpi	r24, 0x05	; 5
     5e6:	51 f4       	brne	.+20     	; 0x5fc <GPIOConfig+0x556>
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	39 f4       	brne	.+14     	; 0x5fc <GPIOConfig+0x556>
 {
    SET_BIT(PORTB,PB5);
     5ee:	a5 e2       	ldi	r26, 0x25	; 37
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e5 e2       	ldi	r30, 0x25	; 37
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	80 62       	ori	r24, 0x20	; 32
     5fa:	8c 93       	st	X, r24
 }
 if(pin == PB6 && mode == PULL_UP)
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	86 30       	cpi	r24, 0x06	; 6
     600:	51 f4       	brne	.+20     	; 0x616 <GPIOConfig+0x570>
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	39 f4       	brne	.+14     	; 0x616 <GPIOConfig+0x570>
 {
    SET_BIT(PORTB,PB6);
     608:	a5 e2       	ldi	r26, 0x25	; 37
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	e5 e2       	ldi	r30, 0x25	; 37
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	80 64       	ori	r24, 0x40	; 64
     614:	8c 93       	st	X, r24
 }
  if(pin == PB7 && mode == PULL_UP)
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	87 30       	cpi	r24, 0x07	; 7
     61a:	51 f4       	brne	.+20     	; 0x630 <GPIOConfig+0x58a>
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	39 f4       	brne	.+14     	; 0x630 <GPIOConfig+0x58a>
 {
    SET_BIT(PORTB,PB7);
     622:	a5 e2       	ldi	r26, 0x25	; 37
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e5 e2       	ldi	r30, 0x25	; 37
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	80 68       	ori	r24, 0x80	; 128
     62e:	8c 93       	st	X, r24
 }


// PULL for D
 if(pin == PD0 && mode == PULL_UP)
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	88 23       	and	r24, r24
     634:	51 f4       	brne	.+20     	; 0x64a <GPIOConfig+0x5a4>
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	39 f4       	brne	.+14     	; 0x64a <GPIOConfig+0x5a4>
 {
    SET_BIT(PORTD,PD0);
     63c:	ab e2       	ldi	r26, 0x2B	; 43
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	eb e2       	ldi	r30, 0x2B	; 43
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	81 60       	ori	r24, 0x01	; 1
     648:	8c 93       	st	X, r24
 }
if(pin == PD1 && mode == PULL_UP)
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	51 f4       	brne	.+20     	; 0x664 <GPIOConfig+0x5be>
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	39 f4       	brne	.+14     	; 0x664 <GPIOConfig+0x5be>
 {
    SET_BIT(PORTD,PD1);
     656:	ab e2       	ldi	r26, 0x2B	; 43
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	eb e2       	ldi	r30, 0x2B	; 43
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	82 60       	ori	r24, 0x02	; 2
     662:	8c 93       	st	X, r24
 }

 if(pin == PD2 && mode == PULL_UP)
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	51 f4       	brne	.+20     	; 0x67e <GPIOConfig+0x5d8>
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	39 f4       	brne	.+14     	; 0x67e <GPIOConfig+0x5d8>
 {
    SET_BIT(PORTD,PD2);
     670:	ab e2       	ldi	r26, 0x2B	; 43
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	eb e2       	ldi	r30, 0x2B	; 43
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	84 60       	ori	r24, 0x04	; 4
     67c:	8c 93       	st	X, r24
 }

 if(pin == PD3 && mode == PULL_UP)
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	51 f4       	brne	.+20     	; 0x698 <GPIOConfig+0x5f2>
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	39 f4       	brne	.+14     	; 0x698 <GPIOConfig+0x5f2>
 {
    SET_BIT(PORTD,PD3);
     68a:	ab e2       	ldi	r26, 0x2B	; 43
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	eb e2       	ldi	r30, 0x2B	; 43
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	88 60       	ori	r24, 0x08	; 8
     696:	8c 93       	st	X, r24
 }

 if(pin == PD4 && mode == PULL_UP)
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	84 30       	cpi	r24, 0x04	; 4
     69c:	51 f4       	brne	.+20     	; 0x6b2 <GPIOConfig+0x60c>
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <GPIOConfig+0x60c>
 {
    SET_BIT(PORTD,PD4);
     6a4:	ab e2       	ldi	r26, 0x2B	; 43
     6a6:	b0 e0       	ldi	r27, 0x00	; 0
     6a8:	eb e2       	ldi	r30, 0x2B	; 43
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	80 61       	ori	r24, 0x10	; 16
     6b0:	8c 93       	st	X, r24
 }

 if(pin == PD5 && mode == PULL_UP)
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	85 30       	cpi	r24, 0x05	; 5
     6b6:	51 f4       	brne	.+20     	; 0x6cc <GPIOConfig+0x626>
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	39 f4       	brne	.+14     	; 0x6cc <GPIOConfig+0x626>
 {
    SET_BIT(PORTD,PD5);
     6be:	ab e2       	ldi	r26, 0x2B	; 43
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	eb e2       	ldi	r30, 0x2B	; 43
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	80 62       	ori	r24, 0x20	; 32
     6ca:	8c 93       	st	X, r24
 }
 if(pin == PD6 && mode == PULL_UP)
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	86 30       	cpi	r24, 0x06	; 6
     6d0:	51 f4       	brne	.+20     	; 0x6e6 <GPIOConfig+0x640>
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	39 f4       	brne	.+14     	; 0x6e6 <GPIOConfig+0x640>
 {
    SET_BIT(PORTD,PD6);
     6d8:	ab e2       	ldi	r26, 0x2B	; 43
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	eb e2       	ldi	r30, 0x2B	; 43
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	80 64       	ori	r24, 0x40	; 64
     6e4:	8c 93       	st	X, r24
 }
  if(pin == PD7 && mode == PULL_UP)
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	87 30       	cpi	r24, 0x07	; 7
     6ea:	51 f4       	brne	.+20     	; 0x700 <GPIOConfig+0x65a>
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	39 f4       	brne	.+14     	; 0x700 <GPIOConfig+0x65a>
 {
    SET_BIT(PORTD,PD7);
     6f2:	ab e2       	ldi	r26, 0x2B	; 43
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	eb e2       	ldi	r30, 0x2B	; 43
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	80 68       	ori	r24, 0x80	; 128
     6fe:	8c 93       	st	X, r24
 }


 // Pull_UP for PORT C

  if(pin == PC0 && mode == PULL_UP)
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	88 23       	and	r24, r24
     704:	51 f4       	brne	.+20     	; 0x71a <GPIOConfig+0x674>
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	39 f4       	brne	.+14     	; 0x71a <GPIOConfig+0x674>
 {
    SET_BIT(PORTC,PC0);
     70c:	a8 e2       	ldi	r26, 0x28	; 40
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e8 e2       	ldi	r30, 0x28	; 40
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	81 60       	ori	r24, 0x01	; 1
     718:	8c 93       	st	X, r24
 }
if(pin == PC1 && mode == PULL_UP)
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	51 f4       	brne	.+20     	; 0x734 <GPIOConfig+0x68e>
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	39 f4       	brne	.+14     	; 0x734 <GPIOConfig+0x68e>
 {
    SET_BIT(PORTC,PC1);
     726:	a8 e2       	ldi	r26, 0x28	; 40
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e8 e2       	ldi	r30, 0x28	; 40
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	82 60       	ori	r24, 0x02	; 2
     732:	8c 93       	st	X, r24
 }

 if(pin == PC2 && mode == PULL_UP)
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	51 f4       	brne	.+20     	; 0x74e <GPIOConfig+0x6a8>
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	39 f4       	brne	.+14     	; 0x74e <GPIOConfig+0x6a8>
 {
    SET_BIT(PORTC,PC2);
     740:	a8 e2       	ldi	r26, 0x28	; 40
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	e8 e2       	ldi	r30, 0x28	; 40
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	84 60       	ori	r24, 0x04	; 4
     74c:	8c 93       	st	X, r24
 }

 if(pin == PC3 && mode == PULL_UP)
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	51 f4       	brne	.+20     	; 0x768 <GPIOConfig+0x6c2>
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	39 f4       	brne	.+14     	; 0x768 <GPIOConfig+0x6c2>
 {
    SET_BIT(PORTC,PC3);
     75a:	a8 e2       	ldi	r26, 0x28	; 40
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	e8 e2       	ldi	r30, 0x28	; 40
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	88 60       	ori	r24, 0x08	; 8
     766:	8c 93       	st	X, r24
 }

 if(pin == PC4 && mode == PULL_UP)
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	84 30       	cpi	r24, 0x04	; 4
     76c:	51 f4       	brne	.+20     	; 0x782 <GPIOConfig+0x6dc>
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	39 f4       	brne	.+14     	; 0x782 <GPIOConfig+0x6dc>
 {
    SET_BIT(PORTC,PC4);
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	80 61       	ori	r24, 0x10	; 16
     780:	8c 93       	st	X, r24
 }

 if(pin == PC5 && mode == PULL_UP)
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	51 f4       	brne	.+20     	; 0x79c <GPIOConfig+0x6f6>
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	39 f4       	brne	.+14     	; 0x79c <GPIOConfig+0x6f6>
 {
    SET_BIT(PORTC,PC5);
     78e:	a8 e2       	ldi	r26, 0x28	; 40
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e8 e2       	ldi	r30, 0x28	; 40
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	80 62       	ori	r24, 0x20	; 32
     79a:	8c 93       	st	X, r24
 }
 if(pin == PC6 && mode == PULL_UP)
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	86 30       	cpi	r24, 0x06	; 6
     7a0:	51 f4       	brne	.+20     	; 0x7b6 <GPIOConfig+0x710>
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	39 f4       	brne	.+14     	; 0x7b6 <GPIOConfig+0x710>
 {
    SET_BIT(PORTC,PC6);
     7a8:	a8 e2       	ldi	r26, 0x28	; 40
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	e8 e2       	ldi	r30, 0x28	; 40
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	80 64       	ori	r24, 0x40	; 64
     7b4:	8c 93       	st	X, r24

 }


}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <GPIOPinRead>:
*Pin: The Atmega328P port pin which need to be read.
*Return value: 0 or 1
******************************************************************************/
// GPIO Read function definitions
uint8_t GPIOPinRead(uint8_t pin)
{
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	69 97       	sbiw	r28, 0x19	; 25
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	88 8f       	std	Y+24, r24	; 0x18
if(pin==PD0)
     7d6:	88 8d       	ldd	r24, Y+24	; 0x18
     7d8:	88 23       	and	r24, r24
     7da:	89 f4       	brne	.+34     	; 0x7fe <GPIOPinRead+0x3e>
{
uint8_t PIN_READ =0x00;
     7dc:	1f 8a       	std	Y+23, r1	; 0x17
PIN_READ=PIND;
     7de:	e9 e2       	ldi	r30, 0x29	; 41
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	8f 8b       	std	Y+23, r24	; 0x17
if(PIN_READ & (1<<PD0))
     7e6:	8f 89       	ldd	r24, Y+23	; 0x17
     7e8:	88 2f       	mov	r24, r24
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	81 70       	andi	r24, 0x01	; 1
     7ee:	90 70       	andi	r25, 0x00	; 0
     7f0:	88 23       	and	r24, r24
     7f2:	19 f0       	breq	.+6      	; 0x7fa <GPIOPinRead+0x3a>
{
    return 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	89 8f       	std	Y+25, r24	; 0x19
     7f8:	b3 c1       	rjmp	.+870    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     7fa:	19 8e       	std	Y+25, r1	; 0x19
     7fc:	b1 c1       	rjmp	.+866    	; 0xb60 <__stack+0x261>
}
}


if(pin==PD1)
     7fe:	88 8d       	ldd	r24, Y+24	; 0x18
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	89 f4       	brne	.+34     	; 0x826 <GPIOPinRead+0x66>
{
uint8_t PIN_READ =0x00;
     804:	1e 8a       	std	Y+22, r1	; 0x16
PIN_READ=PIND;
     806:	e9 e2       	ldi	r30, 0x29	; 41
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	8e 8b       	std	Y+22, r24	; 0x16
if(PIN_READ & (1<<PD1))
     80e:	8e 89       	ldd	r24, Y+22	; 0x16
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	82 70       	andi	r24, 0x02	; 2
     816:	90 70       	andi	r25, 0x00	; 0
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	19 f0       	breq	.+6      	; 0x822 <GPIOPinRead+0x62>
{
    return 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	89 8f       	std	Y+25, r24	; 0x19
     820:	9f c1       	rjmp	.+830    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     822:	19 8e       	std	Y+25, r1	; 0x19
     824:	9d c1       	rjmp	.+826    	; 0xb60 <__stack+0x261>
}
}

if(pin==PD2)
     826:	88 8d       	ldd	r24, Y+24	; 0x18
     828:	82 30       	cpi	r24, 0x02	; 2
     82a:	89 f4       	brne	.+34     	; 0x84e <GPIOPinRead+0x8e>
{
uint8_t PIN_READ =0x00;
     82c:	1d 8a       	std	Y+21, r1	; 0x15
PIN_READ=PIND;
     82e:	e9 e2       	ldi	r30, 0x29	; 41
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8d 8b       	std	Y+21, r24	; 0x15
if(PIN_READ & (1<<PD2))
     836:	8d 89       	ldd	r24, Y+21	; 0x15
     838:	88 2f       	mov	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	84 70       	andi	r24, 0x04	; 4
     83e:	90 70       	andi	r25, 0x00	; 0
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	19 f0       	breq	.+6      	; 0x84a <GPIOPinRead+0x8a>
{
    return 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	89 8f       	std	Y+25, r24	; 0x19
     848:	8b c1       	rjmp	.+790    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     84a:	19 8e       	std	Y+25, r1	; 0x19
     84c:	89 c1       	rjmp	.+786    	; 0xb60 <__stack+0x261>
}
}


if(pin==PD3)
     84e:	88 8d       	ldd	r24, Y+24	; 0x18
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	89 f4       	brne	.+34     	; 0x876 <GPIOPinRead+0xb6>
{
uint8_t PIN_READ =0x00;
     854:	1c 8a       	std	Y+20, r1	; 0x14
PIN_READ=PIND;
     856:	e9 e2       	ldi	r30, 0x29	; 41
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	8c 8b       	std	Y+20, r24	; 0x14
if(PIN_READ & (1<<PD3))
     85e:	8c 89       	ldd	r24, Y+20	; 0x14
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	88 70       	andi	r24, 0x08	; 8
     866:	90 70       	andi	r25, 0x00	; 0
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	19 f0       	breq	.+6      	; 0x872 <GPIOPinRead+0xb2>
{
    return 1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	89 8f       	std	Y+25, r24	; 0x19
     870:	77 c1       	rjmp	.+750    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     872:	19 8e       	std	Y+25, r1	; 0x19
     874:	75 c1       	rjmp	.+746    	; 0xb60 <__stack+0x261>
}
}


if(pin==PD4)
     876:	88 8d       	ldd	r24, Y+24	; 0x18
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	89 f4       	brne	.+34     	; 0x89e <GPIOPinRead+0xde>
{
uint8_t PIN_READ =0x00;
     87c:	1b 8a       	std	Y+19, r1	; 0x13
PIN_READ=PIND;
     87e:	e9 e2       	ldi	r30, 0x29	; 41
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	8b 8b       	std	Y+19, r24	; 0x13
if(PIN_READ & (1<<PD4))
     886:	8b 89       	ldd	r24, Y+19	; 0x13
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	80 71       	andi	r24, 0x10	; 16
     88e:	90 70       	andi	r25, 0x00	; 0
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	19 f0       	breq	.+6      	; 0x89a <GPIOPinRead+0xda>
{
    return 1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	89 8f       	std	Y+25, r24	; 0x19
     898:	63 c1       	rjmp	.+710    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     89a:	19 8e       	std	Y+25, r1	; 0x19
     89c:	61 c1       	rjmp	.+706    	; 0xb60 <__stack+0x261>
}
}


if(pin==PD5)
     89e:	88 8d       	ldd	r24, Y+24	; 0x18
     8a0:	85 30       	cpi	r24, 0x05	; 5
     8a2:	89 f4       	brne	.+34     	; 0x8c6 <GPIOPinRead+0x106>
{
uint8_t PIN_READ =0x00;
     8a4:	1a 8a       	std	Y+18, r1	; 0x12
PIN_READ=PIND;
     8a6:	e9 e2       	ldi	r30, 0x29	; 41
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	8a 8b       	std	Y+18, r24	; 0x12
if(PIN_READ & (1<<PD5))
     8ae:	8a 89       	ldd	r24, Y+18	; 0x12
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	80 72       	andi	r24, 0x20	; 32
     8b6:	90 70       	andi	r25, 0x00	; 0
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	19 f0       	breq	.+6      	; 0x8c2 <GPIOPinRead+0x102>
{
    return 1;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	89 8f       	std	Y+25, r24	; 0x19
     8c0:	4f c1       	rjmp	.+670    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     8c2:	19 8e       	std	Y+25, r1	; 0x19
     8c4:	4d c1       	rjmp	.+666    	; 0xb60 <__stack+0x261>
}
}

if(pin==PD6)
     8c6:	88 8d       	ldd	r24, Y+24	; 0x18
     8c8:	86 30       	cpi	r24, 0x06	; 6
     8ca:	89 f4       	brne	.+34     	; 0x8ee <GPIOPinRead+0x12e>
{
uint8_t PIN_READ =0x00;
     8cc:	19 8a       	std	Y+17, r1	; 0x11
PIN_READ=PIND;
     8ce:	e9 e2       	ldi	r30, 0x29	; 41
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	89 8b       	std	Y+17, r24	; 0x11
if(PIN_READ & (1<<PD6))
     8d6:	89 89       	ldd	r24, Y+17	; 0x11
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	80 74       	andi	r24, 0x40	; 64
     8de:	90 70       	andi	r25, 0x00	; 0
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	19 f0       	breq	.+6      	; 0x8ea <GPIOPinRead+0x12a>
{
    return 1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	89 8f       	std	Y+25, r24	; 0x19
     8e8:	3b c1       	rjmp	.+630    	; 0xb60 <__stack+0x261>
}
else
{
    return 0;
     8ea:	19 8e       	std	Y+25, r1	; 0x19
     8ec:	39 c1       	rjmp	.+626    	; 0xb60 <__stack+0x261>
}
}


if(pin==PD7)
     8ee:	88 8d       	ldd	r24, Y+24	; 0x18
     8f0:	87 30       	cpi	r24, 0x07	; 7
     8f2:	69 f4       	brne	.+26     	; 0x90e <__stack+0xf>
{
uint8_t PIN_READ =0x00;
     8f4:	18 8a       	std	Y+16, r1	; 0x10
PIN_READ=PIND;
     8f6:	e9 e2       	ldi	r30, 0x29	; 41
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	88 8b       	std	Y+16, r24	; 0x10
if(PIN_READ & (1<<PD7))
     8fe:	88 89       	ldd	r24, Y+16	; 0x10
     900:	88 23       	and	r24, r24
     902:	1c f4       	brge	.+6      	; 0x90a <__stack+0xb>
{
return 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	89 8f       	std	Y+25, r24	; 0x19
     908:	2b c1       	rjmp	.+598    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     90a:	19 8e       	std	Y+25, r1	; 0x19
     90c:	29 c1       	rjmp	.+594    	; 0xb60 <__stack+0x261>
}
}

// b port
if(pin==PB0)
     90e:	88 8d       	ldd	r24, Y+24	; 0x18
     910:	88 23       	and	r24, r24
     912:	89 f4       	brne	.+34     	; 0x936 <__stack+0x37>
{
uint8_t PIN_READ =0x00;
     914:	1f 86       	std	Y+15, r1	; 0x0f
PIN_READ=PINB;
     916:	e3 e2       	ldi	r30, 0x23	; 35
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8f 87       	std	Y+15, r24	; 0x0f
if(PIN_READ & (1<<PB0))
     91e:	8f 85       	ldd	r24, Y+15	; 0x0f
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	81 70       	andi	r24, 0x01	; 1
     926:	90 70       	andi	r25, 0x00	; 0
     928:	88 23       	and	r24, r24
     92a:	19 f0       	breq	.+6      	; 0x932 <__stack+0x33>
{
return 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	89 8f       	std	Y+25, r24	; 0x19
     930:	17 c1       	rjmp	.+558    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     932:	19 8e       	std	Y+25, r1	; 0x19
     934:	15 c1       	rjmp	.+554    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB1)
     936:	88 8d       	ldd	r24, Y+24	; 0x18
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	89 f4       	brne	.+34     	; 0x95e <__stack+0x5f>
{
uint8_t PIN_READ =0x00;
     93c:	1e 86       	std	Y+14, r1	; 0x0e
PIN_READ=PINB;
     93e:	e3 e2       	ldi	r30, 0x23	; 35
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8e 87       	std	Y+14, r24	; 0x0e
if(PIN_READ & (1<<PB1))
     946:	8e 85       	ldd	r24, Y+14	; 0x0e
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	82 70       	andi	r24, 0x02	; 2
     94e:	90 70       	andi	r25, 0x00	; 0
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	19 f0       	breq	.+6      	; 0x95a <__stack+0x5b>
{
return 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	89 8f       	std	Y+25, r24	; 0x19
     958:	03 c1       	rjmp	.+518    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     95a:	19 8e       	std	Y+25, r1	; 0x19
     95c:	01 c1       	rjmp	.+514    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB2)
     95e:	88 8d       	ldd	r24, Y+24	; 0x18
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	89 f4       	brne	.+34     	; 0x986 <__stack+0x87>
{
uint8_t PIN_READ =0x00;
     964:	1d 86       	std	Y+13, r1	; 0x0d
PIN_READ=PINB;
     966:	e3 e2       	ldi	r30, 0x23	; 35
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	8d 87       	std	Y+13, r24	; 0x0d
if(PIN_READ & (1<<PB2))
     96e:	8d 85       	ldd	r24, Y+13	; 0x0d
     970:	88 2f       	mov	r24, r24
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	84 70       	andi	r24, 0x04	; 4
     976:	90 70       	andi	r25, 0x00	; 0
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	19 f0       	breq	.+6      	; 0x982 <__stack+0x83>
{
return 1;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	89 8f       	std	Y+25, r24	; 0x19
     980:	ef c0       	rjmp	.+478    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     982:	19 8e       	std	Y+25, r1	; 0x19
     984:	ed c0       	rjmp	.+474    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB3)
     986:	88 8d       	ldd	r24, Y+24	; 0x18
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	89 f4       	brne	.+34     	; 0x9ae <__stack+0xaf>
{
uint8_t PIN_READ =0x00;
     98c:	1c 86       	std	Y+12, r1	; 0x0c
PIN_READ=PINB;
     98e:	e3 e2       	ldi	r30, 0x23	; 35
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	8c 87       	std	Y+12, r24	; 0x0c
if(PIN_READ & (1<<PB3))
     996:	8c 85       	ldd	r24, Y+12	; 0x0c
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	88 70       	andi	r24, 0x08	; 8
     99e:	90 70       	andi	r25, 0x00	; 0
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	19 f0       	breq	.+6      	; 0x9aa <__stack+0xab>
{
return 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	89 8f       	std	Y+25, r24	; 0x19
     9a8:	db c0       	rjmp	.+438    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     9aa:	19 8e       	std	Y+25, r1	; 0x19
     9ac:	d9 c0       	rjmp	.+434    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB4)
     9ae:	88 8d       	ldd	r24, Y+24	; 0x18
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	89 f4       	brne	.+34     	; 0x9d6 <__stack+0xd7>
{
uint8_t PIN_READ =0x00;
     9b4:	1b 86       	std	Y+11, r1	; 0x0b
PIN_READ=PINB;
     9b6:	e3 e2       	ldi	r30, 0x23	; 35
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	8b 87       	std	Y+11, r24	; 0x0b
if(PIN_READ & (1<<PB4))
     9be:	8b 85       	ldd	r24, Y+11	; 0x0b
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	80 71       	andi	r24, 0x10	; 16
     9c6:	90 70       	andi	r25, 0x00	; 0
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <__stack+0xd3>
{
return 1;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	89 8f       	std	Y+25, r24	; 0x19
     9d0:	c7 c0       	rjmp	.+398    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     9d2:	19 8e       	std	Y+25, r1	; 0x19
     9d4:	c5 c0       	rjmp	.+394    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB5)
     9d6:	88 8d       	ldd	r24, Y+24	; 0x18
     9d8:	85 30       	cpi	r24, 0x05	; 5
     9da:	89 f4       	brne	.+34     	; 0x9fe <__stack+0xff>
{
uint8_t PIN_READ =0x00;
     9dc:	1a 86       	std	Y+10, r1	; 0x0a
PIN_READ=PINB;
     9de:	e3 e2       	ldi	r30, 0x23	; 35
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	8a 87       	std	Y+10, r24	; 0x0a
if(PIN_READ & (1<<PB5))
     9e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	80 72       	andi	r24, 0x20	; 32
     9ee:	90 70       	andi	r25, 0x00	; 0
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	19 f0       	breq	.+6      	; 0x9fa <__stack+0xfb>
{
return 1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	89 8f       	std	Y+25, r24	; 0x19
     9f8:	b3 c0       	rjmp	.+358    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     9fa:	19 8e       	std	Y+25, r1	; 0x19
     9fc:	b1 c0       	rjmp	.+354    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB6)
     9fe:	88 8d       	ldd	r24, Y+24	; 0x18
     a00:	86 30       	cpi	r24, 0x06	; 6
     a02:	89 f4       	brne	.+34     	; 0xa26 <__stack+0x127>
{
uint8_t PIN_READ =0x00;
     a04:	19 86       	std	Y+9, r1	; 0x09
PIN_READ=PINB;
     a06:	e3 e2       	ldi	r30, 0x23	; 35
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	89 87       	std	Y+9, r24	; 0x09
if(PIN_READ & (1<<PB6))
     a0e:	89 85       	ldd	r24, Y+9	; 0x09
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	80 74       	andi	r24, 0x40	; 64
     a16:	90 70       	andi	r25, 0x00	; 0
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	19 f0       	breq	.+6      	; 0xa22 <__stack+0x123>
{
return 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	89 8f       	std	Y+25, r24	; 0x19
     a20:	9f c0       	rjmp	.+318    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     a22:	19 8e       	std	Y+25, r1	; 0x19
     a24:	9d c0       	rjmp	.+314    	; 0xb60 <__stack+0x261>
}
}

if(pin==PB7)
     a26:	88 8d       	ldd	r24, Y+24	; 0x18
     a28:	87 30       	cpi	r24, 0x07	; 7
     a2a:	69 f4       	brne	.+26     	; 0xa46 <__stack+0x147>
{
uint8_t PIN_READ =0x00;
     a2c:	18 86       	std	Y+8, r1	; 0x08
PIN_READ=PINB;
     a2e:	e3 e2       	ldi	r30, 0x23	; 35
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	88 87       	std	Y+8, r24	; 0x08
if(PIN_READ & (1<<PB7))
     a36:	88 85       	ldd	r24, Y+8	; 0x08
     a38:	88 23       	and	r24, r24
     a3a:	1c f4       	brge	.+6      	; 0xa42 <__stack+0x143>
{
return 1;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	89 8f       	std	Y+25, r24	; 0x19
     a40:	8f c0       	rjmp	.+286    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     a42:	19 8e       	std	Y+25, r1	; 0x19
     a44:	8d c0       	rjmp	.+282    	; 0xb60 <__stack+0x261>
}
}

// port c
if(pin==PC0)
     a46:	88 8d       	ldd	r24, Y+24	; 0x18
     a48:	88 23       	and	r24, r24
     a4a:	89 f4       	brne	.+34     	; 0xa6e <__stack+0x16f>
{
uint8_t PIN_READ =0x00;
     a4c:	1f 82       	std	Y+7, r1	; 0x07
PIN_READ=PINC;
     a4e:	e6 e2       	ldi	r30, 0x26	; 38
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	8f 83       	std	Y+7, r24	; 0x07
if(PIN_READ & (1<<PC0))
     a56:	8f 81       	ldd	r24, Y+7	; 0x07
     a58:	88 2f       	mov	r24, r24
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	81 70       	andi	r24, 0x01	; 1
     a5e:	90 70       	andi	r25, 0x00	; 0
     a60:	88 23       	and	r24, r24
     a62:	19 f0       	breq	.+6      	; 0xa6a <__stack+0x16b>
{
return 1;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	89 8f       	std	Y+25, r24	; 0x19
     a68:	7b c0       	rjmp	.+246    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     a6a:	19 8e       	std	Y+25, r1	; 0x19
     a6c:	79 c0       	rjmp	.+242    	; 0xb60 <__stack+0x261>
}
}

if(pin==PC1)
     a6e:	88 8d       	ldd	r24, Y+24	; 0x18
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x197>
{
uint8_t PIN_READ =0x00;
     a74:	1e 82       	std	Y+6, r1	; 0x06
PIN_READ=PINC;
     a76:	e6 e2       	ldi	r30, 0x26	; 38
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	8e 83       	std	Y+6, r24	; 0x06
if(PIN_READ & (1<<PC1))
     a7e:	8e 81       	ldd	r24, Y+6	; 0x06
     a80:	88 2f       	mov	r24, r24
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	82 70       	andi	r24, 0x02	; 2
     a86:	90 70       	andi	r25, 0x00	; 0
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	19 f0       	breq	.+6      	; 0xa92 <__stack+0x193>
{
return 1;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	89 8f       	std	Y+25, r24	; 0x19
     a90:	67 c0       	rjmp	.+206    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     a92:	19 8e       	std	Y+25, r1	; 0x19
     a94:	65 c0       	rjmp	.+202    	; 0xb60 <__stack+0x261>
}
}

if(pin==PC2)
     a96:	88 8d       	ldd	r24, Y+24	; 0x18
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	89 f4       	brne	.+34     	; 0xabe <__stack+0x1bf>
{
uint8_t PIN_READ =0x00;
     a9c:	1d 82       	std	Y+5, r1	; 0x05
PIN_READ=PINC;
     a9e:	e6 e2       	ldi	r30, 0x26	; 38
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	8d 83       	std	Y+5, r24	; 0x05
if(PIN_READ & (1<<PC2))
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	84 70       	andi	r24, 0x04	; 4
     aae:	90 70       	andi	r25, 0x00	; 0
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	19 f0       	breq	.+6      	; 0xaba <__stack+0x1bb>
{
return 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	89 8f       	std	Y+25, r24	; 0x19
     ab8:	53 c0       	rjmp	.+166    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     aba:	19 8e       	std	Y+25, r1	; 0x19
     abc:	51 c0       	rjmp	.+162    	; 0xb60 <__stack+0x261>
}
}

if(pin==PC3)
     abe:	88 8d       	ldd	r24, Y+24	; 0x18
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	89 f4       	brne	.+34     	; 0xae6 <__stack+0x1e7>
{
uint8_t PIN_READ =0x00;
     ac4:	1c 82       	std	Y+4, r1	; 0x04
PIN_READ=PINC;
     ac6:	e6 e2       	ldi	r30, 0x26	; 38
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	8c 83       	std	Y+4, r24	; 0x04
if(PIN_READ & (1<<PC3))
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	88 2f       	mov	r24, r24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	88 70       	andi	r24, 0x08	; 8
     ad6:	90 70       	andi	r25, 0x00	; 0
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	19 f0       	breq	.+6      	; 0xae2 <__stack+0x1e3>
{
return 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	89 8f       	std	Y+25, r24	; 0x19
     ae0:	3f c0       	rjmp	.+126    	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     ae2:	19 8e       	std	Y+25, r1	; 0x19
     ae4:	3d c0       	rjmp	.+122    	; 0xb60 <__stack+0x261>
}
}

if(pin==PC4)
     ae6:	88 8d       	ldd	r24, Y+24	; 0x18
     ae8:	84 30       	cpi	r24, 0x04	; 4
     aea:	89 f4       	brne	.+34     	; 0xb0e <__stack+0x20f>
{
uint8_t PIN_READ =0x00;
     aec:	1b 82       	std	Y+3, r1	; 0x03
PIN_READ=PINC;
     aee:	e6 e2       	ldi	r30, 0x26	; 38
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	8b 83       	std	Y+3, r24	; 0x03
if(PIN_READ & (1<<PC4))
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	88 2f       	mov	r24, r24
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	80 71       	andi	r24, 0x10	; 16
     afe:	90 70       	andi	r25, 0x00	; 0
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	19 f0       	breq	.+6      	; 0xb0a <__stack+0x20b>
{
return 1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	89 8f       	std	Y+25, r24	; 0x19
     b08:	2b c0       	rjmp	.+86     	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     b0a:	19 8e       	std	Y+25, r1	; 0x19
     b0c:	29 c0       	rjmp	.+82     	; 0xb60 <__stack+0x261>
}
}

if(pin==PC5)
     b0e:	88 8d       	ldd	r24, Y+24	; 0x18
     b10:	85 30       	cpi	r24, 0x05	; 5
     b12:	89 f4       	brne	.+34     	; 0xb36 <__stack+0x237>
{
uint8_t PIN_READ =0x00;
     b14:	1a 82       	std	Y+2, r1	; 0x02
PIN_READ=PINC;
     b16:	e6 e2       	ldi	r30, 0x26	; 38
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8a 83       	std	Y+2, r24	; 0x02
if(PIN_READ & (1<<PC5))
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	88 2f       	mov	r24, r24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	80 72       	andi	r24, 0x20	; 32
     b26:	90 70       	andi	r25, 0x00	; 0
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	19 f0       	breq	.+6      	; 0xb32 <__stack+0x233>
{
return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	89 8f       	std	Y+25, r24	; 0x19
     b30:	17 c0       	rjmp	.+46     	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     b32:	19 8e       	std	Y+25, r1	; 0x19
     b34:	15 c0       	rjmp	.+42     	; 0xb60 <__stack+0x261>
}
}

if(pin==PC6)
     b36:	88 8d       	ldd	r24, Y+24	; 0x18
     b38:	86 30       	cpi	r24, 0x06	; 6
     b3a:	89 f4       	brne	.+34     	; 0xb5e <__stack+0x25f>
{
uint8_t PIN_READ =0x00;
     b3c:	19 82       	std	Y+1, r1	; 0x01
PIN_READ=PINC;
     b3e:	e6 e2       	ldi	r30, 0x26	; 38
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	89 83       	std	Y+1, r24	; 0x01
if(PIN_READ & (1<<PC6))
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	80 74       	andi	r24, 0x40	; 64
     b4e:	90 70       	andi	r25, 0x00	; 0
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	19 f0       	breq	.+6      	; 0xb5a <__stack+0x25b>
{
return 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	89 8f       	std	Y+25, r24	; 0x19
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <__stack+0x261>
}
else
{
return 0;
     b5a:	19 8e       	std	Y+25, r1	; 0x19
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <__stack+0x261>
}
}


return 0;
     b5e:	19 8e       	std	Y+25, r1	; 0x19
     b60:	89 8d       	ldd	r24, Y+25	; 0x19
}
     b62:	69 96       	adiw	r28, 0x19	; 25
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <GPIOPinWrite>:
*Pin: The Atmega328P pin used to write LOW or HIGH state.
*State: LOW or HIGH
******************************************************************************/

void GPIOPinWrite(uint8_t pin,uint8_t state)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <GPIOPinWrite+0x6>
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	6a 83       	std	Y+2, r22	; 0x02
// write low and high for port d pins
if(pin==PD0 && state == HIGH)
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	88 23       	and	r24, r24
     b86:	51 f4       	brne	.+20     	; 0xb9c <GPIOPinWrite+0x28>
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	39 f4       	brne	.+14     	; 0xb9c <GPIOPinWrite+0x28>
{
    SET_BIT(PORTD,PD0);
     b8e:	ab e2       	ldi	r26, 0x2B	; 43
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	eb e2       	ldi	r30, 0x2B	; 43
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	8c 93       	st	X, r24
}
if(pin==PD0 && state == LOW)
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	88 23       	and	r24, r24
     ba0:	51 f4       	brne	.+20     	; 0xbb6 <GPIOPinWrite+0x42>
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	88 23       	and	r24, r24
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <GPIOPinWrite+0x42>
{
    CLR_BIT(PORTD,PD0);
     ba8:	ab e2       	ldi	r26, 0x2B	; 43
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	eb e2       	ldi	r30, 0x2B	; 43
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	8e 7f       	andi	r24, 0xFE	; 254
     bb4:	8c 93       	st	X, r24
}
if(pin==PD1 && state == HIGH)
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	51 f4       	brne	.+20     	; 0xbd0 <GPIOPinWrite+0x5c>
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <GPIOPinWrite+0x5c>
{
    SET_BIT(PORTD,PD1);
     bc2:	ab e2       	ldi	r26, 0x2B	; 43
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e2       	ldi	r30, 0x2B	; 43
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	82 60       	ori	r24, 0x02	; 2
     bce:	8c 93       	st	X, r24
}
if(pin==PD1 && state == LOW)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	51 f4       	brne	.+20     	; 0xbea <GPIOPinWrite+0x76>
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	88 23       	and	r24, r24
     bda:	39 f4       	brne	.+14     	; 0xbea <GPIOPinWrite+0x76>
{
    CLR_BIT(PORTD,PD1);
     bdc:	ab e2       	ldi	r26, 0x2B	; 43
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e2       	ldi	r30, 0x2B	; 43
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	8c 93       	st	X, r24
}

if(pin==PD2 && state == HIGH)
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	51 f4       	brne	.+20     	; 0xc04 <GPIOPinWrite+0x90>
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	39 f4       	brne	.+14     	; 0xc04 <GPIOPinWrite+0x90>
{
    SET_BIT(PORTD,PD2);
     bf6:	ab e2       	ldi	r26, 0x2B	; 43
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	eb e2       	ldi	r30, 0x2B	; 43
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	8c 93       	st	X, r24
}
if(pin==PD2 && state == LOW)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	51 f4       	brne	.+20     	; 0xc1e <GPIOPinWrite+0xaa>
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 23       	and	r24, r24
     c0e:	39 f4       	brne	.+14     	; 0xc1e <GPIOPinWrite+0xaa>
{
    CLR_BIT(PORTD,PD2);
     c10:	ab e2       	ldi	r26, 0x2B	; 43
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	eb e2       	ldi	r30, 0x2B	; 43
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8b 7f       	andi	r24, 0xFB	; 251
     c1c:	8c 93       	st	X, r24
}
if(pin==PD3 && state == HIGH)
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	51 f4       	brne	.+20     	; 0xc38 <GPIOPinWrite+0xc4>
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	39 f4       	brne	.+14     	; 0xc38 <GPIOPinWrite+0xc4>
{
    SET_BIT(PORTD,PD3);
     c2a:	ab e2       	ldi	r26, 0x2B	; 43
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e2       	ldi	r30, 0x2B	; 43
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	88 60       	ori	r24, 0x08	; 8
     c36:	8c 93       	st	X, r24
}
if(pin==PD3 && state == LOW)
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	83 30       	cpi	r24, 0x03	; 3
     c3c:	51 f4       	brne	.+20     	; 0xc52 <GPIOPinWrite+0xde>
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	88 23       	and	r24, r24
     c42:	39 f4       	brne	.+14     	; 0xc52 <GPIOPinWrite+0xde>
{
    CLR_BIT(PORTD,PD3);
     c44:	ab e2       	ldi	r26, 0x2B	; 43
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	eb e2       	ldi	r30, 0x2B	; 43
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	8c 93       	st	X, r24
}
if(pin==PD4 && state == HIGH)
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	84 30       	cpi	r24, 0x04	; 4
     c56:	51 f4       	brne	.+20     	; 0xc6c <GPIOPinWrite+0xf8>
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	39 f4       	brne	.+14     	; 0xc6c <GPIOPinWrite+0xf8>
{
    SET_BIT(PORTD,PD4);
     c5e:	ab e2       	ldi	r26, 0x2B	; 43
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	eb e2       	ldi	r30, 0x2B	; 43
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	80 61       	ori	r24, 0x10	; 16
     c6a:	8c 93       	st	X, r24
}
if(pin==PD4 && state == LOW)
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	51 f4       	brne	.+20     	; 0xc86 <GPIOPinWrite+0x112>
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	88 23       	and	r24, r24
     c76:	39 f4       	brne	.+14     	; 0xc86 <GPIOPinWrite+0x112>
{
    CLR_BIT(PORTD,PD4);
     c78:	ab e2       	ldi	r26, 0x2B	; 43
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	eb e2       	ldi	r30, 0x2B	; 43
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7e       	andi	r24, 0xEF	; 239
     c84:	8c 93       	st	X, r24
}
if(pin==PD5 && state == HIGH)
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	85 30       	cpi	r24, 0x05	; 5
     c8a:	51 f4       	brne	.+20     	; 0xca0 <GPIOPinWrite+0x12c>
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	39 f4       	brne	.+14     	; 0xca0 <GPIOPinWrite+0x12c>
{
    SET_BIT(PORTD,PD5);
     c92:	ab e2       	ldi	r26, 0x2B	; 43
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	eb e2       	ldi	r30, 0x2B	; 43
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	8c 93       	st	X, r24
}
if(pin==PD5 && state == LOW)
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	85 30       	cpi	r24, 0x05	; 5
     ca4:	51 f4       	brne	.+20     	; 0xcba <GPIOPinWrite+0x146>
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	88 23       	and	r24, r24
     caa:	39 f4       	brne	.+14     	; 0xcba <GPIOPinWrite+0x146>
{
    CLR_BIT(PORTD,PD5);
     cac:	ab e2       	ldi	r26, 0x2B	; 43
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	eb e2       	ldi	r30, 0x2B	; 43
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	8c 93       	st	X, r24
}

if(pin==PD6 && state == HIGH)
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	86 30       	cpi	r24, 0x06	; 6
     cbe:	51 f4       	brne	.+20     	; 0xcd4 <GPIOPinWrite+0x160>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <GPIOPinWrite+0x160>
{
    SET_BIT(PORTD,PD6);
     cc6:	ab e2       	ldi	r26, 0x2B	; 43
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	eb e2       	ldi	r30, 0x2B	; 43
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 64       	ori	r24, 0x40	; 64
     cd2:	8c 93       	st	X, r24
}
if(pin==PD6 && state == LOW)
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	86 30       	cpi	r24, 0x06	; 6
     cd8:	51 f4       	brne	.+20     	; 0xcee <GPIOPinWrite+0x17a>
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	88 23       	and	r24, r24
     cde:	39 f4       	brne	.+14     	; 0xcee <GPIOPinWrite+0x17a>
{
    CLR_BIT(PORTD,PD6);
     ce0:	ab e2       	ldi	r26, 0x2B	; 43
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	eb e2       	ldi	r30, 0x2B	; 43
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8f 7b       	andi	r24, 0xBF	; 191
     cec:	8c 93       	st	X, r24
}
if(pin==PD7 && state == HIGH)
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	87 30       	cpi	r24, 0x07	; 7
     cf2:	51 f4       	brne	.+20     	; 0xd08 <GPIOPinWrite+0x194>
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	39 f4       	brne	.+14     	; 0xd08 <GPIOPinWrite+0x194>
{
    SET_BIT(PORTD,PD7);
     cfa:	ab e2       	ldi	r26, 0x2B	; 43
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	eb e2       	ldi	r30, 0x2B	; 43
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24
}
if(pin==PD7 && state == LOW)
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	87 30       	cpi	r24, 0x07	; 7
     d0c:	51 f4       	brne	.+20     	; 0xd22 <GPIOPinWrite+0x1ae>
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	88 23       	and	r24, r24
     d12:	39 f4       	brne	.+14     	; 0xd22 <GPIOPinWrite+0x1ae>
{
    CLR_BIT(PORTD,PD7);
     d14:	ab e2       	ldi	r26, 0x2B	; 43
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e2       	ldi	r30, 0x2B	; 43
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 77       	andi	r24, 0x7F	; 127
     d20:	8c 93       	st	X, r24
}


// write low and high for port B pins
if(pin==PB0 && state == HIGH)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 23       	and	r24, r24
     d26:	51 f4       	brne	.+20     	; 0xd3c <GPIOPinWrite+0x1c8>
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <GPIOPinWrite+0x1c8>
{
    SET_BIT(PORTB,PB0);
     d2e:	a5 e2       	ldi	r26, 0x25	; 37
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e2       	ldi	r30, 0x25	; 37
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	8c 93       	st	X, r24
}
if(pin==PB0 && state == LOW)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	88 23       	and	r24, r24
     d40:	51 f4       	brne	.+20     	; 0xd56 <GPIOPinWrite+0x1e2>
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	88 23       	and	r24, r24
     d46:	39 f4       	brne	.+14     	; 0xd56 <GPIOPinWrite+0x1e2>
{
    CLR_BIT(PORTB,PB0);
     d48:	a5 e2       	ldi	r26, 0x25	; 37
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e2       	ldi	r30, 0x25	; 37
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	8e 7f       	andi	r24, 0xFE	; 254
     d54:	8c 93       	st	X, r24
}
if(pin==PB1 && state == HIGH)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	51 f4       	brne	.+20     	; 0xd70 <GPIOPinWrite+0x1fc>
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	39 f4       	brne	.+14     	; 0xd70 <GPIOPinWrite+0x1fc>
{
    SET_BIT(PORTB,PB1);
     d62:	a5 e2       	ldi	r26, 0x25	; 37
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e2       	ldi	r30, 0x25	; 37
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	8c 93       	st	X, r24
}
if(pin==PB1 && state == LOW)
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	51 f4       	brne	.+20     	; 0xd8a <GPIOPinWrite+0x216>
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	88 23       	and	r24, r24
     d7a:	39 f4       	brne	.+14     	; 0xd8a <GPIOPinWrite+0x216>
{
    CLR_BIT(PORTB,PB1);
     d7c:	a5 e2       	ldi	r26, 0x25	; 37
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e5 e2       	ldi	r30, 0x25	; 37
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	8c 93       	st	X, r24
}

if(pin==PB2 && state == HIGH)
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	51 f4       	brne	.+20     	; 0xda4 <GPIOPinWrite+0x230>
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	39 f4       	brne	.+14     	; 0xda4 <GPIOPinWrite+0x230>
{
    SET_BIT(PORTB,PB2);
     d96:	a5 e2       	ldi	r26, 0x25	; 37
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e5 e2       	ldi	r30, 0x25	; 37
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	84 60       	ori	r24, 0x04	; 4
     da2:	8c 93       	st	X, r24
}
if(pin==PB2 && state == LOW)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	51 f4       	brne	.+20     	; 0xdbe <GPIOPinWrite+0x24a>
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	88 23       	and	r24, r24
     dae:	39 f4       	brne	.+14     	; 0xdbe <GPIOPinWrite+0x24a>
{
    CLR_BIT(PORTB,PB2);
     db0:	a5 e2       	ldi	r26, 0x25	; 37
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e2       	ldi	r30, 0x25	; 37
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8b 7f       	andi	r24, 0xFB	; 251
     dbc:	8c 93       	st	X, r24
}
if(pin==PB3 && state == HIGH)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	51 f4       	brne	.+20     	; 0xdd8 <GPIOPinWrite+0x264>
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <GPIOPinWrite+0x264>
{
    SET_BIT(PORTB,PB3);
     dca:	a5 e2       	ldi	r26, 0x25	; 37
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e5 e2       	ldi	r30, 0x25	; 37
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	88 60       	ori	r24, 0x08	; 8
     dd6:	8c 93       	st	X, r24
}
if(pin==PB3 && state == LOW)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	51 f4       	brne	.+20     	; 0xdf2 <GPIOPinWrite+0x27e>
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	88 23       	and	r24, r24
     de2:	39 f4       	brne	.+14     	; 0xdf2 <GPIOPinWrite+0x27e>
{
    CLR_BIT(PORTB,PB3);
     de4:	a5 e2       	ldi	r26, 0x25	; 37
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e2       	ldi	r30, 0x25	; 37
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	8c 93       	st	X, r24
}
if(pin==PB4 && state == HIGH)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	84 30       	cpi	r24, 0x04	; 4
     df6:	51 f4       	brne	.+20     	; 0xe0c <GPIOPinWrite+0x298>
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	39 f4       	brne	.+14     	; 0xe0c <GPIOPinWrite+0x298>
{
    SET_BIT(PORTB,PB4);
     dfe:	a5 e2       	ldi	r26, 0x25	; 37
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e5 e2       	ldi	r30, 0x25	; 37
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 61       	ori	r24, 0x10	; 16
     e0a:	8c 93       	st	X, r24
}
if(pin==PB4 && state == LOW)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	84 30       	cpi	r24, 0x04	; 4
     e10:	51 f4       	brne	.+20     	; 0xe26 <GPIOPinWrite+0x2b2>
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	88 23       	and	r24, r24
     e16:	39 f4       	brne	.+14     	; 0xe26 <GPIOPinWrite+0x2b2>
{
    CLR_BIT(PORTB,PB4);
     e18:	a5 e2       	ldi	r26, 0x25	; 37
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e5 e2       	ldi	r30, 0x25	; 37
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7e       	andi	r24, 0xEF	; 239
     e24:	8c 93       	st	X, r24
}
if(pin==PB5 && state == HIGH)
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	85 30       	cpi	r24, 0x05	; 5
     e2a:	51 f4       	brne	.+20     	; 0xe40 <GPIOPinWrite+0x2cc>
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	39 f4       	brne	.+14     	; 0xe40 <GPIOPinWrite+0x2cc>
{
    SET_BIT(PORTB,PB5);
     e32:	a5 e2       	ldi	r26, 0x25	; 37
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e2       	ldi	r30, 0x25	; 37
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	8c 93       	st	X, r24
}
if(pin==PB5 && state == LOW)
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	51 f4       	brne	.+20     	; 0xe5a <GPIOPinWrite+0x2e6>
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	88 23       	and	r24, r24
     e4a:	39 f4       	brne	.+14     	; 0xe5a <GPIOPinWrite+0x2e6>
{
    CLR_BIT(PORTB,PB5);
     e4c:	a5 e2       	ldi	r26, 0x25	; 37
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e2       	ldi	r30, 0x25	; 37
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8f 7d       	andi	r24, 0xDF	; 223
     e58:	8c 93       	st	X, r24
}

if(pin==PB6 && state == HIGH)
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	86 30       	cpi	r24, 0x06	; 6
     e5e:	51 f4       	brne	.+20     	; 0xe74 <GPIOPinWrite+0x300>
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	39 f4       	brne	.+14     	; 0xe74 <GPIOPinWrite+0x300>
{
    SET_BIT(PORTB,PB6);
     e66:	a5 e2       	ldi	r26, 0x25	; 37
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e2       	ldi	r30, 0x25	; 37
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	8c 93       	st	X, r24
}
if(pin==PB6 && state == LOW)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	86 30       	cpi	r24, 0x06	; 6
     e78:	51 f4       	brne	.+20     	; 0xe8e <GPIOPinWrite+0x31a>
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	88 23       	and	r24, r24
     e7e:	39 f4       	brne	.+14     	; 0xe8e <GPIOPinWrite+0x31a>
{
    CLR_BIT(PORTB,PB6);
     e80:	a5 e2       	ldi	r26, 0x25	; 37
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e5 e2       	ldi	r30, 0x25	; 37
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8f 7b       	andi	r24, 0xBF	; 191
     e8c:	8c 93       	st	X, r24
}
if(pin==PB7 && state == HIGH)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	87 30       	cpi	r24, 0x07	; 7
     e92:	51 f4       	brne	.+20     	; 0xea8 <GPIOPinWrite+0x334>
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	39 f4       	brne	.+14     	; 0xea8 <GPIOPinWrite+0x334>
{
    SET_BIT(PORTB,PB7);
     e9a:	a5 e2       	ldi	r26, 0x25	; 37
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e2       	ldi	r30, 0x25	; 37
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8c 93       	st	X, r24
}
if(pin==PB7 && state == LOW)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	87 30       	cpi	r24, 0x07	; 7
     eac:	51 f4       	brne	.+20     	; 0xec2 <GPIOPinWrite+0x34e>
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	88 23       	and	r24, r24
     eb2:	39 f4       	brne	.+14     	; 0xec2 <GPIOPinWrite+0x34e>
{
    CLR_BIT(PORTB,PB7);
     eb4:	a5 e2       	ldi	r26, 0x25	; 37
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e2       	ldi	r30, 0x25	; 37
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	8c 93       	st	X, r24
}

// PORT C pins
// write low and high for port C pins
if(pin==PC0 && state == HIGH)
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	88 23       	and	r24, r24
     ec6:	51 f4       	brne	.+20     	; 0xedc <GPIOPinWrite+0x368>
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	39 f4       	brne	.+14     	; 0xedc <GPIOPinWrite+0x368>
{
    SET_BIT(PORTC,PC0);
     ece:	a8 e2       	ldi	r26, 0x28	; 40
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e8 e2       	ldi	r30, 0x28	; 40
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8c 93       	st	X, r24
}
if(pin==PC0 && state == LOW)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	88 23       	and	r24, r24
     ee0:	51 f4       	brne	.+20     	; 0xef6 <GPIOPinWrite+0x382>
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 23       	and	r24, r24
     ee6:	39 f4       	brne	.+14     	; 0xef6 <GPIOPinWrite+0x382>
{
    CLR_BIT(PORTC,PC0);
     ee8:	a8 e2       	ldi	r26, 0x28	; 40
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e8 e2       	ldi	r30, 0x28	; 40
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8e 7f       	andi	r24, 0xFE	; 254
     ef4:	8c 93       	st	X, r24
}
if(pin==PC1 && state == HIGH)
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	51 f4       	brne	.+20     	; 0xf10 <GPIOPinWrite+0x39c>
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	39 f4       	brne	.+14     	; 0xf10 <GPIOPinWrite+0x39c>
{
    SET_BIT(PORTC,PC1);
     f02:	a8 e2       	ldi	r26, 0x28	; 40
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e8 e2       	ldi	r30, 0x28	; 40
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	8c 93       	st	X, r24
}
if(pin==PC1 && state == LOW)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	51 f4       	brne	.+20     	; 0xf2a <GPIOPinWrite+0x3b6>
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	88 23       	and	r24, r24
     f1a:	39 f4       	brne	.+14     	; 0xf2a <GPIOPinWrite+0x3b6>
{
    CLR_BIT(PORTC,PC1);
     f1c:	a8 e2       	ldi	r26, 0x28	; 40
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e2       	ldi	r30, 0x28	; 40
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8d 7f       	andi	r24, 0xFD	; 253
     f28:	8c 93       	st	X, r24
}

if(pin==PC2 && state == HIGH)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	51 f4       	brne	.+20     	; 0xf44 <GPIOPinWrite+0x3d0>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	39 f4       	brne	.+14     	; 0xf44 <GPIOPinWrite+0x3d0>
{
    SET_BIT(PORTC,PC2);
     f36:	a8 e2       	ldi	r26, 0x28	; 40
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e8 e2       	ldi	r30, 0x28	; 40
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	8c 93       	st	X, r24
}
if(pin==PC2 && state == LOW)
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	51 f4       	brne	.+20     	; 0xf5e <GPIOPinWrite+0x3ea>
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	88 23       	and	r24, r24
     f4e:	39 f4       	brne	.+14     	; 0xf5e <GPIOPinWrite+0x3ea>
{
    CLR_BIT(PORTC,PC2);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8b 7f       	andi	r24, 0xFB	; 251
     f5c:	8c 93       	st	X, r24
}
if(pin==PC3 && state == HIGH)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	51 f4       	brne	.+20     	; 0xf78 <GPIOPinWrite+0x404>
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	39 f4       	brne	.+14     	; 0xf78 <GPIOPinWrite+0x404>
{
    SET_BIT(PORTC,PC3);
     f6a:	a8 e2       	ldi	r26, 0x28	; 40
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e2       	ldi	r30, 0x28	; 40
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 60       	ori	r24, 0x08	; 8
     f76:	8c 93       	st	X, r24
}
if(pin==PC3 && state == LOW)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	51 f4       	brne	.+20     	; 0xf92 <GPIOPinWrite+0x41e>
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 23       	and	r24, r24
     f82:	39 f4       	brne	.+14     	; 0xf92 <GPIOPinWrite+0x41e>
{
    CLR_BIT(PORTC,PC3);
     f84:	a8 e2       	ldi	r26, 0x28	; 40
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e8 e2       	ldi	r30, 0x28	; 40
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	87 7f       	andi	r24, 0xF7	; 247
     f90:	8c 93       	st	X, r24
}
if(pin==PC4 && state == HIGH)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	51 f4       	brne	.+20     	; 0xfac <GPIOPinWrite+0x438>
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	39 f4       	brne	.+14     	; 0xfac <GPIOPinWrite+0x438>
{
    SET_BIT(PORTC,PC4);
     f9e:	a8 e2       	ldi	r26, 0x28	; 40
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e2       	ldi	r30, 0x28	; 40
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	8c 93       	st	X, r24
}
if(pin==PC4 && state == LOW)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	51 f4       	brne	.+20     	; 0xfc6 <GPIOPinWrite+0x452>
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	88 23       	and	r24, r24
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <GPIOPinWrite+0x452>
{
    CLR_BIT(PORTC,PC4);
     fb8:	a8 e2       	ldi	r26, 0x28	; 40
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e2       	ldi	r30, 0x28	; 40
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7e       	andi	r24, 0xEF	; 239
     fc4:	8c 93       	st	X, r24
}
if(pin==PC5 && state == HIGH)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	51 f4       	brne	.+20     	; 0xfe0 <GPIOPinWrite+0x46c>
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <GPIOPinWrite+0x46c>
{
    SET_BIT(PORTC,PC5);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 62       	ori	r24, 0x20	; 32
     fde:	8c 93       	st	X, r24
}
if(pin==PC5 && state == LOW)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	85 30       	cpi	r24, 0x05	; 5
     fe4:	51 f4       	brne	.+20     	; 0xffa <GPIOPinWrite+0x486>
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 23       	and	r24, r24
     fea:	39 f4       	brne	.+14     	; 0xffa <GPIOPinWrite+0x486>
{
    CLR_BIT(PORTC,PC5);
     fec:	a8 e2       	ldi	r26, 0x28	; 40
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e8 e2       	ldi	r30, 0x28	; 40
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 7d       	andi	r24, 0xDF	; 223
     ff8:	8c 93       	st	X, r24
}
if(pin==PC6 && state == HIGH)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	86 30       	cpi	r24, 0x06	; 6
     ffe:	51 f4       	brne	.+20     	; 0x1014 <GPIOPinWrite+0x4a0>
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	39 f4       	brne	.+14     	; 0x1014 <GPIOPinWrite+0x4a0>
{
    SET_BIT(PORTC,PC6);
    1006:	a8 e2       	ldi	r26, 0x28	; 40
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e2       	ldi	r30, 0x28	; 40
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 64       	ori	r24, 0x40	; 64
    1012:	8c 93       	st	X, r24
}
if(pin==PC6 && state == LOW)
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	86 30       	cpi	r24, 0x06	; 6
    1018:	51 f4       	brne	.+20     	; 0x102e <GPIOPinWrite+0x4ba>
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	88 23       	and	r24, r24
    101e:	39 f4       	brne	.+14     	; 0x102e <GPIOPinWrite+0x4ba>
{
    CLR_BIT(PORTC,PC6);
    1020:	a8 e2       	ldi	r26, 0x28	; 40
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e2       	ldi	r30, 0x28	; 40
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 7b       	andi	r24, 0xBF	; 191
    102c:	8c 93       	st	X, r24
}


}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <main>:
******************************************************************************/
/******************************************************************************
*main function
******************************************************************************/
int main(void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	aa 97       	sbiw	r28, 0x2a	; 42
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61


GPIOConfig(PD7,OUTPUT);
    104c:	87 e0       	ldi	r24, 0x07	; 7
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIOConfig>
GPIOConfig(PD1,OUTPUT);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIOConfig>

GPIOConfig(PD3,INPUT);
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIOConfig>
GPIOConfig(PD2,INPUT);
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIOConfig>


//PULL UP
GPIOPinWrite(PD3,HIGH);
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
GPIOPinWrite(PD2,HIGH);
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>

//Interrupt register configurations
EICRA |= ((1 << ISC10)|(1 << ISC00));
    107c:	a9 e6       	ldi	r26, 0x69	; 105
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e9 e6       	ldi	r30, 0x69	; 105
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	85 60       	ori	r24, 0x05	; 5
    1088:	8c 93       	st	X, r24
EICRA &= ~((1 << ISC11)|(1 << ISC01)); //Any logical change will raise interrupt.
    108a:	a9 e6       	ldi	r26, 0x69	; 105
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e9 e6       	ldi	r30, 0x69	; 105
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	85 7f       	andi	r24, 0xF5	; 245
    1096:	8c 93       	st	X, r24
//EICRA |= ((1 << ISC11)|(1 << ISC01)); //Any logical change will raise interrupt.
EIMSK |= ((1 << INT1)|(1 << INT0)); //Local Interrupt enable
    1098:	ad e3       	ldi	r26, 0x3D	; 61
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ed e3       	ldi	r30, 0x3D	; 61
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	83 60       	ori	r24, 0x03	; 3
    10a4:	8c 93       	st	X, r24

sei(); // SREG|=(1<<7); macros to enable global INT sei(); cli();
    10a6:	78 94       	sei

FLAG_BIT.FLAG_ISR1=0;
    10a8:	80 91 08 01 	lds	r24, 0x0108
    10ac:	8e 7f       	andi	r24, 0xFE	; 254
    10ae:	80 93 08 01 	sts	0x0108, r24
FLAG_BIT.FLAG_ISR2=0;
    10b2:	80 91 08 01 	lds	r24, 0x0108
    10b6:	8d 7f       	andi	r24, 0xFD	; 253
    10b8:	80 93 08 01 	sts	0x0108, r24


//FSM Logic
while(1)
{
if(FLAG_BIT.FLAG_ISR1==1 && FLAG_BIT.FLAG_ISR2==0)
    10bc:	80 91 08 01 	lds	r24, 0x0108
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <main+0x90>
    10c6:	f2 c0       	rjmp	.+484    	; 0x12ac <main+0x274>
    10c8:	80 91 08 01 	lds	r24, 0x0108
    10cc:	82 70       	andi	r24, 0x02	; 2
    10ce:	88 23       	and	r24, r24
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <main+0x9c>
    10d2:	ec c0       	rjmp	.+472    	; 0x12ac <main+0x274>
{
FSMStateA();
    10d4:	0e 94 26 0b 	call	0x164c	; 0x164c <FSMStateA>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e8       	ldi	r25, 0x80	; 128
    10dc:	ab e3       	ldi	r26, 0x3B	; 59
    10de:	b6 e4       	ldi	r27, 0x46	; 70
    10e0:	8f a3       	std	Y+39, r24	; 0x27
    10e2:	98 a7       	std	Y+40, r25	; 0x28
    10e4:	a9 a7       	std	Y+41, r26	; 0x29
    10e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ea:	78 a5       	ldd	r23, Y+40	; 0x28
    10ec:	89 a5       	ldd	r24, Y+41	; 0x29
    10ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	4a e7       	ldi	r20, 0x7A	; 122
    10f6:	55 e4       	ldi	r21, 0x45	; 69
    10f8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8b a3       	std	Y+35, r24	; 0x23
    1102:	9c a3       	std	Y+36, r25	; 0x24
    1104:	ad a3       	std	Y+37, r26	; 0x25
    1106:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1108:	6b a1       	ldd	r22, Y+35	; 0x23
    110a:	7c a1       	ldd	r23, Y+36	; 0x24
    110c:	8d a1       	ldd	r24, Y+37	; 0x25
    110e:	9e a1       	ldd	r25, Y+38	; 0x26
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	5f e3       	ldi	r21, 0x3F	; 63
    1118:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__ltsf2>
    111c:	88 23       	and	r24, r24
    111e:	2c f4       	brge	.+10     	; 0x112a <main+0xf2>
		__ticks = 1;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9a a3       	std	Y+34, r25	; 0x22
    1126:	89 a3       	std	Y+33, r24	; 0x21
    1128:	3f c0       	rjmp	.+126    	; 0x11a8 <main+0x170>
	else if (__tmp > 65535)
    112a:	6b a1       	ldd	r22, Y+35	; 0x23
    112c:	7c a1       	ldd	r23, Y+36	; 0x24
    112e:	8d a1       	ldd	r24, Y+37	; 0x25
    1130:	9e a1       	ldd	r25, Y+38	; 0x26
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	4f e7       	ldi	r20, 0x7F	; 127
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gtsf2>
    113e:	18 16       	cp	r1, r24
    1140:	4c f5       	brge	.+82     	; 0x1194 <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1142:	6f a1       	ldd	r22, Y+39	; 0x27
    1144:	78 a5       	ldd	r23, Y+40	; 0x28
    1146:	89 a5       	ldd	r24, Y+41	; 0x29
    1148:	9a a5       	ldd	r25, Y+42	; 0x2a
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e2       	ldi	r20, 0x20	; 32
    1150:	51 e4       	ldi	r21, 0x41	; 65
    1152:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	9a a3       	std	Y+34, r25	; 0x22
    1168:	89 a3       	std	Y+33, r24	; 0x21
    116a:	0f c0       	rjmp	.+30     	; 0x118a <main+0x152>
    116c:	80 e9       	ldi	r24, 0x90	; 144
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	98 a3       	std	Y+32, r25	; 0x20
    1172:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1176:	98 a1       	ldd	r25, Y+32	; 0x20
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <main+0x140>
    117c:	98 a3       	std	Y+32, r25	; 0x20
    117e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1180:	89 a1       	ldd	r24, Y+33	; 0x21
    1182:	9a a1       	ldd	r25, Y+34	; 0x22
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	9a a3       	std	Y+34, r25	; 0x22
    1188:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118a:	89 a1       	ldd	r24, Y+33	; 0x21
    118c:	9a a1       	ldd	r25, Y+34	; 0x22
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	69 f7       	brne	.-38     	; 0x116c <main+0x134>
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <main+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1194:	6b a1       	ldd	r22, Y+35	; 0x23
    1196:	7c a1       	ldd	r23, Y+36	; 0x24
    1198:	8d a1       	ldd	r24, Y+37	; 0x25
    119a:	9e a1       	ldd	r25, Y+38	; 0x26
    119c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	9a a3       	std	Y+34, r25	; 0x22
    11a6:	89 a3       	std	Y+33, r24	; 0x21
    11a8:	89 a1       	ldd	r24, Y+33	; 0x21
    11aa:	9a a1       	ldd	r25, Y+34	; 0x22
    11ac:	9e 8f       	std	Y+30, r25	; 0x1e
    11ae:	8d 8f       	std	Y+29, r24	; 0x1d
    11b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <main+0x17c>
    11b8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ba:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(12000);
FLAG_BIT.FLAG_ISR1=0;
    11bc:	80 91 08 01 	lds	r24, 0x0108
    11c0:	8e 7f       	andi	r24, 0xFE	; 254
    11c2:	80 93 08 01 	sts	0x0108, r24
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e4       	ldi	r25, 0x40	; 64
    11ca:	ac e1       	ldi	r26, 0x1C	; 28
    11cc:	b6 e4       	ldi	r27, 0x46	; 70
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a e7       	ldi	r20, 0x7A	; 122
    11e4:	55 e4       	ldi	r21, 0x45	; 69
    11e6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <main+0x1e0>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <main+0x25e>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <main+0x240>
    125a:	80 e9       	ldi	r24, 0x90	; 144
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <main+0x22e>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <main+0x222>
    1280:	1d cf       	rjmp	.-454    	; 0x10bc <main+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <main+0x26a>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
    12aa:	08 cf       	rjmp	.-496    	; 0x10bc <main+0x84>
_delay_ms(10000);

}

else if(FLAG_BIT.FLAG_ISR1==0 && FLAG_BIT.FLAG_ISR2==1)
    12ac:	80 91 08 01 	lds	r24, 0x0108
    12b0:	81 70       	andi	r24, 0x01	; 1
    12b2:	88 23       	and	r24, r24
    12b4:	41 f4       	brne	.+16     	; 0x12c6 <main+0x28e>
    12b6:	80 91 08 01 	lds	r24, 0x0108
    12ba:	82 70       	andi	r24, 0x02	; 2
    12bc:	88 23       	and	r24, r24
    12be:	19 f0       	breq	.+6      	; 0x12c6 <main+0x28e>
{
FSMStateB();
    12c0:	0e 94 35 0b 	call	0x166a	; 0x166a <FSMStateB>
    12c4:	fb ce       	rjmp	.-522    	; 0x10bc <main+0x84>
}
else if(FLAG_BIT.FLAG_ISR1==1 && FLAG_BIT.FLAG_ISR2==1)
    12c6:	80 91 08 01 	lds	r24, 0x0108
    12ca:	81 70       	andi	r24, 0x01	; 1
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <main+0x29a>
    12d0:	85 c0       	rjmp	.+266    	; 0x13dc <main+0x3a4>
    12d2:	80 91 08 01 	lds	r24, 0x0108
    12d6:	82 70       	andi	r24, 0x02	; 2
    12d8:	88 23       	and	r24, r24
    12da:	09 f4       	brne	.+2      	; 0x12de <main+0x2a6>
    12dc:	7f c0       	rjmp	.+254    	; 0x13dc <main+0x3a4>
{
FSMInit();
    12de:	0e 94 1f 0a 	call	0x143e	; 0x143e <FSMInit>
FLAG_BIT.FLAG_ISR1=0;
    12e2:	80 91 08 01 	lds	r24, 0x0108
    12e6:	8e 7f       	andi	r24, 0xFE	; 254
    12e8:	80 93 08 01 	sts	0x0108, r24
FLAG_BIT.FLAG_ISR2=0;
    12ec:	80 91 08 01 	lds	r24, 0x0108
    12f0:	8d 7f       	andi	r24, 0xFD	; 253
    12f2:	80 93 08 01 	sts	0x0108, r24
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	aa ef       	ldi	r26, 0xFA	; 250
    12fc:	b4 e4       	ldi	r27, 0x44	; 68
    12fe:	8b 87       	std	Y+11, r24	; 0x0b
    1300:	9c 87       	std	Y+12, r25	; 0x0c
    1302:	ad 87       	std	Y+13, r26	; 0x0d
    1304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	6b 85       	ldd	r22, Y+11	; 0x0b
    1308:	7c 85       	ldd	r23, Y+12	; 0x0c
    130a:	8d 85       	ldd	r24, Y+13	; 0x0d
    130c:	9e 85       	ldd	r25, Y+14	; 0x0e
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a e7       	ldi	r20, 0x7A	; 122
    1314:	55 e4       	ldi	r21, 0x45	; 69
    1316:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8f 83       	std	Y+7, r24	; 0x07
    1320:	98 87       	std	Y+8, r25	; 0x08
    1322:	a9 87       	std	Y+9, r26	; 0x09
    1324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__ltsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <main+0x310>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <main+0x38e>
	else if (__tmp > 65535)
    1348:	6f 81       	ldd	r22, Y+7	; 0x07
    134a:	78 85       	ldd	r23, Y+8	; 0x08
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	6b 85       	ldd	r22, Y+11	; 0x0b
    1362:	7c 85       	ldd	r23, Y+12	; 0x0c
    1364:	8d 85       	ldd	r24, Y+13	; 0x0d
    1366:	9e 85       	ldd	r25, Y+14	; 0x0e
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <main+0x370>
    138a:	80 e9       	ldi	r24, 0x90	; 144
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <main+0x35e>
    139a:	9c 83       	std	Y+4, r25	; 0x04
    139c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f7       	brne	.-38     	; 0x138a <main+0x352>
    13b0:	85 ce       	rjmp	.-758    	; 0x10bc <main+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	6f 81       	ldd	r22, Y+7	; 0x07
    13b4:	78 85       	ldd	r23, Y+8	; 0x08
    13b6:	89 85       	ldd	r24, Y+9	; 0x09
    13b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ba:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <main+0x39a>
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	70 ce       	rjmp	.-800    	; 0x10bc <main+0x84>
_delay_ms(2000);

}
else
{
FSMInit();
    13dc:	0e 94 1f 0a 	call	0x143e	; 0x143e <FSMInit>
    13e0:	6d ce       	rjmp	.-806    	; 0x10bc <main+0x84>

000013e2 <__vector_2>:
/******************************************************************************
* Internal functions
******************************************************************************/
//ISR
ISR(INT1_vect)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	8f 93       	push	r24
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
  FLAG_BIT.FLAG_ISR1 = 1;
    13f6:	80 91 08 01 	lds	r24, 0x0108
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	80 93 08 01 	sts	0x0108, r24
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	8f 91       	pop	r24
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_1>:
ISR(INT0_vect)
{
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	8f 93       	push	r24
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
 FLAG_BIT.FLAG_ISR2=1;
    1424:	80 91 08 01 	lds	r24, 0x0108
    1428:	82 60       	ori	r24, 0x02	; 2
    142a:	80 93 08 01 	sts	0x0108, r24
}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	8f 91       	pop	r24
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <FSMInit>:
*Purpose: The function is used to initialize the FSM transition to ideal state or default state.
*Arguments: None
*Return: None
******************************************************************************/
void FSMInit()
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	6c 97       	sbiw	r28, 0x1c	; 28
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
GPIOPinWrite(PD7,HIGH);
    1452:	87 e0       	ldi	r24, 0x07	; 7
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
GPIOPinWrite(PD1,HIGH);
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	aa ef       	ldi	r26, 0xFA	; 250
    1468:	b4 e4       	ldi	r27, 0x44	; 68
    146a:	89 8f       	std	Y+25, r24	; 0x19
    146c:	9a 8f       	std	Y+26, r25	; 0x1a
    146e:	ab 8f       	std	Y+27, r26	; 0x1b
    1470:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	69 8d       	ldd	r22, Y+25	; 0x19
    1474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a e7       	ldi	r20, 0x7A	; 122
    1480:	55 e4       	ldi	r21, 0x45	; 69
    1482:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8d 8b       	std	Y+21, r24	; 0x15
    148c:	9e 8b       	std	Y+22, r25	; 0x16
    148e:	af 8b       	std	Y+23, r26	; 0x17
    1490:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <FSMInit+0x76>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 8b       	std	Y+20, r25	; 0x14
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <FSMInit+0xf4>
	else if (__tmp > 65535)
    14b4:	6d 89       	ldd	r22, Y+21	; 0x15
    14b6:	7e 89       	ldd	r23, Y+22	; 0x16
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <FSMInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	69 8d       	ldd	r22, Y+25	; 0x19
    14ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <FSMInit+0xd6>
    14f6:	80 e9       	ldi	r24, 0x90	; 144
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	9a 8b       	std	Y+18, r25	; 0x12
    14fc:	89 8b       	std	Y+17, r24	; 0x11
    14fe:	89 89       	ldd	r24, Y+17	; 0x11
    1500:	9a 89       	ldd	r25, Y+18	; 0x12
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <FSMInit+0xc4>
    1506:	9a 8b       	std	Y+18, r25	; 0x12
    1508:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8b 89       	ldd	r24, Y+19	; 0x13
    150c:	9c 89       	ldd	r25, Y+20	; 0x14
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8b 89       	ldd	r24, Y+19	; 0x13
    1516:	9c 89       	ldd	r25, Y+20	; 0x14
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <FSMInit+0xb8>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <FSMInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6d 89       	ldd	r22, Y+21	; 0x15
    1520:	7e 89       	ldd	r23, Y+22	; 0x16
    1522:	8f 89       	ldd	r24, Y+23	; 0x17
    1524:	98 8d       	ldd	r25, Y+24	; 0x18
    1526:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9c 8b       	std	Y+20, r25	; 0x14
    1530:	8b 8b       	std	Y+19, r24	; 0x13
    1532:	8b 89       	ldd	r24, Y+19	; 0x13
    1534:	9c 89       	ldd	r25, Y+20	; 0x14
    1536:	98 8b       	std	Y+16, r25	; 0x10
    1538:	8f 87       	std	Y+15, r24	; 0x0f
    153a:	8f 85       	ldd	r24, Y+15	; 0x0f
    153c:	98 89       	ldd	r25, Y+16	; 0x10
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <FSMInit+0x100>
    1542:	98 8b       	std	Y+16, r25	; 0x10
    1544:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2000);
GPIOPinWrite(PD7,LOW);
    1546:	87 e0       	ldi	r24, 0x07	; 7
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
GPIOPinWrite(PD1,LOW);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	aa ef       	ldi	r26, 0xFA	; 250
    155c:	b4 e4       	ldi	r27, 0x44	; 68
    155e:	8b 87       	std	Y+11, r24	; 0x0b
    1560:	9c 87       	std	Y+12, r25	; 0x0c
    1562:	ad 87       	std	Y+13, r26	; 0x0d
    1564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4a e7       	ldi	r20, 0x7A	; 122
    1574:	55 e4       	ldi	r21, 0x45	; 69
    1576:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	8f 83       	std	Y+7, r24	; 0x07
    1580:	98 87       	std	Y+8, r25	; 0x08
    1582:	a9 87       	std	Y+9, r26	; 0x09
    1584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e8       	ldi	r20, 0x80	; 128
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__ltsf2>
    159a:	88 23       	and	r24, r24
    159c:	2c f4       	brge	.+10     	; 0x15a8 <FSMInit+0x16a>
		__ticks = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <FSMInit+0x1e8>
	else if (__tmp > 65535)
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	4f e7       	ldi	r20, 0x7F	; 127
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gtsf2>
    15bc:	18 16       	cp	r1, r24
    15be:	4c f5       	brge	.+82     	; 0x1612 <FSMInit+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e2       	ldi	r20, 0x20	; 32
    15ce:	51 e4       	ldi	r21, 0x41	; 65
    15d0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <FSMInit+0x1ca>
    15ea:	80 e9       	ldi	r24, 0x90	; 144
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <FSMInit+0x1b8>
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	69 f7       	brne	.-38     	; 0x15ea <FSMInit+0x1ac>
    1610:	14 c0       	rjmp	.+40     	; 0x163a <FSMInit+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <FSMInit+0x1f4>
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2000);
}
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <FSMStateA>:
*Purpose: The function implements the task related to state A
*Arguments: None
*Return: None
******************************************************************************/
void FSMStateA()
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
GPIOPinWrite(PD7,HIGH);
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
GPIOPinWrite(PD1,HIGH);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <FSMStateB>:
*Purpose: The function implements the task related to state B
*Arguments: None
*Return: None
******************************************************************************/
void FSMStateB()
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	2e 97       	sbiw	r28, 0x0e	; 14
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
GPIOPinWrite(PD7,LOW);
    167e:	87 e0       	ldi	r24, 0x07	; 7
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
GPIOPinWrite(PD1,LOW);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPIOPinWrite>
FLAG_BIT.FLAG_ISR1=0;
    168e:	80 91 08 01 	lds	r24, 0x0108
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	80 93 08 01 	sts	0x0108, r24
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	aa ef       	ldi	r26, 0xFA	; 250
    169e:	b4 e4       	ldi	r27, 0x44	; 68
    16a0:	8b 87       	std	Y+11, r24	; 0x0b
    16a2:	9c 87       	std	Y+12, r25	; 0x0c
    16a4:	ad 87       	std	Y+13, r26	; 0x0d
    16a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a e7       	ldi	r20, 0x7A	; 122
    16b6:	55 e4       	ldi	r21, 0x45	; 69
    16b8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8f 83       	std	Y+7, r24	; 0x07
    16c2:	98 87       	std	Y+8, r25	; 0x08
    16c4:	a9 87       	std	Y+9, r26	; 0x09
    16c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e8       	ldi	r20, 0x80	; 128
    16d6:	5f e3       	ldi	r21, 0x3F	; 63
    16d8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__ltsf2>
    16dc:	88 23       	and	r24, r24
    16de:	2c f4       	brge	.+10     	; 0x16ea <FSMStateB+0x80>
		__ticks = 1;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	3f c0       	rjmp	.+126    	; 0x1768 <FSMStateB+0xfe>
	else if (__tmp > 65535)
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	57 e4       	ldi	r21, 0x47	; 71
    16fa:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gtsf2>
    16fe:	18 16       	cp	r1, r24
    1700:	4c f5       	brge	.+82     	; 0x1754 <FSMStateB+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1702:	6b 85       	ldd	r22, Y+11	; 0x0b
    1704:	7c 85       	ldd	r23, Y+12	; 0x0c
    1706:	8d 85       	ldd	r24, Y+13	; 0x0d
    1708:	9e 85       	ldd	r25, Y+14	; 0x0e
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	0f c0       	rjmp	.+30     	; 0x174a <FSMStateB+0xe0>
    172c:	80 e9       	ldi	r24, 0x90	; 144
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <FSMStateB+0xce>
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f7       	brne	.-38     	; 0x172c <FSMStateB+0xc2>
    1752:	14 c0       	rjmp	.+40     	; 0x177c <FSMStateB+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	9e 81       	ldd	r25, Y+6	; 0x06
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <FSMStateB+0x10a>
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2000);
}
    177c:	2e 96       	adiw	r28, 0x0e	; 14
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <__fixunssfsi>:
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	7b 01       	movw	r14, r22
    1798:	8c 01       	movw	r16, r24
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	5f e4       	ldi	r21, 0x4F	; 79
    17a2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__gesf2>
    17a6:	88 23       	and	r24, r24
    17a8:	8c f0       	brlt	.+34     	; 0x17cc <__fixunssfsi+0x3e>
    17aa:	c8 01       	movw	r24, r16
    17ac:	b7 01       	movw	r22, r14
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	5f e4       	ldi	r21, 0x4F	; 79
    17b6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__subsf3>
    17ba:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fixsfsi>
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	20 50       	subi	r18, 0x00	; 0
    17c4:	30 40       	sbci	r19, 0x00	; 0
    17c6:	40 40       	sbci	r20, 0x00	; 0
    17c8:	50 48       	sbci	r21, 0x80	; 128
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <__fixunssfsi+0x4a>
    17cc:	c8 01       	movw	r24, r16
    17ce:	b7 01       	movw	r22, r14
    17d0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fixsfsi>
    17d4:	9b 01       	movw	r18, r22
    17d6:	ac 01       	movw	r20, r24
    17d8:	b9 01       	movw	r22, r18
    17da:	ca 01       	movw	r24, r20
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	08 95       	ret

000017e6 <_fpadd_parts>:
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e9 ef       	ldi	r30, 0xF9	; 249
    17ec:	fb e0       	ldi	r31, 0x0B	; 11
    17ee:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__prologue_saves__>
    17f2:	dc 01       	movw	r26, r24
    17f4:	2b 01       	movw	r4, r22
    17f6:	fa 01       	movw	r30, r20
    17f8:	9c 91       	ld	r25, X
    17fa:	92 30       	cpi	r25, 0x02	; 2
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <_fpadd_parts+0x1a>
    17fe:	39 c1       	rjmp	.+626    	; 0x1a72 <_fpadd_parts+0x28c>
    1800:	eb 01       	movw	r28, r22
    1802:	88 81       	ld	r24, Y
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	08 f4       	brcc	.+2      	; 0x180a <_fpadd_parts+0x24>
    1808:	33 c1       	rjmp	.+614    	; 0x1a70 <_fpadd_parts+0x28a>
    180a:	94 30       	cpi	r25, 0x04	; 4
    180c:	69 f4       	brne	.+26     	; 0x1828 <_fpadd_parts+0x42>
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	09 f0       	breq	.+2      	; 0x1814 <_fpadd_parts+0x2e>
    1812:	2f c1       	rjmp	.+606    	; 0x1a72 <_fpadd_parts+0x28c>
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	9c 91       	ld	r25, X
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	98 17       	cp	r25, r24
    181e:	09 f4       	brne	.+2      	; 0x1822 <_fpadd_parts+0x3c>
    1820:	28 c1       	rjmp	.+592    	; 0x1a72 <_fpadd_parts+0x28c>
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b1 e0       	ldi	r27, 0x01	; 1
    1826:	25 c1       	rjmp	.+586    	; 0x1a72 <_fpadd_parts+0x28c>
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	09 f4       	brne	.+2      	; 0x182e <_fpadd_parts+0x48>
    182c:	21 c1       	rjmp	.+578    	; 0x1a70 <_fpadd_parts+0x28a>
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	a9 f4       	brne	.+42     	; 0x185c <_fpadd_parts+0x76>
    1832:	92 30       	cpi	r25, 0x02	; 2
    1834:	09 f0       	breq	.+2      	; 0x1838 <_fpadd_parts+0x52>
    1836:	1d c1       	rjmp	.+570    	; 0x1a72 <_fpadd_parts+0x28c>
    1838:	9a 01       	movw	r18, r20
    183a:	ad 01       	movw	r20, r26
    183c:	88 e0       	ldi	r24, 0x08	; 8
    183e:	ea 01       	movw	r28, r20
    1840:	09 90       	ld	r0, Y+
    1842:	ae 01       	movw	r20, r28
    1844:	e9 01       	movw	r28, r18
    1846:	09 92       	st	Y+, r0
    1848:	9e 01       	movw	r18, r28
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	c1 f7       	brne	.-16     	; 0x183e <_fpadd_parts+0x58>
    184e:	e2 01       	movw	r28, r4
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	11 96       	adiw	r26, 0x01	; 1
    1854:	9c 91       	ld	r25, X
    1856:	89 23       	and	r24, r25
    1858:	81 83       	std	Z+1, r24	; 0x01
    185a:	08 c1       	rjmp	.+528    	; 0x1a6c <_fpadd_parts+0x286>
    185c:	92 30       	cpi	r25, 0x02	; 2
    185e:	09 f4       	brne	.+2      	; 0x1862 <_fpadd_parts+0x7c>
    1860:	07 c1       	rjmp	.+526    	; 0x1a70 <_fpadd_parts+0x28a>
    1862:	12 96       	adiw	r26, 0x02	; 2
    1864:	2d 90       	ld	r2, X+
    1866:	3c 90       	ld	r3, X
    1868:	13 97       	sbiw	r26, 0x03	; 3
    186a:	eb 01       	movw	r28, r22
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	9b 81       	ldd	r25, Y+3	; 0x03
    1870:	14 96       	adiw	r26, 0x04	; 4
    1872:	ad 90       	ld	r10, X+
    1874:	bd 90       	ld	r11, X+
    1876:	cd 90       	ld	r12, X+
    1878:	dc 90       	ld	r13, X
    187a:	17 97       	sbiw	r26, 0x07	; 7
    187c:	ec 80       	ldd	r14, Y+4	; 0x04
    187e:	fd 80       	ldd	r15, Y+5	; 0x05
    1880:	0e 81       	ldd	r16, Y+6	; 0x06
    1882:	1f 81       	ldd	r17, Y+7	; 0x07
    1884:	91 01       	movw	r18, r2
    1886:	28 1b       	sub	r18, r24
    1888:	39 0b       	sbc	r19, r25
    188a:	b9 01       	movw	r22, r18
    188c:	37 ff       	sbrs	r19, 7
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <_fpadd_parts+0xb2>
    1890:	66 27       	eor	r22, r22
    1892:	77 27       	eor	r23, r23
    1894:	62 1b       	sub	r22, r18
    1896:	73 0b       	sbc	r23, r19
    1898:	60 32       	cpi	r22, 0x20	; 32
    189a:	71 05       	cpc	r23, r1
    189c:	0c f0       	brlt	.+2      	; 0x18a0 <_fpadd_parts+0xba>
    189e:	61 c0       	rjmp	.+194    	; 0x1962 <_fpadd_parts+0x17c>
    18a0:	12 16       	cp	r1, r18
    18a2:	13 06       	cpc	r1, r19
    18a4:	6c f5       	brge	.+90     	; 0x1900 <_fpadd_parts+0x11a>
    18a6:	37 01       	movw	r6, r14
    18a8:	48 01       	movw	r8, r16
    18aa:	06 2e       	mov	r0, r22
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <_fpadd_parts+0xd0>
    18ae:	96 94       	lsr	r9
    18b0:	87 94       	ror	r8
    18b2:	77 94       	ror	r7
    18b4:	67 94       	ror	r6
    18b6:	0a 94       	dec	r0
    18b8:	d2 f7       	brpl	.-12     	; 0x18ae <_fpadd_parts+0xc8>
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <_fpadd_parts+0xe6>
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	44 1f       	adc	r20, r20
    18ca:	55 1f       	adc	r21, r21
    18cc:	6a 95       	dec	r22
    18ce:	d2 f7       	brpl	.-12     	; 0x18c4 <_fpadd_parts+0xde>
    18d0:	21 50       	subi	r18, 0x01	; 1
    18d2:	30 40       	sbci	r19, 0x00	; 0
    18d4:	40 40       	sbci	r20, 0x00	; 0
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	2e 21       	and	r18, r14
    18da:	3f 21       	and	r19, r15
    18dc:	40 23       	and	r20, r16
    18de:	51 23       	and	r21, r17
    18e0:	21 15       	cp	r18, r1
    18e2:	31 05       	cpc	r19, r1
    18e4:	41 05       	cpc	r20, r1
    18e6:	51 05       	cpc	r21, r1
    18e8:	21 f0       	breq	.+8      	; 0x18f2 <_fpadd_parts+0x10c>
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	79 01       	movw	r14, r18
    18f4:	8a 01       	movw	r16, r20
    18f6:	e6 28       	or	r14, r6
    18f8:	f7 28       	or	r15, r7
    18fa:	08 29       	or	r16, r8
    18fc:	19 29       	or	r17, r9
    18fe:	3c c0       	rjmp	.+120    	; 0x1978 <_fpadd_parts+0x192>
    1900:	23 2b       	or	r18, r19
    1902:	d1 f1       	breq	.+116    	; 0x1978 <_fpadd_parts+0x192>
    1904:	26 0e       	add	r2, r22
    1906:	37 1e       	adc	r3, r23
    1908:	35 01       	movw	r6, r10
    190a:	46 01       	movw	r8, r12
    190c:	06 2e       	mov	r0, r22
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <_fpadd_parts+0x132>
    1910:	96 94       	lsr	r9
    1912:	87 94       	ror	r8
    1914:	77 94       	ror	r7
    1916:	67 94       	ror	r6
    1918:	0a 94       	dec	r0
    191a:	d2 f7       	brpl	.-12     	; 0x1910 <_fpadd_parts+0x12a>
    191c:	21 e0       	ldi	r18, 0x01	; 1
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	04 c0       	rjmp	.+8      	; 0x192e <_fpadd_parts+0x148>
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	44 1f       	adc	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	6a 95       	dec	r22
    1930:	d2 f7       	brpl	.-12     	; 0x1926 <_fpadd_parts+0x140>
    1932:	21 50       	subi	r18, 0x01	; 1
    1934:	30 40       	sbci	r19, 0x00	; 0
    1936:	40 40       	sbci	r20, 0x00	; 0
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	2a 21       	and	r18, r10
    193c:	3b 21       	and	r19, r11
    193e:	4c 21       	and	r20, r12
    1940:	5d 21       	and	r21, r13
    1942:	21 15       	cp	r18, r1
    1944:	31 05       	cpc	r19, r1
    1946:	41 05       	cpc	r20, r1
    1948:	51 05       	cpc	r21, r1
    194a:	21 f0       	breq	.+8      	; 0x1954 <_fpadd_parts+0x16e>
    194c:	21 e0       	ldi	r18, 0x01	; 1
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	59 01       	movw	r10, r18
    1956:	6a 01       	movw	r12, r20
    1958:	a6 28       	or	r10, r6
    195a:	b7 28       	or	r11, r7
    195c:	c8 28       	or	r12, r8
    195e:	d9 28       	or	r13, r9
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <_fpadd_parts+0x192>
    1962:	82 15       	cp	r24, r2
    1964:	93 05       	cpc	r25, r3
    1966:	2c f0       	brlt	.+10     	; 0x1972 <_fpadd_parts+0x18c>
    1968:	1c 01       	movw	r2, r24
    196a:	aa 24       	eor	r10, r10
    196c:	bb 24       	eor	r11, r11
    196e:	65 01       	movw	r12, r10
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <_fpadd_parts+0x192>
    1972:	ee 24       	eor	r14, r14
    1974:	ff 24       	eor	r15, r15
    1976:	87 01       	movw	r16, r14
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	9c 91       	ld	r25, X
    197c:	d2 01       	movw	r26, r4
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	8c 91       	ld	r24, X
    1982:	98 17       	cp	r25, r24
    1984:	09 f4       	brne	.+2      	; 0x1988 <_fpadd_parts+0x1a2>
    1986:	45 c0       	rjmp	.+138    	; 0x1a12 <_fpadd_parts+0x22c>
    1988:	99 23       	and	r25, r25
    198a:	39 f0       	breq	.+14     	; 0x199a <_fpadd_parts+0x1b4>
    198c:	a8 01       	movw	r20, r16
    198e:	97 01       	movw	r18, r14
    1990:	2a 19       	sub	r18, r10
    1992:	3b 09       	sbc	r19, r11
    1994:	4c 09       	sbc	r20, r12
    1996:	5d 09       	sbc	r21, r13
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <_fpadd_parts+0x1c0>
    199a:	a6 01       	movw	r20, r12
    199c:	95 01       	movw	r18, r10
    199e:	2e 19       	sub	r18, r14
    19a0:	3f 09       	sbc	r19, r15
    19a2:	40 0b       	sbc	r20, r16
    19a4:	51 0b       	sbc	r21, r17
    19a6:	57 fd       	sbrc	r21, 7
    19a8:	08 c0       	rjmp	.+16     	; 0x19ba <_fpadd_parts+0x1d4>
    19aa:	11 82       	std	Z+1, r1	; 0x01
    19ac:	33 82       	std	Z+3, r3	; 0x03
    19ae:	22 82       	std	Z+2, r2	; 0x02
    19b0:	24 83       	std	Z+4, r18	; 0x04
    19b2:	35 83       	std	Z+5, r19	; 0x05
    19b4:	46 83       	std	Z+6, r20	; 0x06
    19b6:	57 83       	std	Z+7, r21	; 0x07
    19b8:	1d c0       	rjmp	.+58     	; 0x19f4 <_fpadd_parts+0x20e>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	81 83       	std	Z+1, r24	; 0x01
    19be:	33 82       	std	Z+3, r3	; 0x03
    19c0:	22 82       	std	Z+2, r2	; 0x02
    19c2:	88 27       	eor	r24, r24
    19c4:	99 27       	eor	r25, r25
    19c6:	dc 01       	movw	r26, r24
    19c8:	82 1b       	sub	r24, r18
    19ca:	93 0b       	sbc	r25, r19
    19cc:	a4 0b       	sbc	r26, r20
    19ce:	b5 0b       	sbc	r27, r21
    19d0:	84 83       	std	Z+4, r24	; 0x04
    19d2:	95 83       	std	Z+5, r25	; 0x05
    19d4:	a6 83       	std	Z+6, r26	; 0x06
    19d6:	b7 83       	std	Z+7, r27	; 0x07
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <_fpadd_parts+0x20e>
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	44 1f       	adc	r20, r20
    19e0:	55 1f       	adc	r21, r21
    19e2:	24 83       	std	Z+4, r18	; 0x04
    19e4:	35 83       	std	Z+5, r19	; 0x05
    19e6:	46 83       	std	Z+6, r20	; 0x06
    19e8:	57 83       	std	Z+7, r21	; 0x07
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	93 83       	std	Z+3, r25	; 0x03
    19f2:	82 83       	std	Z+2, r24	; 0x02
    19f4:	24 81       	ldd	r18, Z+4	; 0x04
    19f6:	35 81       	ldd	r19, Z+5	; 0x05
    19f8:	46 81       	ldd	r20, Z+6	; 0x06
    19fa:	57 81       	ldd	r21, Z+7	; 0x07
    19fc:	da 01       	movw	r26, r20
    19fe:	c9 01       	movw	r24, r18
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	a1 09       	sbc	r26, r1
    1a04:	b1 09       	sbc	r27, r1
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	af 4f       	sbci	r26, 0xFF	; 255
    1a0c:	bf 43       	sbci	r27, 0x3F	; 63
    1a0e:	28 f3       	brcs	.-54     	; 0x19da <_fpadd_parts+0x1f4>
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <_fpadd_parts+0x242>
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	33 82       	std	Z+3, r3	; 0x03
    1a16:	22 82       	std	Z+2, r2	; 0x02
    1a18:	ea 0c       	add	r14, r10
    1a1a:	fb 1c       	adc	r15, r11
    1a1c:	0c 1d       	adc	r16, r12
    1a1e:	1d 1d       	adc	r17, r13
    1a20:	e4 82       	std	Z+4, r14	; 0x04
    1a22:	f5 82       	std	Z+5, r15	; 0x05
    1a24:	06 83       	std	Z+6, r16	; 0x06
    1a26:	17 83       	std	Z+7, r17	; 0x07
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	80 83       	st	Z, r24
    1a2c:	24 81       	ldd	r18, Z+4	; 0x04
    1a2e:	35 81       	ldd	r19, Z+5	; 0x05
    1a30:	46 81       	ldd	r20, Z+6	; 0x06
    1a32:	57 81       	ldd	r21, Z+7	; 0x07
    1a34:	57 ff       	sbrs	r21, 7
    1a36:	1a c0       	rjmp	.+52     	; 0x1a6c <_fpadd_parts+0x286>
    1a38:	c9 01       	movw	r24, r18
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	97 fd       	sbrc	r25, 7
    1a3e:	a0 95       	com	r26
    1a40:	ba 2f       	mov	r27, r26
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	a0 70       	andi	r26, 0x00	; 0
    1a48:	b0 70       	andi	r27, 0x00	; 0
    1a4a:	56 95       	lsr	r21
    1a4c:	47 95       	ror	r20
    1a4e:	37 95       	ror	r19
    1a50:	27 95       	ror	r18
    1a52:	82 2b       	or	r24, r18
    1a54:	93 2b       	or	r25, r19
    1a56:	a4 2b       	or	r26, r20
    1a58:	b5 2b       	or	r27, r21
    1a5a:	84 83       	std	Z+4, r24	; 0x04
    1a5c:	95 83       	std	Z+5, r25	; 0x05
    1a5e:	a6 83       	std	Z+6, r26	; 0x06
    1a60:	b7 83       	std	Z+7, r27	; 0x07
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	93 83       	std	Z+3, r25	; 0x03
    1a6a:	82 83       	std	Z+2, r24	; 0x02
    1a6c:	df 01       	movw	r26, r30
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <_fpadd_parts+0x28c>
    1a70:	d2 01       	movw	r26, r4
    1a72:	cd 01       	movw	r24, r26
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	e2 e1       	ldi	r30, 0x12	; 18
    1a7a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__epilogue_restores__>

00001a7e <__subsf3>:
    1a7e:	a0 e2       	ldi	r26, 0x20	; 32
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e4       	ldi	r30, 0x45	; 69
    1a84:	fd e0       	ldi	r31, 0x0D	; 13
    1a86:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x18>
    1a8a:	69 83       	std	Y+1, r22	; 0x01
    1a8c:	7a 83       	std	Y+2, r23	; 0x02
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	2d 83       	std	Y+5, r18	; 0x05
    1a94:	3e 83       	std	Y+6, r19	; 0x06
    1a96:	4f 83       	std	Y+7, r20	; 0x07
    1a98:	58 87       	std	Y+8, r21	; 0x08
    1a9a:	e9 e0       	ldi	r30, 0x09	; 9
    1a9c:	ee 2e       	mov	r14, r30
    1a9e:	f1 2c       	mov	r15, r1
    1aa0:	ec 0e       	add	r14, r28
    1aa2:	fd 1e       	adc	r15, r29
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1aae:	8e 01       	movw	r16, r28
    1ab0:	0f 5e       	subi	r16, 0xEF	; 239
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	05 96       	adiw	r24, 0x05	; 5
    1ab8:	b8 01       	movw	r22, r16
    1aba:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1abe:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	89 27       	eor	r24, r25
    1ac4:	8a 8b       	std	Y+18, r24	; 0x12
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	b8 01       	movw	r22, r16
    1aca:	ae 01       	movw	r20, r28
    1acc:	47 5e       	subi	r20, 0xE7	; 231
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_fpadd_parts>
    1ad4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__pack_f>
    1ad8:	a0 96       	adiw	r28, 0x20	; 32
    1ada:	e6 e0       	ldi	r30, 0x06	; 6
    1adc:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x18>

00001ae0 <__addsf3>:
    1ae0:	a0 e2       	ldi	r26, 0x20	; 32
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e6 e7       	ldi	r30, 0x76	; 118
    1ae6:	fd e0       	ldi	r31, 0x0D	; 13
    1ae8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x18>
    1aec:	69 83       	std	Y+1, r22	; 0x01
    1aee:	7a 83       	std	Y+2, r23	; 0x02
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	2d 83       	std	Y+5, r18	; 0x05
    1af6:	3e 83       	std	Y+6, r19	; 0x06
    1af8:	4f 83       	std	Y+7, r20	; 0x07
    1afa:	58 87       	std	Y+8, r21	; 0x08
    1afc:	f9 e0       	ldi	r31, 0x09	; 9
    1afe:	ef 2e       	mov	r14, r31
    1b00:	f1 2c       	mov	r15, r1
    1b02:	ec 0e       	add	r14, r28
    1b04:	fd 1e       	adc	r15, r29
    1b06:	ce 01       	movw	r24, r28
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1b10:	8e 01       	movw	r16, r28
    1b12:	0f 5e       	subi	r16, 0xEF	; 239
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	ce 01       	movw	r24, r28
    1b18:	05 96       	adiw	r24, 0x05	; 5
    1b1a:	b8 01       	movw	r22, r16
    1b1c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1b20:	c7 01       	movw	r24, r14
    1b22:	b8 01       	movw	r22, r16
    1b24:	ae 01       	movw	r20, r28
    1b26:	47 5e       	subi	r20, 0xE7	; 231
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_fpadd_parts>
    1b2e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__pack_f>
    1b32:	a0 96       	adiw	r28, 0x20	; 32
    1b34:	e6 e0       	ldi	r30, 0x06	; 6
    1b36:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x18>

00001b3a <__mulsf3>:
    1b3a:	a0 e2       	ldi	r26, 0x20	; 32
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1b40:	fd e0       	ldi	r31, 0x0D	; 13
    1b42:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__prologue_saves__>
    1b46:	69 83       	std	Y+1, r22	; 0x01
    1b48:	7a 83       	std	Y+2, r23	; 0x02
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    1b4c:	9c 83       	std	Y+4, r25	; 0x04
    1b4e:	2d 83       	std	Y+5, r18	; 0x05
    1b50:	3e 83       	std	Y+6, r19	; 0x06
    1b52:	4f 83       	std	Y+7, r20	; 0x07
    1b54:	58 87       	std	Y+8, r21	; 0x08
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	be 01       	movw	r22, r28
    1b5c:	67 5f       	subi	r22, 0xF7	; 247
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1b64:	ce 01       	movw	r24, r28
    1b66:	05 96       	adiw	r24, 0x05	; 5
    1b68:	be 01       	movw	r22, r28
    1b6a:	6f 5e       	subi	r22, 0xEF	; 239
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1b72:	99 85       	ldd	r25, Y+9	; 0x09
    1b74:	92 30       	cpi	r25, 0x02	; 2
    1b76:	88 f0       	brcs	.+34     	; 0x1b9a <__mulsf3+0x60>
    1b78:	89 89       	ldd	r24, Y+17	; 0x11
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	c8 f0       	brcs	.+50     	; 0x1bb0 <__mulsf3+0x76>
    1b7e:	94 30       	cpi	r25, 0x04	; 4
    1b80:	19 f4       	brne	.+6      	; 0x1b88 <__mulsf3+0x4e>
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	51 f4       	brne	.+20     	; 0x1b9a <__mulsf3+0x60>
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <__mulsf3+0x56>
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	29 f4       	brne	.+10     	; 0x1b96 <__mulsf3+0x5c>
    1b8c:	92 30       	cpi	r25, 0x02	; 2
    1b8e:	81 f4       	brne	.+32     	; 0x1bb0 <__mulsf3+0x76>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	c6 c0       	rjmp	.+396    	; 0x1d22 <__mulsf3+0x1e8>
    1b96:	92 30       	cpi	r25, 0x02	; 2
    1b98:	49 f4       	brne	.+18     	; 0x1bac <__mulsf3+0x72>
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba0:	98 13       	cpse	r25, r24
    1ba2:	21 e0       	ldi	r18, 0x01	; 1
    1ba4:	2a 87       	std	Y+10, r18	; 0x0a
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	09 96       	adiw	r24, 0x09	; 9
    1baa:	bb c0       	rjmp	.+374    	; 0x1d22 <__mulsf3+0x1e8>
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	49 f4       	brne	.+18     	; 0x1bc2 <__mulsf3+0x88>
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb6:	98 13       	cpse	r25, r24
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	2a 8b       	std	Y+18, r18	; 0x12
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	41 96       	adiw	r24, 0x11	; 17
    1bc0:	b0 c0       	rjmp	.+352    	; 0x1d22 <__mulsf3+0x1e8>
    1bc2:	2d 84       	ldd	r2, Y+13	; 0x0d
    1bc4:	3e 84       	ldd	r3, Y+14	; 0x0e
    1bc6:	4f 84       	ldd	r4, Y+15	; 0x0f
    1bc8:	58 88       	ldd	r5, Y+16	; 0x10
    1bca:	6d 88       	ldd	r6, Y+21	; 0x15
    1bcc:	7e 88       	ldd	r7, Y+22	; 0x16
    1bce:	8f 88       	ldd	r8, Y+23	; 0x17
    1bd0:	98 8c       	ldd	r9, Y+24	; 0x18
    1bd2:	ee 24       	eor	r14, r14
    1bd4:	ff 24       	eor	r15, r15
    1bd6:	87 01       	movw	r16, r14
    1bd8:	aa 24       	eor	r10, r10
    1bda:	bb 24       	eor	r11, r11
    1bdc:	65 01       	movw	r12, r10
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	e0 e0       	ldi	r30, 0x00	; 0
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	c1 01       	movw	r24, r2
    1bec:	81 70       	andi	r24, 0x01	; 1
    1bee:	90 70       	andi	r25, 0x00	; 0
    1bf0:	89 2b       	or	r24, r25
    1bf2:	e9 f0       	breq	.+58     	; 0x1c2e <__mulsf3+0xf4>
    1bf4:	e6 0c       	add	r14, r6
    1bf6:	f7 1c       	adc	r15, r7
    1bf8:	08 1d       	adc	r16, r8
    1bfa:	19 1d       	adc	r17, r9
    1bfc:	9a 01       	movw	r18, r20
    1bfe:	ab 01       	movw	r20, r22
    1c00:	2a 0d       	add	r18, r10
    1c02:	3b 1d       	adc	r19, r11
    1c04:	4c 1d       	adc	r20, r12
    1c06:	5d 1d       	adc	r21, r13
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a0 e0       	ldi	r26, 0x00	; 0
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e6 14       	cp	r14, r6
    1c12:	f7 04       	cpc	r15, r7
    1c14:	08 05       	cpc	r16, r8
    1c16:	19 05       	cpc	r17, r9
    1c18:	20 f4       	brcc	.+8      	; 0x1c22 <__mulsf3+0xe8>
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e0       	ldi	r26, 0x00	; 0
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	ba 01       	movw	r22, r20
    1c24:	a9 01       	movw	r20, r18
    1c26:	48 0f       	add	r20, r24
    1c28:	59 1f       	adc	r21, r25
    1c2a:	6a 1f       	adc	r22, r26
    1c2c:	7b 1f       	adc	r23, r27
    1c2e:	aa 0c       	add	r10, r10
    1c30:	bb 1c       	adc	r11, r11
    1c32:	cc 1c       	adc	r12, r12
    1c34:	dd 1c       	adc	r13, r13
    1c36:	97 fe       	sbrs	r9, 7
    1c38:	08 c0       	rjmp	.+16     	; 0x1c4a <__mulsf3+0x110>
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e0       	ldi	r26, 0x00	; 0
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	a8 2a       	or	r10, r24
    1c44:	b9 2a       	or	r11, r25
    1c46:	ca 2a       	or	r12, r26
    1c48:	db 2a       	or	r13, r27
    1c4a:	31 96       	adiw	r30, 0x01	; 1
    1c4c:	e0 32       	cpi	r30, 0x20	; 32
    1c4e:	f1 05       	cpc	r31, r1
    1c50:	49 f0       	breq	.+18     	; 0x1c64 <__mulsf3+0x12a>
    1c52:	66 0c       	add	r6, r6
    1c54:	77 1c       	adc	r7, r7
    1c56:	88 1c       	adc	r8, r8
    1c58:	99 1c       	adc	r9, r9
    1c5a:	56 94       	lsr	r5
    1c5c:	47 94       	ror	r4
    1c5e:	37 94       	ror	r3
    1c60:	27 94       	ror	r2
    1c62:	c3 cf       	rjmp	.-122    	; 0x1bea <__mulsf3+0xb0>
    1c64:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c66:	ea 89       	ldd	r30, Y+18	; 0x12
    1c68:	2b 89       	ldd	r18, Y+19	; 0x13
    1c6a:	3c 89       	ldd	r19, Y+20	; 0x14
    1c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c70:	28 0f       	add	r18, r24
    1c72:	39 1f       	adc	r19, r25
    1c74:	2e 5f       	subi	r18, 0xFE	; 254
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	17 c0       	rjmp	.+46     	; 0x1ca8 <__mulsf3+0x16e>
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	81 70       	andi	r24, 0x01	; 1
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	89 2b       	or	r24, r25
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <__mulsf3+0x162>
    1c84:	16 95       	lsr	r17
    1c86:	07 95       	ror	r16
    1c88:	f7 94       	ror	r15
    1c8a:	e7 94       	ror	r14
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e8       	ldi	r27, 0x80	; 128
    1c94:	e8 2a       	or	r14, r24
    1c96:	f9 2a       	or	r15, r25
    1c98:	0a 2b       	or	r16, r26
    1c9a:	1b 2b       	or	r17, r27
    1c9c:	76 95       	lsr	r23
    1c9e:	67 95       	ror	r22
    1ca0:	57 95       	ror	r21
    1ca2:	47 95       	ror	r20
    1ca4:	2f 5f       	subi	r18, 0xFF	; 255
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	77 fd       	sbrc	r23, 7
    1caa:	e7 cf       	rjmp	.-50     	; 0x1c7a <__mulsf3+0x140>
    1cac:	0c c0       	rjmp	.+24     	; 0x1cc6 <__mulsf3+0x18c>
    1cae:	44 0f       	add	r20, r20
    1cb0:	55 1f       	adc	r21, r21
    1cb2:	66 1f       	adc	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	17 fd       	sbrc	r17, 7
    1cb8:	41 60       	ori	r20, 0x01	; 1
    1cba:	ee 0c       	add	r14, r14
    1cbc:	ff 1c       	adc	r15, r15
    1cbe:	00 1f       	adc	r16, r16
    1cc0:	11 1f       	adc	r17, r17
    1cc2:	21 50       	subi	r18, 0x01	; 1
    1cc4:	30 40       	sbci	r19, 0x00	; 0
    1cc6:	40 30       	cpi	r20, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	59 07       	cpc	r21, r25
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	69 07       	cpc	r22, r25
    1cd0:	90 e4       	ldi	r25, 0x40	; 64
    1cd2:	79 07       	cpc	r23, r25
    1cd4:	60 f3       	brcs	.-40     	; 0x1cae <__mulsf3+0x174>
    1cd6:	2b 8f       	std	Y+27, r18	; 0x1b
    1cd8:	3c 8f       	std	Y+28, r19	; 0x1c
    1cda:	db 01       	movw	r26, r22
    1cdc:	ca 01       	movw	r24, r20
    1cde:	8f 77       	andi	r24, 0x7F	; 127
    1ce0:	90 70       	andi	r25, 0x00	; 0
    1ce2:	a0 70       	andi	r26, 0x00	; 0
    1ce4:	b0 70       	andi	r27, 0x00	; 0
    1ce6:	80 34       	cpi	r24, 0x40	; 64
    1ce8:	91 05       	cpc	r25, r1
    1cea:	a1 05       	cpc	r26, r1
    1cec:	b1 05       	cpc	r27, r1
    1cee:	61 f4       	brne	.+24     	; 0x1d08 <__mulsf3+0x1ce>
    1cf0:	47 fd       	sbrc	r20, 7
    1cf2:	0a c0       	rjmp	.+20     	; 0x1d08 <__mulsf3+0x1ce>
    1cf4:	e1 14       	cp	r14, r1
    1cf6:	f1 04       	cpc	r15, r1
    1cf8:	01 05       	cpc	r16, r1
    1cfa:	11 05       	cpc	r17, r1
    1cfc:	29 f0       	breq	.+10     	; 0x1d08 <__mulsf3+0x1ce>
    1cfe:	40 5c       	subi	r20, 0xC0	; 192
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	6f 4f       	sbci	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	40 78       	andi	r20, 0x80	; 128
    1d08:	1a 8e       	std	Y+26, r1	; 0x1a
    1d0a:	fe 17       	cp	r31, r30
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <__mulsf3+0x1d8>
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	8a 8f       	std	Y+26, r24	; 0x1a
    1d12:	4d 8f       	std	Y+29, r20	; 0x1d
    1d14:	5e 8f       	std	Y+30, r21	; 0x1e
    1d16:	6f 8f       	std	Y+31, r22	; 0x1f
    1d18:	78 a3       	std	Y+32, r23	; 0x20
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	89 8f       	std	Y+25, r24	; 0x19
    1d1e:	ce 01       	movw	r24, r28
    1d20:	49 96       	adiw	r24, 0x19	; 25
    1d22:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__pack_f>
    1d26:	a0 96       	adiw	r28, 0x20	; 32
    1d28:	e2 e1       	ldi	r30, 0x12	; 18
    1d2a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__epilogue_restores__>

00001d2e <__gtsf2>:
    1d2e:	a8 e1       	ldi	r26, 0x18	; 24
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x18>
    1d3a:	69 83       	std	Y+1, r22	; 0x01
    1d3c:	7a 83       	std	Y+2, r23	; 0x02
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	2d 83       	std	Y+5, r18	; 0x05
    1d44:	3e 83       	std	Y+6, r19	; 0x06
    1d46:	4f 83       	std	Y+7, r20	; 0x07
    1d48:	58 87       	std	Y+8, r21	; 0x08
    1d4a:	89 e0       	ldi	r24, 0x09	; 9
    1d4c:	e8 2e       	mov	r14, r24
    1d4e:	f1 2c       	mov	r15, r1
    1d50:	ec 0e       	add	r14, r28
    1d52:	fd 1e       	adc	r15, r29
    1d54:	ce 01       	movw	r24, r28
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	b7 01       	movw	r22, r14
    1d5a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1d5e:	8e 01       	movw	r16, r28
    1d60:	0f 5e       	subi	r16, 0xEF	; 239
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	ce 01       	movw	r24, r28
    1d66:	05 96       	adiw	r24, 0x05	; 5
    1d68:	b8 01       	movw	r22, r16
    1d6a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	82 30       	cpi	r24, 0x02	; 2
    1d72:	40 f0       	brcs	.+16     	; 0x1d84 <__gtsf2+0x56>
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	28 f0       	brcs	.+10     	; 0x1d84 <__gtsf2+0x56>
    1d7a:	c7 01       	movw	r24, r14
    1d7c:	b8 01       	movw	r22, r16
    1d7e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__fpcmp_parts_f>
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <__gtsf2+0x58>
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	68 96       	adiw	r28, 0x18	; 24
    1d88:	e6 e0       	ldi	r30, 0x06	; 6
    1d8a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x18>

00001d8e <__gesf2>:
    1d8e:	a8 e1       	ldi	r26, 0x18	; 24
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ed ec       	ldi	r30, 0xCD	; 205
    1d94:	fe e0       	ldi	r31, 0x0E	; 14
    1d96:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x18>
    1d9a:	69 83       	std	Y+1, r22	; 0x01
    1d9c:	7a 83       	std	Y+2, r23	; 0x02
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	2d 83       	std	Y+5, r18	; 0x05
    1da4:	3e 83       	std	Y+6, r19	; 0x06
    1da6:	4f 83       	std	Y+7, r20	; 0x07
    1da8:	58 87       	std	Y+8, r21	; 0x08
    1daa:	89 e0       	ldi	r24, 0x09	; 9
    1dac:	e8 2e       	mov	r14, r24
    1dae:	f1 2c       	mov	r15, r1
    1db0:	ec 0e       	add	r14, r28
    1db2:	fd 1e       	adc	r15, r29
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	b7 01       	movw	r22, r14
    1dba:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	0f 5e       	subi	r16, 0xEF	; 239
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	05 96       	adiw	r24, 0x05	; 5
    1dc8:	b8 01       	movw	r22, r16
    1dca:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	40 f0       	brcs	.+16     	; 0x1de4 <__gesf2+0x56>
    1dd4:	89 89       	ldd	r24, Y+17	; 0x11
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	28 f0       	brcs	.+10     	; 0x1de4 <__gesf2+0x56>
    1dda:	c7 01       	movw	r24, r14
    1ddc:	b8 01       	movw	r22, r16
    1dde:	0e 94 c8 10 	call	0x2190	; 0x2190 <__fpcmp_parts_f>
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <__gesf2+0x58>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	68 96       	adiw	r28, 0x18	; 24
    1de8:	e6 e0       	ldi	r30, 0x06	; 6
    1dea:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x18>

00001dee <__ltsf2>:
    1dee:	a8 e1       	ldi	r26, 0x18	; 24
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ed ef       	ldi	r30, 0xFD	; 253
    1df4:	fe e0       	ldi	r31, 0x0E	; 14
    1df6:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x18>
    1dfa:	69 83       	std	Y+1, r22	; 0x01
    1dfc:	7a 83       	std	Y+2, r23	; 0x02
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	2d 83       	std	Y+5, r18	; 0x05
    1e04:	3e 83       	std	Y+6, r19	; 0x06
    1e06:	4f 83       	std	Y+7, r20	; 0x07
    1e08:	58 87       	std	Y+8, r21	; 0x08
    1e0a:	89 e0       	ldi	r24, 0x09	; 9
    1e0c:	e8 2e       	mov	r14, r24
    1e0e:	f1 2c       	mov	r15, r1
    1e10:	ec 0e       	add	r14, r28
    1e12:	fd 1e       	adc	r15, r29
    1e14:	ce 01       	movw	r24, r28
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	b7 01       	movw	r22, r14
    1e1a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1e1e:	8e 01       	movw	r16, r28
    1e20:	0f 5e       	subi	r16, 0xEF	; 239
    1e22:	1f 4f       	sbci	r17, 0xFF	; 255
    1e24:	ce 01       	movw	r24, r28
    1e26:	05 96       	adiw	r24, 0x05	; 5
    1e28:	b8 01       	movw	r22, r16
    1e2a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	82 30       	cpi	r24, 0x02	; 2
    1e32:	40 f0       	brcs	.+16     	; 0x1e44 <__ltsf2+0x56>
    1e34:	89 89       	ldd	r24, Y+17	; 0x11
    1e36:	82 30       	cpi	r24, 0x02	; 2
    1e38:	28 f0       	brcs	.+10     	; 0x1e44 <__ltsf2+0x56>
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	b8 01       	movw	r22, r16
    1e3e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__fpcmp_parts_f>
    1e42:	01 c0       	rjmp	.+2      	; 0x1e46 <__ltsf2+0x58>
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	68 96       	adiw	r28, 0x18	; 24
    1e48:	e6 e0       	ldi	r30, 0x06	; 6
    1e4a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x18>

00001e4e <__fixsfsi>:
    1e4e:	ac e0       	ldi	r26, 0x0C	; 12
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ed e2       	ldi	r30, 0x2D	; 45
    1e54:	ff e0       	ldi	r31, 0x0F	; 15
    1e56:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__+0x20>
    1e5a:	69 83       	std	Y+1, r22	; 0x01
    1e5c:	7a 83       	std	Y+2, r23	; 0x02
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	ce 01       	movw	r24, r28
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	be 01       	movw	r22, r28
    1e68:	6b 5f       	subi	r22, 0xFB	; 251
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__unpack_f>
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	61 f1       	breq	.+88     	; 0x1ece <__fixsfsi+0x80>
    1e76:	82 30       	cpi	r24, 0x02	; 2
    1e78:	50 f1       	brcs	.+84     	; 0x1ece <__fixsfsi+0x80>
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <__fixsfsi+0x38>
    1e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e80:	88 23       	and	r24, r24
    1e82:	51 f1       	breq	.+84     	; 0x1ed8 <__fixsfsi+0x8a>
    1e84:	2e c0       	rjmp	.+92     	; 0x1ee2 <__fixsfsi+0x94>
    1e86:	2f 81       	ldd	r18, Y+7	; 0x07
    1e88:	38 85       	ldd	r19, Y+8	; 0x08
    1e8a:	37 fd       	sbrc	r19, 7
    1e8c:	20 c0       	rjmp	.+64     	; 0x1ece <__fixsfsi+0x80>
    1e8e:	6e 81       	ldd	r22, Y+6	; 0x06
    1e90:	2f 31       	cpi	r18, 0x1F	; 31
    1e92:	31 05       	cpc	r19, r1
    1e94:	1c f0       	brlt	.+6      	; 0x1e9c <__fixsfsi+0x4e>
    1e96:	66 23       	and	r22, r22
    1e98:	f9 f0       	breq	.+62     	; 0x1ed8 <__fixsfsi+0x8a>
    1e9a:	23 c0       	rjmp	.+70     	; 0x1ee2 <__fixsfsi+0x94>
    1e9c:	8e e1       	ldi	r24, 0x1E	; 30
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	82 1b       	sub	r24, r18
    1ea2:	93 0b       	sbc	r25, r19
    1ea4:	29 85       	ldd	r18, Y+9	; 0x09
    1ea6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ea8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1eaa:	5c 85       	ldd	r21, Y+12	; 0x0c
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <__fixsfsi+0x68>
    1eae:	56 95       	lsr	r21
    1eb0:	47 95       	ror	r20
    1eb2:	37 95       	ror	r19
    1eb4:	27 95       	ror	r18
    1eb6:	8a 95       	dec	r24
    1eb8:	d2 f7       	brpl	.-12     	; 0x1eae <__fixsfsi+0x60>
    1eba:	66 23       	and	r22, r22
    1ebc:	b1 f0       	breq	.+44     	; 0x1eea <__fixsfsi+0x9c>
    1ebe:	50 95       	com	r21
    1ec0:	40 95       	com	r20
    1ec2:	30 95       	com	r19
    1ec4:	21 95       	neg	r18
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <__fixsfsi+0x9c>
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <__fixsfsi+0x9c>
    1ed8:	2f ef       	ldi	r18, 0xFF	; 255
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f ef       	ldi	r20, 0xFF	; 255
    1ede:	5f e7       	ldi	r21, 0x7F	; 127
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <__fixsfsi+0x9c>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e8       	ldi	r21, 0x80	; 128
    1eea:	b9 01       	movw	r22, r18
    1eec:	ca 01       	movw	r24, r20
    1eee:	2c 96       	adiw	r28, 0x0c	; 12
    1ef0:	e2 e0       	ldi	r30, 0x02	; 2
    1ef2:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x20>

00001ef6 <__pack_f>:
    1ef6:	df 92       	push	r13
    1ef8:	ef 92       	push	r14
    1efa:	ff 92       	push	r15
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	fc 01       	movw	r30, r24
    1f02:	e4 80       	ldd	r14, Z+4	; 0x04
    1f04:	f5 80       	ldd	r15, Z+5	; 0x05
    1f06:	06 81       	ldd	r16, Z+6	; 0x06
    1f08:	17 81       	ldd	r17, Z+7	; 0x07
    1f0a:	d1 80       	ldd	r13, Z+1	; 0x01
    1f0c:	80 81       	ld	r24, Z
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	48 f4       	brcc	.+18     	; 0x1f24 <__pack_f+0x2e>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e1       	ldi	r26, 0x10	; 16
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e8 2a       	or	r14, r24
    1f1c:	f9 2a       	or	r15, r25
    1f1e:	0a 2b       	or	r16, r26
    1f20:	1b 2b       	or	r17, r27
    1f22:	a5 c0       	rjmp	.+330    	; 0x206e <__pack_f+0x178>
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <__pack_f+0x34>
    1f28:	9f c0       	rjmp	.+318    	; 0x2068 <__pack_f+0x172>
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <__pack_f+0x40>
    1f2e:	ee 24       	eor	r14, r14
    1f30:	ff 24       	eor	r15, r15
    1f32:	87 01       	movw	r16, r14
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <__pack_f+0x4a>
    1f36:	e1 14       	cp	r14, r1
    1f38:	f1 04       	cpc	r15, r1
    1f3a:	01 05       	cpc	r16, r1
    1f3c:	11 05       	cpc	r17, r1
    1f3e:	19 f4       	brne	.+6      	; 0x1f46 <__pack_f+0x50>
    1f40:	e0 e0       	ldi	r30, 0x00	; 0
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	96 c0       	rjmp	.+300    	; 0x2072 <__pack_f+0x17c>
    1f46:	62 81       	ldd	r22, Z+2	; 0x02
    1f48:	73 81       	ldd	r23, Z+3	; 0x03
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	62 38       	cpi	r22, 0x82	; 130
    1f4e:	79 07       	cpc	r23, r25
    1f50:	0c f0       	brlt	.+2      	; 0x1f54 <__pack_f+0x5e>
    1f52:	5b c0       	rjmp	.+182    	; 0x200a <__pack_f+0x114>
    1f54:	22 e8       	ldi	r18, 0x82	; 130
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	26 1b       	sub	r18, r22
    1f5a:	37 0b       	sbc	r19, r23
    1f5c:	2a 31       	cpi	r18, 0x1A	; 26
    1f5e:	31 05       	cpc	r19, r1
    1f60:	2c f0       	brlt	.+10     	; 0x1f6c <__pack_f+0x76>
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	2a c0       	rjmp	.+84     	; 0x1fc0 <__pack_f+0xca>
    1f6c:	b8 01       	movw	r22, r16
    1f6e:	a7 01       	movw	r20, r14
    1f70:	02 2e       	mov	r0, r18
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__pack_f+0x86>
    1f74:	76 95       	lsr	r23
    1f76:	67 95       	ror	r22
    1f78:	57 95       	ror	r21
    1f7a:	47 95       	ror	r20
    1f7c:	0a 94       	dec	r0
    1f7e:	d2 f7       	brpl	.-12     	; 0x1f74 <__pack_f+0x7e>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e0       	ldi	r26, 0x00	; 0
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <__pack_f+0x9c>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	aa 1f       	adc	r26, r26
    1f90:	bb 1f       	adc	r27, r27
    1f92:	2a 95       	dec	r18
    1f94:	d2 f7       	brpl	.-12     	; 0x1f8a <__pack_f+0x94>
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	a1 09       	sbc	r26, r1
    1f9a:	b1 09       	sbc	r27, r1
    1f9c:	8e 21       	and	r24, r14
    1f9e:	9f 21       	and	r25, r15
    1fa0:	a0 23       	and	r26, r16
    1fa2:	b1 23       	and	r27, r17
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	a1 05       	cpc	r26, r1
    1fa8:	b1 05       	cpc	r27, r1
    1faa:	21 f0       	breq	.+8      	; 0x1fb4 <__pack_f+0xbe>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e0       	ldi	r26, 0x00	; 0
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	9a 01       	movw	r18, r20
    1fb6:	ab 01       	movw	r20, r22
    1fb8:	28 2b       	or	r18, r24
    1fba:	39 2b       	or	r19, r25
    1fbc:	4a 2b       	or	r20, r26
    1fbe:	5b 2b       	or	r21, r27
    1fc0:	da 01       	movw	r26, r20
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	8f 77       	andi	r24, 0x7F	; 127
    1fc6:	90 70       	andi	r25, 0x00	; 0
    1fc8:	a0 70       	andi	r26, 0x00	; 0
    1fca:	b0 70       	andi	r27, 0x00	; 0
    1fcc:	80 34       	cpi	r24, 0x40	; 64
    1fce:	91 05       	cpc	r25, r1
    1fd0:	a1 05       	cpc	r26, r1
    1fd2:	b1 05       	cpc	r27, r1
    1fd4:	39 f4       	brne	.+14     	; 0x1fe4 <__pack_f+0xee>
    1fd6:	27 ff       	sbrs	r18, 7
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <__pack_f+0xf6>
    1fda:	20 5c       	subi	r18, 0xC0	; 192
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	4f 4f       	sbci	r20, 0xFF	; 255
    1fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <__pack_f+0xf6>
    1fe4:	21 5c       	subi	r18, 0xC1	; 193
    1fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe8:	4f 4f       	sbci	r20, 0xFF	; 255
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	e0 e0       	ldi	r30, 0x00	; 0
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	20 30       	cpi	r18, 0x00	; 0
    1ff2:	a0 e0       	ldi	r26, 0x00	; 0
    1ff4:	3a 07       	cpc	r19, r26
    1ff6:	a0 e0       	ldi	r26, 0x00	; 0
    1ff8:	4a 07       	cpc	r20, r26
    1ffa:	a0 e4       	ldi	r26, 0x40	; 64
    1ffc:	5a 07       	cpc	r21, r26
    1ffe:	10 f0       	brcs	.+4      	; 0x2004 <__pack_f+0x10e>
    2000:	e1 e0       	ldi	r30, 0x01	; 1
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	79 01       	movw	r14, r18
    2006:	8a 01       	movw	r16, r20
    2008:	27 c0       	rjmp	.+78     	; 0x2058 <__pack_f+0x162>
    200a:	60 38       	cpi	r22, 0x80	; 128
    200c:	71 05       	cpc	r23, r1
    200e:	64 f5       	brge	.+88     	; 0x2068 <__pack_f+0x172>
    2010:	fb 01       	movw	r30, r22
    2012:	e1 58       	subi	r30, 0x81	; 129
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	d8 01       	movw	r26, r16
    2018:	c7 01       	movw	r24, r14
    201a:	8f 77       	andi	r24, 0x7F	; 127
    201c:	90 70       	andi	r25, 0x00	; 0
    201e:	a0 70       	andi	r26, 0x00	; 0
    2020:	b0 70       	andi	r27, 0x00	; 0
    2022:	80 34       	cpi	r24, 0x40	; 64
    2024:	91 05       	cpc	r25, r1
    2026:	a1 05       	cpc	r26, r1
    2028:	b1 05       	cpc	r27, r1
    202a:	39 f4       	brne	.+14     	; 0x203a <__pack_f+0x144>
    202c:	e7 fe       	sbrs	r14, 7
    202e:	0d c0       	rjmp	.+26     	; 0x204a <__pack_f+0x154>
    2030:	80 e4       	ldi	r24, 0x40	; 64
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <__pack_f+0x14c>
    203a:	8f e3       	ldi	r24, 0x3F	; 63
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 e0       	ldi	r26, 0x00	; 0
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e8 0e       	add	r14, r24
    2044:	f9 1e       	adc	r15, r25
    2046:	0a 1f       	adc	r16, r26
    2048:	1b 1f       	adc	r17, r27
    204a:	17 ff       	sbrs	r17, 7
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <__pack_f+0x162>
    204e:	16 95       	lsr	r17
    2050:	07 95       	ror	r16
    2052:	f7 94       	ror	r15
    2054:	e7 94       	ror	r14
    2056:	31 96       	adiw	r30, 0x01	; 1
    2058:	87 e0       	ldi	r24, 0x07	; 7
    205a:	16 95       	lsr	r17
    205c:	07 95       	ror	r16
    205e:	f7 94       	ror	r15
    2060:	e7 94       	ror	r14
    2062:	8a 95       	dec	r24
    2064:	d1 f7       	brne	.-12     	; 0x205a <__pack_f+0x164>
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <__pack_f+0x17c>
    2068:	ee 24       	eor	r14, r14
    206a:	ff 24       	eor	r15, r15
    206c:	87 01       	movw	r16, r14
    206e:	ef ef       	ldi	r30, 0xFF	; 255
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	6e 2f       	mov	r22, r30
    2074:	67 95       	ror	r22
    2076:	66 27       	eor	r22, r22
    2078:	67 95       	ror	r22
    207a:	90 2f       	mov	r25, r16
    207c:	9f 77       	andi	r25, 0x7F	; 127
    207e:	d7 94       	ror	r13
    2080:	dd 24       	eor	r13, r13
    2082:	d7 94       	ror	r13
    2084:	8e 2f       	mov	r24, r30
    2086:	86 95       	lsr	r24
    2088:	49 2f       	mov	r20, r25
    208a:	46 2b       	or	r20, r22
    208c:	58 2f       	mov	r21, r24
    208e:	5d 29       	or	r21, r13
    2090:	b7 01       	movw	r22, r14
    2092:	ca 01       	movw	r24, r20
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	df 90       	pop	r13
    209e:	08 95       	ret

000020a0 <__unpack_f>:
    20a0:	fc 01       	movw	r30, r24
    20a2:	db 01       	movw	r26, r22
    20a4:	40 81       	ld	r20, Z
    20a6:	51 81       	ldd	r21, Z+1	; 0x01
    20a8:	22 81       	ldd	r18, Z+2	; 0x02
    20aa:	62 2f       	mov	r22, r18
    20ac:	6f 77       	andi	r22, 0x7F	; 127
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	22 1f       	adc	r18, r18
    20b2:	22 27       	eor	r18, r18
    20b4:	22 1f       	adc	r18, r18
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	89 2f       	mov	r24, r25
    20ba:	88 0f       	add	r24, r24
    20bc:	82 2b       	or	r24, r18
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	99 1f       	adc	r25, r25
    20c4:	99 27       	eor	r25, r25
    20c6:	99 1f       	adc	r25, r25
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	9c 93       	st	X, r25
    20cc:	11 97       	sbiw	r26, 0x01	; 1
    20ce:	21 15       	cp	r18, r1
    20d0:	31 05       	cpc	r19, r1
    20d2:	a9 f5       	brne	.+106    	; 0x213e <__unpack_f+0x9e>
    20d4:	41 15       	cp	r20, r1
    20d6:	51 05       	cpc	r21, r1
    20d8:	61 05       	cpc	r22, r1
    20da:	71 05       	cpc	r23, r1
    20dc:	11 f4       	brne	.+4      	; 0x20e2 <__unpack_f+0x42>
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	37 c0       	rjmp	.+110    	; 0x2150 <__unpack_f+0xb0>
    20e2:	82 e8       	ldi	r24, 0x82	; 130
    20e4:	9f ef       	ldi	r25, 0xFF	; 255
    20e6:	13 96       	adiw	r26, 0x03	; 3
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
    20ec:	12 97       	sbiw	r26, 0x02	; 2
    20ee:	9a 01       	movw	r18, r20
    20f0:	ab 01       	movw	r20, r22
    20f2:	67 e0       	ldi	r22, 0x07	; 7
    20f4:	22 0f       	add	r18, r18
    20f6:	33 1f       	adc	r19, r19
    20f8:	44 1f       	adc	r20, r20
    20fa:	55 1f       	adc	r21, r21
    20fc:	6a 95       	dec	r22
    20fe:	d1 f7       	brne	.-12     	; 0x20f4 <__unpack_f+0x54>
    2100:	83 e0       	ldi	r24, 0x03	; 3
    2102:	8c 93       	st	X, r24
    2104:	0d c0       	rjmp	.+26     	; 0x2120 <__unpack_f+0x80>
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	44 1f       	adc	r20, r20
    210c:	55 1f       	adc	r21, r21
    210e:	12 96       	adiw	r26, 0x02	; 2
    2110:	8d 91       	ld	r24, X+
    2112:	9c 91       	ld	r25, X
    2114:	13 97       	sbiw	r26, 0x03	; 3
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	13 96       	adiw	r26, 0x03	; 3
    211a:	9c 93       	st	X, r25
    211c:	8e 93       	st	-X, r24
    211e:	12 97       	sbiw	r26, 0x02	; 2
    2120:	20 30       	cpi	r18, 0x00	; 0
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	38 07       	cpc	r19, r24
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	48 07       	cpc	r20, r24
    212a:	80 e4       	ldi	r24, 0x40	; 64
    212c:	58 07       	cpc	r21, r24
    212e:	58 f3       	brcs	.-42     	; 0x2106 <__unpack_f+0x66>
    2130:	14 96       	adiw	r26, 0x04	; 4
    2132:	2d 93       	st	X+, r18
    2134:	3d 93       	st	X+, r19
    2136:	4d 93       	st	X+, r20
    2138:	5c 93       	st	X, r21
    213a:	17 97       	sbiw	r26, 0x07	; 7
    213c:	08 95       	ret
    213e:	2f 3f       	cpi	r18, 0xFF	; 255
    2140:	31 05       	cpc	r19, r1
    2142:	79 f4       	brne	.+30     	; 0x2162 <__unpack_f+0xc2>
    2144:	41 15       	cp	r20, r1
    2146:	51 05       	cpc	r21, r1
    2148:	61 05       	cpc	r22, r1
    214a:	71 05       	cpc	r23, r1
    214c:	19 f4       	brne	.+6      	; 0x2154 <__unpack_f+0xb4>
    214e:	84 e0       	ldi	r24, 0x04	; 4
    2150:	8c 93       	st	X, r24
    2152:	08 95       	ret
    2154:	64 ff       	sbrs	r22, 4
    2156:	03 c0       	rjmp	.+6      	; 0x215e <__unpack_f+0xbe>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	8c 93       	st	X, r24
    215c:	12 c0       	rjmp	.+36     	; 0x2182 <__unpack_f+0xe2>
    215e:	1c 92       	st	X, r1
    2160:	10 c0       	rjmp	.+32     	; 0x2182 <__unpack_f+0xe2>
    2162:	2f 57       	subi	r18, 0x7F	; 127
    2164:	30 40       	sbci	r19, 0x00	; 0
    2166:	13 96       	adiw	r26, 0x03	; 3
    2168:	3c 93       	st	X, r19
    216a:	2e 93       	st	-X, r18
    216c:	12 97       	sbiw	r26, 0x02	; 2
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	8c 93       	st	X, r24
    2172:	87 e0       	ldi	r24, 0x07	; 7
    2174:	44 0f       	add	r20, r20
    2176:	55 1f       	adc	r21, r21
    2178:	66 1f       	adc	r22, r22
    217a:	77 1f       	adc	r23, r23
    217c:	8a 95       	dec	r24
    217e:	d1 f7       	brne	.-12     	; 0x2174 <__unpack_f+0xd4>
    2180:	70 64       	ori	r23, 0x40	; 64
    2182:	14 96       	adiw	r26, 0x04	; 4
    2184:	4d 93       	st	X+, r20
    2186:	5d 93       	st	X+, r21
    2188:	6d 93       	st	X+, r22
    218a:	7c 93       	st	X, r23
    218c:	17 97       	sbiw	r26, 0x07	; 7
    218e:	08 95       	ret

00002190 <__fpcmp_parts_f>:
    2190:	1f 93       	push	r17
    2192:	dc 01       	movw	r26, r24
    2194:	fb 01       	movw	r30, r22
    2196:	9c 91       	ld	r25, X
    2198:	92 30       	cpi	r25, 0x02	; 2
    219a:	08 f4       	brcc	.+2      	; 0x219e <__fpcmp_parts_f+0xe>
    219c:	47 c0       	rjmp	.+142    	; 0x222c <__fpcmp_parts_f+0x9c>
    219e:	80 81       	ld	r24, Z
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	08 f4       	brcc	.+2      	; 0x21a6 <__fpcmp_parts_f+0x16>
    21a4:	43 c0       	rjmp	.+134    	; 0x222c <__fpcmp_parts_f+0x9c>
    21a6:	94 30       	cpi	r25, 0x04	; 4
    21a8:	51 f4       	brne	.+20     	; 0x21be <__fpcmp_parts_f+0x2e>
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	1c 91       	ld	r17, X
    21ae:	84 30       	cpi	r24, 0x04	; 4
    21b0:	99 f5       	brne	.+102    	; 0x2218 <__fpcmp_parts_f+0x88>
    21b2:	81 81       	ldd	r24, Z+1	; 0x01
    21b4:	68 2f       	mov	r22, r24
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	61 1b       	sub	r22, r17
    21ba:	71 09       	sbc	r23, r1
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <__fpcmp_parts_f+0xac>
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	21 f0       	breq	.+8      	; 0x21ca <__fpcmp_parts_f+0x3a>
    21c2:	92 30       	cpi	r25, 0x02	; 2
    21c4:	31 f4       	brne	.+12     	; 0x21d2 <__fpcmp_parts_f+0x42>
    21c6:	82 30       	cpi	r24, 0x02	; 2
    21c8:	b9 f1       	breq	.+110    	; 0x2238 <__fpcmp_parts_f+0xa8>
    21ca:	81 81       	ldd	r24, Z+1	; 0x01
    21cc:	88 23       	and	r24, r24
    21ce:	89 f1       	breq	.+98     	; 0x2232 <__fpcmp_parts_f+0xa2>
    21d0:	2d c0       	rjmp	.+90     	; 0x222c <__fpcmp_parts_f+0x9c>
    21d2:	11 96       	adiw	r26, 0x01	; 1
    21d4:	1c 91       	ld	r17, X
    21d6:	11 97       	sbiw	r26, 0x01	; 1
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	f1 f0       	breq	.+60     	; 0x2218 <__fpcmp_parts_f+0x88>
    21dc:	81 81       	ldd	r24, Z+1	; 0x01
    21de:	18 17       	cp	r17, r24
    21e0:	d9 f4       	brne	.+54     	; 0x2218 <__fpcmp_parts_f+0x88>
    21e2:	12 96       	adiw	r26, 0x02	; 2
    21e4:	2d 91       	ld	r18, X+
    21e6:	3c 91       	ld	r19, X
    21e8:	13 97       	sbiw	r26, 0x03	; 3
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	82 17       	cp	r24, r18
    21f0:	93 07       	cpc	r25, r19
    21f2:	94 f0       	brlt	.+36     	; 0x2218 <__fpcmp_parts_f+0x88>
    21f4:	28 17       	cp	r18, r24
    21f6:	39 07       	cpc	r19, r25
    21f8:	bc f0       	brlt	.+46     	; 0x2228 <__fpcmp_parts_f+0x98>
    21fa:	14 96       	adiw	r26, 0x04	; 4
    21fc:	8d 91       	ld	r24, X+
    21fe:	9d 91       	ld	r25, X+
    2200:	0d 90       	ld	r0, X+
    2202:	bc 91       	ld	r27, X
    2204:	a0 2d       	mov	r26, r0
    2206:	24 81       	ldd	r18, Z+4	; 0x04
    2208:	35 81       	ldd	r19, Z+5	; 0x05
    220a:	46 81       	ldd	r20, Z+6	; 0x06
    220c:	57 81       	ldd	r21, Z+7	; 0x07
    220e:	28 17       	cp	r18, r24
    2210:	39 07       	cpc	r19, r25
    2212:	4a 07       	cpc	r20, r26
    2214:	5b 07       	cpc	r21, r27
    2216:	18 f4       	brcc	.+6      	; 0x221e <__fpcmp_parts_f+0x8e>
    2218:	11 23       	and	r17, r17
    221a:	41 f0       	breq	.+16     	; 0x222c <__fpcmp_parts_f+0x9c>
    221c:	0a c0       	rjmp	.+20     	; 0x2232 <__fpcmp_parts_f+0xa2>
    221e:	82 17       	cp	r24, r18
    2220:	93 07       	cpc	r25, r19
    2222:	a4 07       	cpc	r26, r20
    2224:	b5 07       	cpc	r27, r21
    2226:	40 f4       	brcc	.+16     	; 0x2238 <__fpcmp_parts_f+0xa8>
    2228:	11 23       	and	r17, r17
    222a:	19 f0       	breq	.+6      	; 0x2232 <__fpcmp_parts_f+0xa2>
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	05 c0       	rjmp	.+10     	; 0x223c <__fpcmp_parts_f+0xac>
    2232:	6f ef       	ldi	r22, 0xFF	; 255
    2234:	7f ef       	ldi	r23, 0xFF	; 255
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__fpcmp_parts_f+0xac>
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	cb 01       	movw	r24, r22
    223e:	1f 91       	pop	r17
    2240:	08 95       	ret

00002242 <__prologue_saves__>:
    2242:	2f 92       	push	r2
    2244:	3f 92       	push	r3
    2246:	4f 92       	push	r4
    2248:	5f 92       	push	r5
    224a:	6f 92       	push	r6
    224c:	7f 92       	push	r7
    224e:	8f 92       	push	r8
    2250:	9f 92       	push	r9
    2252:	af 92       	push	r10
    2254:	bf 92       	push	r11
    2256:	cf 92       	push	r12
    2258:	df 92       	push	r13
    225a:	ef 92       	push	r14
    225c:	ff 92       	push	r15
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	ca 1b       	sub	r28, r26
    226c:	db 0b       	sbc	r29, r27
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	09 94       	ijmp

0000227a <__epilogue_restores__>:
    227a:	2a 88       	ldd	r2, Y+18	; 0x12
    227c:	39 88       	ldd	r3, Y+17	; 0x11
    227e:	48 88       	ldd	r4, Y+16	; 0x10
    2280:	5f 84       	ldd	r5, Y+15	; 0x0f
    2282:	6e 84       	ldd	r6, Y+14	; 0x0e
    2284:	7d 84       	ldd	r7, Y+13	; 0x0d
    2286:	8c 84       	ldd	r8, Y+12	; 0x0c
    2288:	9b 84       	ldd	r9, Y+11	; 0x0b
    228a:	aa 84       	ldd	r10, Y+10	; 0x0a
    228c:	b9 84       	ldd	r11, Y+9	; 0x09
    228e:	c8 84       	ldd	r12, Y+8	; 0x08
    2290:	df 80       	ldd	r13, Y+7	; 0x07
    2292:	ee 80       	ldd	r14, Y+6	; 0x06
    2294:	fd 80       	ldd	r15, Y+5	; 0x05
    2296:	0c 81       	ldd	r16, Y+4	; 0x04
    2298:	1b 81       	ldd	r17, Y+3	; 0x03
    229a:	aa 81       	ldd	r26, Y+2	; 0x02
    229c:	b9 81       	ldd	r27, Y+1	; 0x01
    229e:	ce 0f       	add	r28, r30
    22a0:	d1 1d       	adc	r29, r1
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	ed 01       	movw	r28, r26
    22ae:	08 95       	ret

000022b0 <_exit>:
    22b0:	f8 94       	cli

000022b2 <__stop_program>:
    22b2:	ff cf       	rjmp	.-2      	; 0x22b2 <__stop_program>
