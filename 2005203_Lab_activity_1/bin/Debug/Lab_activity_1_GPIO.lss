
bin\Debug\Lab_activity_1_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001fe0  00002074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000180  00000000  00000000  0000207f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ea  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002298  00000000  00000000  000023e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010f3  00000000  00000000  00004681  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d7a  00000000  00000000  00005774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000074f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  000076b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00007a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000821a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ee       	ldi	r30, 0xE0	; 224
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 14 08 	call	0x1028	; 0x1028 <main>
      8e:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIOConfig>:
* Description: Configures the mode of the pin as INPUT/PULLUP or OUTPUT
* Arguments: pin and mode
* Returns: None
******************************************************************************/
void GPIOConfig(uint8_t pin,uint8_t mode)
{
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	00 d0       	rcall	.+0      	; 0x9c <GPIOConfig+0x6>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	6a 83       	std	Y+2, r22	; 0x02
// INPUT configs for D
 if(pin == PD0 && mode == INPUT)
      a4:	89 81       	ldd	r24, Y+1	; 0x01
      a6:	88 23       	and	r24, r24
      a8:	51 f4       	brne	.+20     	; 0xbe <GPIOConfig+0x28>
      aa:	8a 81       	ldd	r24, Y+2	; 0x02
      ac:	88 23       	and	r24, r24
      ae:	39 f4       	brne	.+14     	; 0xbe <GPIOConfig+0x28>
 {
    CLR_BIT(DDRD,PD0);
      b0:	aa e2       	ldi	r26, 0x2A	; 42
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	ea e2       	ldi	r30, 0x2A	; 42
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	8e 7f       	andi	r24, 0xFE	; 254
      bc:	8c 93       	st	X, r24
 }
if(pin == PD1 && mode == INPUT)
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	81 30       	cpi	r24, 0x01	; 1
      c2:	51 f4       	brne	.+20     	; 0xd8 <GPIOConfig+0x42>
      c4:	8a 81       	ldd	r24, Y+2	; 0x02
      c6:	88 23       	and	r24, r24
      c8:	39 f4       	brne	.+14     	; 0xd8 <GPIOConfig+0x42>
 {

    CLR_BIT(DDRD,PD1);
      ca:	aa e2       	ldi	r26, 0x2A	; 42
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	ea e2       	ldi	r30, 0x2A	; 42
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8d 7f       	andi	r24, 0xFD	; 253
      d6:	8c 93       	st	X, r24
 }

 if(pin == PD2 && mode == INPUT)
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	51 f4       	brne	.+20     	; 0xf2 <GPIOConfig+0x5c>
      de:	8a 81       	ldd	r24, Y+2	; 0x02
      e0:	88 23       	and	r24, r24
      e2:	39 f4       	brne	.+14     	; 0xf2 <GPIOConfig+0x5c>
 {
    CLR_BIT(DDRD,PD2);
      e4:	aa e2       	ldi	r26, 0x2A	; 42
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea e2       	ldi	r30, 0x2A	; 42
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	8b 7f       	andi	r24, 0xFB	; 251
      f0:	8c 93       	st	X, r24
 }

 if(pin == PD3 && mode == INPUT)
      f2:	89 81       	ldd	r24, Y+1	; 0x01
      f4:	83 30       	cpi	r24, 0x03	; 3
      f6:	51 f4       	brne	.+20     	; 0x10c <GPIOConfig+0x76>
      f8:	8a 81       	ldd	r24, Y+2	; 0x02
      fa:	88 23       	and	r24, r24
      fc:	39 f4       	brne	.+14     	; 0x10c <GPIOConfig+0x76>
 {
    CLR_BIT(DDRD,PD3);
      fe:	aa e2       	ldi	r26, 0x2A	; 42
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	ea e2       	ldi	r30, 0x2A	; 42
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	87 7f       	andi	r24, 0xF7	; 247
     10a:	8c 93       	st	X, r24
 }

 if(pin == PD4 && mode == INPUT)
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	51 f4       	brne	.+20     	; 0x126 <GPIOConfig+0x90>
     112:	8a 81       	ldd	r24, Y+2	; 0x02
     114:	88 23       	and	r24, r24
     116:	39 f4       	brne	.+14     	; 0x126 <GPIOConfig+0x90>
 {
    CLR_BIT(DDRD,PD4);
     118:	aa e2       	ldi	r26, 0x2A	; 42
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	ea e2       	ldi	r30, 0x2A	; 42
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	8f 7e       	andi	r24, 0xEF	; 239
     124:	8c 93       	st	X, r24
 }

 if(pin == PD5 && mode == INPUT)
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	85 30       	cpi	r24, 0x05	; 5
     12a:	51 f4       	brne	.+20     	; 0x140 <GPIOConfig+0xaa>
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	88 23       	and	r24, r24
     130:	39 f4       	brne	.+14     	; 0x140 <GPIOConfig+0xaa>
 {
    CLR_BIT(DDRD,PD5);
     132:	aa e2       	ldi	r26, 0x2A	; 42
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	ea e2       	ldi	r30, 0x2A	; 42
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	8f 7d       	andi	r24, 0xDF	; 223
     13e:	8c 93       	st	X, r24
 }
 if(pin == PD6 && mode == INPUT)
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	86 30       	cpi	r24, 0x06	; 6
     144:	51 f4       	brne	.+20     	; 0x15a <GPIOConfig+0xc4>
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	88 23       	and	r24, r24
     14a:	39 f4       	brne	.+14     	; 0x15a <GPIOConfig+0xc4>
 {
    CLR_BIT(DDRD,PD6);
     14c:	aa e2       	ldi	r26, 0x2A	; 42
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	ea e2       	ldi	r30, 0x2A	; 42
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8f 7b       	andi	r24, 0xBF	; 191
     158:	8c 93       	st	X, r24
 }
  if(pin == PD7 && mode == INPUT)
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	87 30       	cpi	r24, 0x07	; 7
     15e:	51 f4       	brne	.+20     	; 0x174 <GPIOConfig+0xde>
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	88 23       	and	r24, r24
     164:	39 f4       	brne	.+14     	; 0x174 <GPIOConfig+0xde>
 {
    CLR_BIT(DDRD,PD7);
     166:	aa e2       	ldi	r26, 0x2A	; 42
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	ea e2       	ldi	r30, 0x2A	; 42
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	80 81       	ld	r24, Z
     170:	8f 77       	andi	r24, 0x7F	; 127
     172:	8c 93       	st	X, r24
 }

 // Output configs for D
 if(pin == PD0 && mode == OUTPUT)
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	88 23       	and	r24, r24
     178:	51 f4       	brne	.+20     	; 0x18e <GPIOConfig+0xf8>
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	39 f4       	brne	.+14     	; 0x18e <GPIOConfig+0xf8>
 {
    SET_BIT(DDRD,PD0);
     180:	aa e2       	ldi	r26, 0x2A	; 42
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	ea e2       	ldi	r30, 0x2A	; 42
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	81 60       	ori	r24, 0x01	; 1
     18c:	8c 93       	st	X, r24
 }
if(pin == PD1 && mode == OUTPUT)
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	51 f4       	brne	.+20     	; 0x1a8 <GPIOConfig+0x112>
     194:	8a 81       	ldd	r24, Y+2	; 0x02
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	39 f4       	brne	.+14     	; 0x1a8 <GPIOConfig+0x112>
 {
    SET_BIT(DDRD,PD1);
     19a:	aa e2       	ldi	r26, 0x2A	; 42
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	ea e2       	ldi	r30, 0x2A	; 42
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	8c 93       	st	X, r24
 }

 if(pin == PD2 && mode == OUTPUT)
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	82 30       	cpi	r24, 0x02	; 2
     1ac:	51 f4       	brne	.+20     	; 0x1c2 <GPIOConfig+0x12c>
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	39 f4       	brne	.+14     	; 0x1c2 <GPIOConfig+0x12c>
 {
    SET_BIT(DDRD,PD2);
     1b4:	aa e2       	ldi	r26, 0x2A	; 42
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	ea e2       	ldi	r30, 0x2A	; 42
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	84 60       	ori	r24, 0x04	; 4
     1c0:	8c 93       	st	X, r24
 }

 if(pin == PD3 && mode == OUTPUT)
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	51 f4       	brne	.+20     	; 0x1dc <GPIOConfig+0x146>
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	39 f4       	brne	.+14     	; 0x1dc <GPIOConfig+0x146>
 {
    SET_BIT(DDRD,PD3);
     1ce:	aa e2       	ldi	r26, 0x2A	; 42
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	ea e2       	ldi	r30, 0x2A	; 42
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	88 60       	ori	r24, 0x08	; 8
     1da:	8c 93       	st	X, r24
 }

 if(pin == PD4 && mode == OUTPUT)
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	84 30       	cpi	r24, 0x04	; 4
     1e0:	51 f4       	brne	.+20     	; 0x1f6 <GPIOConfig+0x160>
     1e2:	8a 81       	ldd	r24, Y+2	; 0x02
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	39 f4       	brne	.+14     	; 0x1f6 <GPIOConfig+0x160>
 {
    SET_BIT(DDRD,PD4);
     1e8:	aa e2       	ldi	r26, 0x2A	; 42
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea e2       	ldi	r30, 0x2A	; 42
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	80 61       	ori	r24, 0x10	; 16
     1f4:	8c 93       	st	X, r24
 }

 if(pin == PD5 && mode == OUTPUT)
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	85 30       	cpi	r24, 0x05	; 5
     1fa:	51 f4       	brne	.+20     	; 0x210 <GPIOConfig+0x17a>
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	39 f4       	brne	.+14     	; 0x210 <GPIOConfig+0x17a>
 {
    SET_BIT(DDRD,PD5);
     202:	aa e2       	ldi	r26, 0x2A	; 42
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	ea e2       	ldi	r30, 0x2A	; 42
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	80 62       	ori	r24, 0x20	; 32
     20e:	8c 93       	st	X, r24
 }
 if(pin == PD6 && mode == OUTPUT)
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	86 30       	cpi	r24, 0x06	; 6
     214:	51 f4       	brne	.+20     	; 0x22a <GPIOConfig+0x194>
     216:	8a 81       	ldd	r24, Y+2	; 0x02
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	39 f4       	brne	.+14     	; 0x22a <GPIOConfig+0x194>
 {
    SET_BIT(DDRD,PD6);
     21c:	aa e2       	ldi	r26, 0x2A	; 42
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	ea e2       	ldi	r30, 0x2A	; 42
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 64       	ori	r24, 0x40	; 64
     228:	8c 93       	st	X, r24
 }
  if(pin == PD7 && mode == OUTPUT)
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	87 30       	cpi	r24, 0x07	; 7
     22e:	51 f4       	brne	.+20     	; 0x244 <GPIOConfig+0x1ae>
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	39 f4       	brne	.+14     	; 0x244 <GPIOConfig+0x1ae>
 {
    SET_BIT(DDRD,PD7);
     236:	aa e2       	ldi	r26, 0x2A	; 42
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	ea e2       	ldi	r30, 0x2A	; 42
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	80 68       	ori	r24, 0x80	; 128
     242:	8c 93       	st	X, r24
 }

// For port B
// INPUT configs for B
 if(pin == PB0 && mode == INPUT)
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	51 f4       	brne	.+20     	; 0x25e <GPIOConfig+0x1c8>
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	88 23       	and	r24, r24
     24e:	39 f4       	brne	.+14     	; 0x25e <GPIOConfig+0x1c8>
 {
    CLR_BIT(DDRB,PB0);
     250:	a4 e2       	ldi	r26, 0x24	; 36
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e4 e2       	ldi	r30, 0x24	; 36
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	8c 93       	st	X, r24
 }
if(pin == PB1 && mode == INPUT)
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	51 f4       	brne	.+20     	; 0x278 <GPIOConfig+0x1e2>
     264:	8a 81       	ldd	r24, Y+2	; 0x02
     266:	88 23       	and	r24, r24
     268:	39 f4       	brne	.+14     	; 0x278 <GPIOConfig+0x1e2>
 {

    CLR_BIT(DDRB,PB1);
     26a:	a4 e2       	ldi	r26, 0x24	; 36
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e4 e2       	ldi	r30, 0x24	; 36
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8d 7f       	andi	r24, 0xFD	; 253
     276:	8c 93       	st	X, r24
 }

 if(pin == PB2 && mode == INPUT)
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	82 30       	cpi	r24, 0x02	; 2
     27c:	51 f4       	brne	.+20     	; 0x292 <GPIOConfig+0x1fc>
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	88 23       	and	r24, r24
     282:	39 f4       	brne	.+14     	; 0x292 <GPIOConfig+0x1fc>
 {
    CLR_BIT(DDRB,PB2);
     284:	a4 e2       	ldi	r26, 0x24	; 36
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	e4 e2       	ldi	r30, 0x24	; 36
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	8b 7f       	andi	r24, 0xFB	; 251
     290:	8c 93       	st	X, r24
 }

 if(pin == PB3 && mode == INPUT)
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	83 30       	cpi	r24, 0x03	; 3
     296:	51 f4       	brne	.+20     	; 0x2ac <GPIOConfig+0x216>
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	88 23       	and	r24, r24
     29c:	39 f4       	brne	.+14     	; 0x2ac <GPIOConfig+0x216>
 {
    CLR_BIT(DDRB,PB3);
     29e:	a4 e2       	ldi	r26, 0x24	; 36
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	e4 e2       	ldi	r30, 0x24	; 36
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	8c 93       	st	X, r24
 }

 if(pin == PB4 && mode == INPUT)
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	84 30       	cpi	r24, 0x04	; 4
     2b0:	51 f4       	brne	.+20     	; 0x2c6 <GPIOConfig+0x230>
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 23       	and	r24, r24
     2b6:	39 f4       	brne	.+14     	; 0x2c6 <GPIOConfig+0x230>
 {
    CLR_BIT(DDRB,PB4);
     2b8:	a4 e2       	ldi	r26, 0x24	; 36
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e4 e2       	ldi	r30, 0x24	; 36
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 7e       	andi	r24, 0xEF	; 239
     2c4:	8c 93       	st	X, r24
 }

 if(pin == PB5 && mode == INPUT)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	85 30       	cpi	r24, 0x05	; 5
     2ca:	51 f4       	brne	.+20     	; 0x2e0 <GPIOConfig+0x24a>
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	88 23       	and	r24, r24
     2d0:	39 f4       	brne	.+14     	; 0x2e0 <GPIOConfig+0x24a>
 {
    CLR_BIT(DDRB,PB5);
     2d2:	a4 e2       	ldi	r26, 0x24	; 36
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	e4 e2       	ldi	r30, 0x24	; 36
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8f 7d       	andi	r24, 0xDF	; 223
     2de:	8c 93       	st	X, r24
 }
 if(pin == PB6 && mode == INPUT)
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	86 30       	cpi	r24, 0x06	; 6
     2e4:	51 f4       	brne	.+20     	; 0x2fa <GPIOConfig+0x264>
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	88 23       	and	r24, r24
     2ea:	39 f4       	brne	.+14     	; 0x2fa <GPIOConfig+0x264>
 {
    CLR_BIT(DDRB,PB6);
     2ec:	a4 e2       	ldi	r26, 0x24	; 36
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e4 e2       	ldi	r30, 0x24	; 36
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7b       	andi	r24, 0xBF	; 191
     2f8:	8c 93       	st	X, r24
 }
  if(pin == PB7 && mode == INPUT)
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	87 30       	cpi	r24, 0x07	; 7
     2fe:	51 f4       	brne	.+20     	; 0x314 <GPIOConfig+0x27e>
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	88 23       	and	r24, r24
     304:	39 f4       	brne	.+14     	; 0x314 <GPIOConfig+0x27e>
 {
    CLR_BIT(DDRB,PB7);
     306:	a4 e2       	ldi	r26, 0x24	; 36
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	e4 e2       	ldi	r30, 0x24	; 36
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	8f 77       	andi	r24, 0x7F	; 127
     312:	8c 93       	st	X, r24
 }

 // Output configs for B
 if(pin == PB0 && mode == OUTPUT)
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	88 23       	and	r24, r24
     318:	51 f4       	brne	.+20     	; 0x32e <GPIOConfig+0x298>
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	39 f4       	brne	.+14     	; 0x32e <GPIOConfig+0x298>
 {
    SET_BIT(DDRB,PB0);
     320:	a4 e2       	ldi	r26, 0x24	; 36
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e4 e2       	ldi	r30, 0x24	; 36
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	81 60       	ori	r24, 0x01	; 1
     32c:	8c 93       	st	X, r24
 }
if(pin == PB1 && mode == OUTPUT)
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	51 f4       	brne	.+20     	; 0x348 <GPIOConfig+0x2b2>
     334:	8a 81       	ldd	r24, Y+2	; 0x02
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	39 f4       	brne	.+14     	; 0x348 <GPIOConfig+0x2b2>
 {
    SET_BIT(DDRB,PB1);
     33a:	a4 e2       	ldi	r26, 0x24	; 36
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e4 e2       	ldi	r30, 0x24	; 36
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	82 60       	ori	r24, 0x02	; 2
     346:	8c 93       	st	X, r24
 }

 if(pin == PB2 && mode == OUTPUT)
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	82 30       	cpi	r24, 0x02	; 2
     34c:	51 f4       	brne	.+20     	; 0x362 <GPIOConfig+0x2cc>
     34e:	8a 81       	ldd	r24, Y+2	; 0x02
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	39 f4       	brne	.+14     	; 0x362 <GPIOConfig+0x2cc>
 {
    SET_BIT(DDRB,PB2);
     354:	a4 e2       	ldi	r26, 0x24	; 36
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e4 e2       	ldi	r30, 0x24	; 36
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	84 60       	ori	r24, 0x04	; 4
     360:	8c 93       	st	X, r24
 }

 if(pin == PB3 && mode == OUTPUT)
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	83 30       	cpi	r24, 0x03	; 3
     366:	51 f4       	brne	.+20     	; 0x37c <GPIOConfig+0x2e6>
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	39 f4       	brne	.+14     	; 0x37c <GPIOConfig+0x2e6>
 {
    SET_BIT(DDRB,PB3);
     36e:	a4 e2       	ldi	r26, 0x24	; 36
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e4 e2       	ldi	r30, 0x24	; 36
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	88 60       	ori	r24, 0x08	; 8
     37a:	8c 93       	st	X, r24
 }

 if(pin == PB4 && mode == OUTPUT)
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	84 30       	cpi	r24, 0x04	; 4
     380:	51 f4       	brne	.+20     	; 0x396 <GPIOConfig+0x300>
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	39 f4       	brne	.+14     	; 0x396 <GPIOConfig+0x300>
 {
    SET_BIT(DDRB,PB4);
     388:	a4 e2       	ldi	r26, 0x24	; 36
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e4 e2       	ldi	r30, 0x24	; 36
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	80 61       	ori	r24, 0x10	; 16
     394:	8c 93       	st	X, r24
 }

 if(pin == PB5 && mode == OUTPUT)
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	85 30       	cpi	r24, 0x05	; 5
     39a:	51 f4       	brne	.+20     	; 0x3b0 <GPIOConfig+0x31a>
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	39 f4       	brne	.+14     	; 0x3b0 <GPIOConfig+0x31a>
 {
    SET_BIT(DDRB,PB5);
     3a2:	a4 e2       	ldi	r26, 0x24	; 36
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	e4 e2       	ldi	r30, 0x24	; 36
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	80 62       	ori	r24, 0x20	; 32
     3ae:	8c 93       	st	X, r24
 }
 if(pin == PB6 && mode == OUTPUT)
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	86 30       	cpi	r24, 0x06	; 6
     3b4:	51 f4       	brne	.+20     	; 0x3ca <GPIOConfig+0x334>
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	39 f4       	brne	.+14     	; 0x3ca <GPIOConfig+0x334>
 {
    SET_BIT(DDRB,PB6);
     3bc:	a4 e2       	ldi	r26, 0x24	; 36
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	e4 e2       	ldi	r30, 0x24	; 36
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	80 64       	ori	r24, 0x40	; 64
     3c8:	8c 93       	st	X, r24
 }
  if(pin == PB7 && mode == OUTPUT)
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	87 30       	cpi	r24, 0x07	; 7
     3ce:	51 f4       	brne	.+20     	; 0x3e4 <GPIOConfig+0x34e>
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	39 f4       	brne	.+14     	; 0x3e4 <GPIOConfig+0x34e>
 {
    SET_BIT(DDRB,PB7);
     3d6:	a4 e2       	ldi	r26, 0x24	; 36
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e4 e2       	ldi	r30, 0x24	; 36
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	80 68       	ori	r24, 0x80	; 128
     3e2:	8c 93       	st	X, r24
 }


// for port C
// INPUT configs for C
 if(pin == PC0 && mode == INPUT)
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	88 23       	and	r24, r24
     3e8:	51 f4       	brne	.+20     	; 0x3fe <GPIOConfig+0x368>
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	88 23       	and	r24, r24
     3ee:	39 f4       	brne	.+14     	; 0x3fe <GPIOConfig+0x368>
 {
    CLR_BIT(DDRC,PC0);
     3f0:	a7 e2       	ldi	r26, 0x27	; 39
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	e7 e2       	ldi	r30, 0x27	; 39
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	8c 93       	st	X, r24
 }
if(pin == PC1 && mode == INPUT)
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	51 f4       	brne	.+20     	; 0x418 <GPIOConfig+0x382>
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	88 23       	and	r24, r24
     408:	39 f4       	brne	.+14     	; 0x418 <GPIOConfig+0x382>
 {

    CLR_BIT(DDRC,PC1);
     40a:	a7 e2       	ldi	r26, 0x27	; 39
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	e7 e2       	ldi	r30, 0x27	; 39
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	8d 7f       	andi	r24, 0xFD	; 253
     416:	8c 93       	st	X, r24
 }

 if(pin == PC2 && mode == INPUT)
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	51 f4       	brne	.+20     	; 0x432 <GPIOConfig+0x39c>
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	88 23       	and	r24, r24
     422:	39 f4       	brne	.+14     	; 0x432 <GPIOConfig+0x39c>
 {
    CLR_BIT(DDRC,PC2);
     424:	a7 e2       	ldi	r26, 0x27	; 39
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e7 e2       	ldi	r30, 0x27	; 39
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	8b 7f       	andi	r24, 0xFB	; 251
     430:	8c 93       	st	X, r24
 }

 if(pin == PC3 && mode == INPUT)
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	51 f4       	brne	.+20     	; 0x44c <GPIOConfig+0x3b6>
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	88 23       	and	r24, r24
     43c:	39 f4       	brne	.+14     	; 0x44c <GPIOConfig+0x3b6>
 {
    CLR_BIT(DDRC,PC3);
     43e:	a7 e2       	ldi	r26, 0x27	; 39
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e7 e2       	ldi	r30, 0x27	; 39
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	87 7f       	andi	r24, 0xF7	; 247
     44a:	8c 93       	st	X, r24
 }

 if(pin == PC4 && mode == INPUT)
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	84 30       	cpi	r24, 0x04	; 4
     450:	51 f4       	brne	.+20     	; 0x466 <GPIOConfig+0x3d0>
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	88 23       	and	r24, r24
     456:	39 f4       	brne	.+14     	; 0x466 <GPIOConfig+0x3d0>
 {
    CLR_BIT(DDRC,PC4);
     458:	a7 e2       	ldi	r26, 0x27	; 39
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e7 e2       	ldi	r30, 0x27	; 39
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8f 7e       	andi	r24, 0xEF	; 239
     464:	8c 93       	st	X, r24
 }

 if(pin == PC5 && mode == INPUT)
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	85 30       	cpi	r24, 0x05	; 5
     46a:	51 f4       	brne	.+20     	; 0x480 <GPIOConfig+0x3ea>
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 23       	and	r24, r24
     470:	39 f4       	brne	.+14     	; 0x480 <GPIOConfig+0x3ea>
 {
    CLR_BIT(DDRC,PC5);
     472:	a7 e2       	ldi	r26, 0x27	; 39
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	e7 e2       	ldi	r30, 0x27	; 39
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	8f 7d       	andi	r24, 0xDF	; 223
     47e:	8c 93       	st	X, r24
 }
 if(pin == PC6 && mode == INPUT)
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	51 f4       	brne	.+20     	; 0x49a <GPIOConfig+0x404>
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	88 23       	and	r24, r24
     48a:	39 f4       	brne	.+14     	; 0x49a <GPIOConfig+0x404>
 {
    CLR_BIT(DDRC,PC6);
     48c:	a7 e2       	ldi	r26, 0x27	; 39
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	e7 e2       	ldi	r30, 0x27	; 39
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	8f 7b       	andi	r24, 0xBF	; 191
     498:	8c 93       	st	X, r24
 }

 // Output configs for C
 if(pin == PC0 && mode == OUTPUT)
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	88 23       	and	r24, r24
     49e:	51 f4       	brne	.+20     	; 0x4b4 <GPIOConfig+0x41e>
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	39 f4       	brne	.+14     	; 0x4b4 <GPIOConfig+0x41e>
 {
    SET_BIT(DDRC,PC0);
     4a6:	a7 e2       	ldi	r26, 0x27	; 39
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	e7 e2       	ldi	r30, 0x27	; 39
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	81 60       	ori	r24, 0x01	; 1
     4b2:	8c 93       	st	X, r24
 }
if(pin == PC1 && mode == OUTPUT)
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	51 f4       	brne	.+20     	; 0x4ce <GPIOConfig+0x438>
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	39 f4       	brne	.+14     	; 0x4ce <GPIOConfig+0x438>
 {
    SET_BIT(DDRC,PC1);
     4c0:	a7 e2       	ldi	r26, 0x27	; 39
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	e7 e2       	ldi	r30, 0x27	; 39
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	8c 93       	st	X, r24
 }

 if(pin == PC2 && mode == OUTPUT)
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <GPIOConfig+0x452>
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	39 f4       	brne	.+14     	; 0x4e8 <GPIOConfig+0x452>
 {
    SET_BIT(DDRC,PC2);
     4da:	a7 e2       	ldi	r26, 0x27	; 39
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e7 e2       	ldi	r30, 0x27	; 39
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	84 60       	ori	r24, 0x04	; 4
     4e6:	8c 93       	st	X, r24
 }

 if(pin == PC3 && mode == OUTPUT)
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	51 f4       	brne	.+20     	; 0x502 <GPIOConfig+0x46c>
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	39 f4       	brne	.+14     	; 0x502 <GPIOConfig+0x46c>
 {
    SET_BIT(DDRC,PC3);
     4f4:	a7 e2       	ldi	r26, 0x27	; 39
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	e7 e2       	ldi	r30, 0x27	; 39
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	88 60       	ori	r24, 0x08	; 8
     500:	8c 93       	st	X, r24
 }

 if(pin == PC4 && mode == OUTPUT)
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	84 30       	cpi	r24, 0x04	; 4
     506:	51 f4       	brne	.+20     	; 0x51c <GPIOConfig+0x486>
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	39 f4       	brne	.+14     	; 0x51c <GPIOConfig+0x486>
 {
    SET_BIT(DDRC,PC4);
     50e:	a7 e2       	ldi	r26, 0x27	; 39
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	e7 e2       	ldi	r30, 0x27	; 39
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	80 61       	ori	r24, 0x10	; 16
     51a:	8c 93       	st	X, r24
 }

 if(pin == PC5 && mode == OUTPUT)
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	85 30       	cpi	r24, 0x05	; 5
     520:	51 f4       	brne	.+20     	; 0x536 <GPIOConfig+0x4a0>
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	39 f4       	brne	.+14     	; 0x536 <GPIOConfig+0x4a0>
 {
    SET_BIT(DDRC,PC5);
     528:	a7 e2       	ldi	r26, 0x27	; 39
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	e7 e2       	ldi	r30, 0x27	; 39
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	80 62       	ori	r24, 0x20	; 32
     534:	8c 93       	st	X, r24
 }
 if(pin == PC6 && mode == OUTPUT)
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	86 30       	cpi	r24, 0x06	; 6
     53a:	51 f4       	brne	.+20     	; 0x550 <GPIOConfig+0x4ba>
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	39 f4       	brne	.+14     	; 0x550 <GPIOConfig+0x4ba>
 {
    SET_BIT(DDRC,PC6);
     542:	a7 e2       	ldi	r26, 0x27	; 39
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e7 e2       	ldi	r30, 0x27	; 39
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	80 64       	ori	r24, 0x40	; 64
     54e:	8c 93       	st	X, r24

 // All PULL_UP Configurations

// PORTB pull ups:

 if(pin == PB0 && mode == PULL_UP)
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	88 23       	and	r24, r24
     554:	51 f4       	brne	.+20     	; 0x56a <GPIOConfig+0x4d4>
     556:	8a 81       	ldd	r24, Y+2	; 0x02
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	39 f4       	brne	.+14     	; 0x56a <GPIOConfig+0x4d4>
 {
    SET_BIT(PORTB,PB0);
     55c:	a5 e2       	ldi	r26, 0x25	; 37
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	e5 e2       	ldi	r30, 0x25	; 37
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	81 60       	ori	r24, 0x01	; 1
     568:	8c 93       	st	X, r24
 }
if(pin == PB1 && mode == PULL_UP)
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	51 f4       	brne	.+20     	; 0x584 <GPIOConfig+0x4ee>
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	39 f4       	brne	.+14     	; 0x584 <GPIOConfig+0x4ee>
 {
    SET_BIT(PORTB,PB1);
     576:	a5 e2       	ldi	r26, 0x25	; 37
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	e5 e2       	ldi	r30, 0x25	; 37
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	82 60       	ori	r24, 0x02	; 2
     582:	8c 93       	st	X, r24
 }

 if(pin == PB2 && mode == PULL_UP)
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	51 f4       	brne	.+20     	; 0x59e <GPIOConfig+0x508>
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	39 f4       	brne	.+14     	; 0x59e <GPIOConfig+0x508>
 {
    SET_BIT(PORTB,PB2);
     590:	a5 e2       	ldi	r26, 0x25	; 37
     592:	b0 e0       	ldi	r27, 0x00	; 0
     594:	e5 e2       	ldi	r30, 0x25	; 37
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	84 60       	ori	r24, 0x04	; 4
     59c:	8c 93       	st	X, r24
 }

 if(pin == PB3 && mode == PULL_UP)
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	51 f4       	brne	.+20     	; 0x5b8 <GPIOConfig+0x522>
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	39 f4       	brne	.+14     	; 0x5b8 <GPIOConfig+0x522>
 {
    SET_BIT(PORTB,PB3);
     5aa:	a5 e2       	ldi	r26, 0x25	; 37
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	e5 e2       	ldi	r30, 0x25	; 37
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	88 60       	ori	r24, 0x08	; 8
     5b6:	8c 93       	st	X, r24
 }

 if(pin == PB4 && mode == PULL_UP)
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	84 30       	cpi	r24, 0x04	; 4
     5bc:	51 f4       	brne	.+20     	; 0x5d2 <GPIOConfig+0x53c>
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	39 f4       	brne	.+14     	; 0x5d2 <GPIOConfig+0x53c>
 {
    SET_BIT(PORTB,PB4);
     5c4:	a5 e2       	ldi	r26, 0x25	; 37
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e5 e2       	ldi	r30, 0x25	; 37
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	80 61       	ori	r24, 0x10	; 16
     5d0:	8c 93       	st	X, r24
 }

 if(pin == PB5 && mode == PULL_UP)
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	85 30       	cpi	r24, 0x05	; 5
     5d6:	51 f4       	brne	.+20     	; 0x5ec <GPIOConfig+0x556>
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	39 f4       	brne	.+14     	; 0x5ec <GPIOConfig+0x556>
 {
    SET_BIT(PORTB,PB5);
     5de:	a5 e2       	ldi	r26, 0x25	; 37
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	e5 e2       	ldi	r30, 0x25	; 37
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	80 62       	ori	r24, 0x20	; 32
     5ea:	8c 93       	st	X, r24
 }
 if(pin == PB6 && mode == PULL_UP)
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	86 30       	cpi	r24, 0x06	; 6
     5f0:	51 f4       	brne	.+20     	; 0x606 <GPIOConfig+0x570>
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	39 f4       	brne	.+14     	; 0x606 <GPIOConfig+0x570>
 {
    SET_BIT(PORTB,PB6);
     5f8:	a5 e2       	ldi	r26, 0x25	; 37
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	e5 e2       	ldi	r30, 0x25	; 37
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	80 64       	ori	r24, 0x40	; 64
     604:	8c 93       	st	X, r24
 }
  if(pin == PB7 && mode == PULL_UP)
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	87 30       	cpi	r24, 0x07	; 7
     60a:	51 f4       	brne	.+20     	; 0x620 <GPIOConfig+0x58a>
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	39 f4       	brne	.+14     	; 0x620 <GPIOConfig+0x58a>
 {
    SET_BIT(PORTB,PB7);
     612:	a5 e2       	ldi	r26, 0x25	; 37
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e5 e2       	ldi	r30, 0x25	; 37
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	80 68       	ori	r24, 0x80	; 128
     61e:	8c 93       	st	X, r24
 }


// PULL for D
 if(pin == PD0 && mode == PULL_UP)
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	88 23       	and	r24, r24
     624:	51 f4       	brne	.+20     	; 0x63a <GPIOConfig+0x5a4>
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	39 f4       	brne	.+14     	; 0x63a <GPIOConfig+0x5a4>
 {
    SET_BIT(PORTD,PD0);
     62c:	ab e2       	ldi	r26, 0x2B	; 43
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	eb e2       	ldi	r30, 0x2B	; 43
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	81 60       	ori	r24, 0x01	; 1
     638:	8c 93       	st	X, r24
 }
if(pin == PD1 && mode == PULL_UP)
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	51 f4       	brne	.+20     	; 0x654 <GPIOConfig+0x5be>
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	39 f4       	brne	.+14     	; 0x654 <GPIOConfig+0x5be>
 {
    SET_BIT(PORTD,PD1);
     646:	ab e2       	ldi	r26, 0x2B	; 43
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	eb e2       	ldi	r30, 0x2B	; 43
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	82 60       	ori	r24, 0x02	; 2
     652:	8c 93       	st	X, r24
 }

 if(pin == PD2 && mode == PULL_UP)
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	51 f4       	brne	.+20     	; 0x66e <GPIOConfig+0x5d8>
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	39 f4       	brne	.+14     	; 0x66e <GPIOConfig+0x5d8>
 {
    SET_BIT(PORTD,PD2);
     660:	ab e2       	ldi	r26, 0x2B	; 43
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	eb e2       	ldi	r30, 0x2B	; 43
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	84 60       	ori	r24, 0x04	; 4
     66c:	8c 93       	st	X, r24
 }

 if(pin == PD3 && mode == PULL_UP)
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	51 f4       	brne	.+20     	; 0x688 <GPIOConfig+0x5f2>
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	39 f4       	brne	.+14     	; 0x688 <GPIOConfig+0x5f2>
 {
    SET_BIT(PORTD,PD3);
     67a:	ab e2       	ldi	r26, 0x2B	; 43
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	eb e2       	ldi	r30, 0x2B	; 43
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	88 60       	ori	r24, 0x08	; 8
     686:	8c 93       	st	X, r24
 }

 if(pin == PD4 && mode == PULL_UP)
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	84 30       	cpi	r24, 0x04	; 4
     68c:	51 f4       	brne	.+20     	; 0x6a2 <GPIOConfig+0x60c>
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	39 f4       	brne	.+14     	; 0x6a2 <GPIOConfig+0x60c>
 {
    SET_BIT(PORTD,PD4);
     694:	ab e2       	ldi	r26, 0x2B	; 43
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	eb e2       	ldi	r30, 0x2B	; 43
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	80 61       	ori	r24, 0x10	; 16
     6a0:	8c 93       	st	X, r24
 }

 if(pin == PD5 && mode == PULL_UP)
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	85 30       	cpi	r24, 0x05	; 5
     6a6:	51 f4       	brne	.+20     	; 0x6bc <GPIOConfig+0x626>
     6a8:	8a 81       	ldd	r24, Y+2	; 0x02
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	39 f4       	brne	.+14     	; 0x6bc <GPIOConfig+0x626>
 {
    SET_BIT(PORTD,PD5);
     6ae:	ab e2       	ldi	r26, 0x2B	; 43
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	eb e2       	ldi	r30, 0x2B	; 43
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	80 62       	ori	r24, 0x20	; 32
     6ba:	8c 93       	st	X, r24
 }
 if(pin == PD6 && mode == PULL_UP)
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	86 30       	cpi	r24, 0x06	; 6
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <GPIOConfig+0x640>
     6c2:	8a 81       	ldd	r24, Y+2	; 0x02
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	39 f4       	brne	.+14     	; 0x6d6 <GPIOConfig+0x640>
 {
    SET_BIT(PORTD,PD6);
     6c8:	ab e2       	ldi	r26, 0x2B	; 43
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	eb e2       	ldi	r30, 0x2B	; 43
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	80 64       	ori	r24, 0x40	; 64
     6d4:	8c 93       	st	X, r24
 }
  if(pin == PD7 && mode == PULL_UP)
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	87 30       	cpi	r24, 0x07	; 7
     6da:	51 f4       	brne	.+20     	; 0x6f0 <GPIOConfig+0x65a>
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	39 f4       	brne	.+14     	; 0x6f0 <GPIOConfig+0x65a>
 {
    SET_BIT(PORTD,PD7);
     6e2:	ab e2       	ldi	r26, 0x2B	; 43
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	eb e2       	ldi	r30, 0x2B	; 43
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	8c 93       	st	X, r24
 }


 // Pull_UP for PORT C

  if(pin == PC0 && mode == PULL_UP)
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 23       	and	r24, r24
     6f4:	51 f4       	brne	.+20     	; 0x70a <GPIOConfig+0x674>
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	39 f4       	brne	.+14     	; 0x70a <GPIOConfig+0x674>
 {
    SET_BIT(PORTC,PC0);
     6fc:	a8 e2       	ldi	r26, 0x28	; 40
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	e8 e2       	ldi	r30, 0x28	; 40
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	81 60       	ori	r24, 0x01	; 1
     708:	8c 93       	st	X, r24
 }
if(pin == PC1 && mode == PULL_UP)
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	51 f4       	brne	.+20     	; 0x724 <GPIOConfig+0x68e>
     710:	8a 81       	ldd	r24, Y+2	; 0x02
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	39 f4       	brne	.+14     	; 0x724 <GPIOConfig+0x68e>
 {
    SET_BIT(PORTC,PC1);
     716:	a8 e2       	ldi	r26, 0x28	; 40
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	e8 e2       	ldi	r30, 0x28	; 40
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	82 60       	ori	r24, 0x02	; 2
     722:	8c 93       	st	X, r24
 }

 if(pin == PC2 && mode == PULL_UP)
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	51 f4       	brne	.+20     	; 0x73e <GPIOConfig+0x6a8>
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	39 f4       	brne	.+14     	; 0x73e <GPIOConfig+0x6a8>
 {
    SET_BIT(PORTC,PC2);
     730:	a8 e2       	ldi	r26, 0x28	; 40
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	e8 e2       	ldi	r30, 0x28	; 40
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	84 60       	ori	r24, 0x04	; 4
     73c:	8c 93       	st	X, r24
 }

 if(pin == PC3 && mode == PULL_UP)
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	83 30       	cpi	r24, 0x03	; 3
     742:	51 f4       	brne	.+20     	; 0x758 <GPIOConfig+0x6c2>
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	39 f4       	brne	.+14     	; 0x758 <GPIOConfig+0x6c2>
 {
    SET_BIT(PORTC,PC3);
     74a:	a8 e2       	ldi	r26, 0x28	; 40
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e8 e2       	ldi	r30, 0x28	; 40
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	88 60       	ori	r24, 0x08	; 8
     756:	8c 93       	st	X, r24
 }

 if(pin == PC4 && mode == PULL_UP)
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	51 f4       	brne	.+20     	; 0x772 <GPIOConfig+0x6dc>
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	39 f4       	brne	.+14     	; 0x772 <GPIOConfig+0x6dc>
 {
    SET_BIT(PORTC,PC4);
     764:	a8 e2       	ldi	r26, 0x28	; 40
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e8 e2       	ldi	r30, 0x28	; 40
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	80 61       	ori	r24, 0x10	; 16
     770:	8c 93       	st	X, r24
 }

 if(pin == PC5 && mode == PULL_UP)
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	85 30       	cpi	r24, 0x05	; 5
     776:	51 f4       	brne	.+20     	; 0x78c <GPIOConfig+0x6f6>
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	39 f4       	brne	.+14     	; 0x78c <GPIOConfig+0x6f6>
 {
    SET_BIT(PORTC,PC5);
     77e:	a8 e2       	ldi	r26, 0x28	; 40
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e8 e2       	ldi	r30, 0x28	; 40
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	80 62       	ori	r24, 0x20	; 32
     78a:	8c 93       	st	X, r24
 }
 if(pin == PC6 && mode == PULL_UP)
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	86 30       	cpi	r24, 0x06	; 6
     790:	51 f4       	brne	.+20     	; 0x7a6 <GPIOConfig+0x710>
     792:	8a 81       	ldd	r24, Y+2	; 0x02
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	39 f4       	brne	.+14     	; 0x7a6 <GPIOConfig+0x710>
 {
    SET_BIT(PORTC,PC6);
     798:	a8 e2       	ldi	r26, 0x28	; 40
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	e8 e2       	ldi	r30, 0x28	; 40
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	80 64       	ori	r24, 0x40	; 64
     7a4:	8c 93       	st	X, r24

 }


}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <GPIOPinRead>:
*Pin: The Atmega328P port pin which need to be read.
*Return value: 0 or 1
******************************************************************************/
// GPIO Read function definitions
uint8_t GPIOPinRead(uint8_t pin)
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	69 97       	sbiw	r28, 0x19	; 25
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	88 8f       	std	Y+24, r24	; 0x18
if(pin==PD0)
     7c6:	88 8d       	ldd	r24, Y+24	; 0x18
     7c8:	88 23       	and	r24, r24
     7ca:	89 f4       	brne	.+34     	; 0x7ee <GPIOPinRead+0x3e>
{
uint8_t PIN_READ =0x00;
     7cc:	1f 8a       	std	Y+23, r1	; 0x17
PIN_READ=PIND;
     7ce:	e9 e2       	ldi	r30, 0x29	; 41
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	8f 8b       	std	Y+23, r24	; 0x17
if(PIN_READ & (1<<PD0))
     7d6:	8f 89       	ldd	r24, Y+23	; 0x17
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	81 70       	andi	r24, 0x01	; 1
     7de:	90 70       	andi	r25, 0x00	; 0
     7e0:	88 23       	and	r24, r24
     7e2:	19 f0       	breq	.+6      	; 0x7ea <GPIOPinRead+0x3a>
{
    return 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	89 8f       	std	Y+25, r24	; 0x19
     7e8:	b3 c1       	rjmp	.+870    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     7ea:	19 8e       	std	Y+25, r1	; 0x19
     7ec:	b1 c1       	rjmp	.+866    	; 0xb50 <__stack+0x251>
}
}


if(pin==PD1)
     7ee:	88 8d       	ldd	r24, Y+24	; 0x18
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	89 f4       	brne	.+34     	; 0x816 <GPIOPinRead+0x66>
{
uint8_t PIN_READ =0x00;
     7f4:	1e 8a       	std	Y+22, r1	; 0x16
PIN_READ=PIND;
     7f6:	e9 e2       	ldi	r30, 0x29	; 41
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8e 8b       	std	Y+22, r24	; 0x16
if(PIN_READ & (1<<PD1))
     7fe:	8e 89       	ldd	r24, Y+22	; 0x16
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 70       	andi	r24, 0x02	; 2
     806:	90 70       	andi	r25, 0x00	; 0
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	19 f0       	breq	.+6      	; 0x812 <GPIOPinRead+0x62>
{
    return 1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	89 8f       	std	Y+25, r24	; 0x19
     810:	9f c1       	rjmp	.+830    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     812:	19 8e       	std	Y+25, r1	; 0x19
     814:	9d c1       	rjmp	.+826    	; 0xb50 <__stack+0x251>
}
}

if(pin==PD2)
     816:	88 8d       	ldd	r24, Y+24	; 0x18
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	89 f4       	brne	.+34     	; 0x83e <GPIOPinRead+0x8e>
{
uint8_t PIN_READ =0x00;
     81c:	1d 8a       	std	Y+21, r1	; 0x15
PIN_READ=PIND;
     81e:	e9 e2       	ldi	r30, 0x29	; 41
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	8d 8b       	std	Y+21, r24	; 0x15
if(PIN_READ & (1<<PD2))
     826:	8d 89       	ldd	r24, Y+21	; 0x15
     828:	88 2f       	mov	r24, r24
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	84 70       	andi	r24, 0x04	; 4
     82e:	90 70       	andi	r25, 0x00	; 0
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	19 f0       	breq	.+6      	; 0x83a <GPIOPinRead+0x8a>
{
    return 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	89 8f       	std	Y+25, r24	; 0x19
     838:	8b c1       	rjmp	.+790    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     83a:	19 8e       	std	Y+25, r1	; 0x19
     83c:	89 c1       	rjmp	.+786    	; 0xb50 <__stack+0x251>
}
}


if(pin==PD3)
     83e:	88 8d       	ldd	r24, Y+24	; 0x18
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	89 f4       	brne	.+34     	; 0x866 <GPIOPinRead+0xb6>
{
uint8_t PIN_READ =0x00;
     844:	1c 8a       	std	Y+20, r1	; 0x14
PIN_READ=PIND;
     846:	e9 e2       	ldi	r30, 0x29	; 41
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	8c 8b       	std	Y+20, r24	; 0x14
if(PIN_READ & (1<<PD3))
     84e:	8c 89       	ldd	r24, Y+20	; 0x14
     850:	88 2f       	mov	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	88 70       	andi	r24, 0x08	; 8
     856:	90 70       	andi	r25, 0x00	; 0
     858:	00 97       	sbiw	r24, 0x00	; 0
     85a:	19 f0       	breq	.+6      	; 0x862 <GPIOPinRead+0xb2>
{
    return 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	89 8f       	std	Y+25, r24	; 0x19
     860:	77 c1       	rjmp	.+750    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     862:	19 8e       	std	Y+25, r1	; 0x19
     864:	75 c1       	rjmp	.+746    	; 0xb50 <__stack+0x251>
}
}


if(pin==PD4)
     866:	88 8d       	ldd	r24, Y+24	; 0x18
     868:	84 30       	cpi	r24, 0x04	; 4
     86a:	89 f4       	brne	.+34     	; 0x88e <GPIOPinRead+0xde>
{
uint8_t PIN_READ =0x00;
     86c:	1b 8a       	std	Y+19, r1	; 0x13
PIN_READ=PIND;
     86e:	e9 e2       	ldi	r30, 0x29	; 41
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	8b 8b       	std	Y+19, r24	; 0x13
if(PIN_READ & (1<<PD4))
     876:	8b 89       	ldd	r24, Y+19	; 0x13
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	80 71       	andi	r24, 0x10	; 16
     87e:	90 70       	andi	r25, 0x00	; 0
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	19 f0       	breq	.+6      	; 0x88a <GPIOPinRead+0xda>
{
    return 1;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	89 8f       	std	Y+25, r24	; 0x19
     888:	63 c1       	rjmp	.+710    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     88a:	19 8e       	std	Y+25, r1	; 0x19
     88c:	61 c1       	rjmp	.+706    	; 0xb50 <__stack+0x251>
}
}


if(pin==PD5)
     88e:	88 8d       	ldd	r24, Y+24	; 0x18
     890:	85 30       	cpi	r24, 0x05	; 5
     892:	89 f4       	brne	.+34     	; 0x8b6 <GPIOPinRead+0x106>
{
uint8_t PIN_READ =0x00;
     894:	1a 8a       	std	Y+18, r1	; 0x12
PIN_READ=PIND;
     896:	e9 e2       	ldi	r30, 0x29	; 41
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8a 8b       	std	Y+18, r24	; 0x12
if(PIN_READ & (1<<PD5))
     89e:	8a 89       	ldd	r24, Y+18	; 0x12
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	80 72       	andi	r24, 0x20	; 32
     8a6:	90 70       	andi	r25, 0x00	; 0
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	19 f0       	breq	.+6      	; 0x8b2 <GPIOPinRead+0x102>
{
    return 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	89 8f       	std	Y+25, r24	; 0x19
     8b0:	4f c1       	rjmp	.+670    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     8b2:	19 8e       	std	Y+25, r1	; 0x19
     8b4:	4d c1       	rjmp	.+666    	; 0xb50 <__stack+0x251>
}
}

if(pin==PD6)
     8b6:	88 8d       	ldd	r24, Y+24	; 0x18
     8b8:	86 30       	cpi	r24, 0x06	; 6
     8ba:	89 f4       	brne	.+34     	; 0x8de <GPIOPinRead+0x12e>
{
uint8_t PIN_READ =0x00;
     8bc:	19 8a       	std	Y+17, r1	; 0x11
PIN_READ=PIND;
     8be:	e9 e2       	ldi	r30, 0x29	; 41
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	89 8b       	std	Y+17, r24	; 0x11
if(PIN_READ & (1<<PD6))
     8c6:	89 89       	ldd	r24, Y+17	; 0x11
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	80 74       	andi	r24, 0x40	; 64
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	19 f0       	breq	.+6      	; 0x8da <GPIOPinRead+0x12a>
{
    return 1;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	3b c1       	rjmp	.+630    	; 0xb50 <__stack+0x251>
}
else
{
    return 0;
     8da:	19 8e       	std	Y+25, r1	; 0x19
     8dc:	39 c1       	rjmp	.+626    	; 0xb50 <__stack+0x251>
}
}


if(pin==PD7)
     8de:	88 8d       	ldd	r24, Y+24	; 0x18
     8e0:	87 30       	cpi	r24, 0x07	; 7
     8e2:	69 f4       	brne	.+26     	; 0x8fe <GPIOPinRead+0x14e>
{
uint8_t PIN_READ =0x00;
     8e4:	18 8a       	std	Y+16, r1	; 0x10
PIN_READ=PIND;
     8e6:	e9 e2       	ldi	r30, 0x29	; 41
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	88 8b       	std	Y+16, r24	; 0x10
if(PIN_READ & (1<<PD7))
     8ee:	88 89       	ldd	r24, Y+16	; 0x10
     8f0:	88 23       	and	r24, r24
     8f2:	1c f4       	brge	.+6      	; 0x8fa <GPIOPinRead+0x14a>
{
return 1;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	89 8f       	std	Y+25, r24	; 0x19
     8f8:	2b c1       	rjmp	.+598    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     8fa:	19 8e       	std	Y+25, r1	; 0x19
     8fc:	29 c1       	rjmp	.+594    	; 0xb50 <__stack+0x251>
}
}

// b port
if(pin==PB0)
     8fe:	88 8d       	ldd	r24, Y+24	; 0x18
     900:	88 23       	and	r24, r24
     902:	89 f4       	brne	.+34     	; 0x926 <__stack+0x27>
{
uint8_t PIN_READ =0x00;
     904:	1f 86       	std	Y+15, r1	; 0x0f
PIN_READ=PINB;
     906:	e3 e2       	ldi	r30, 0x23	; 35
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	8f 87       	std	Y+15, r24	; 0x0f
if(PIN_READ & (1<<PB0))
     90e:	8f 85       	ldd	r24, Y+15	; 0x0f
     910:	88 2f       	mov	r24, r24
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	81 70       	andi	r24, 0x01	; 1
     916:	90 70       	andi	r25, 0x00	; 0
     918:	88 23       	and	r24, r24
     91a:	19 f0       	breq	.+6      	; 0x922 <__stack+0x23>
{
return 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	89 8f       	std	Y+25, r24	; 0x19
     920:	17 c1       	rjmp	.+558    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     922:	19 8e       	std	Y+25, r1	; 0x19
     924:	15 c1       	rjmp	.+554    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB1)
     926:	88 8d       	ldd	r24, Y+24	; 0x18
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	89 f4       	brne	.+34     	; 0x94e <__stack+0x4f>
{
uint8_t PIN_READ =0x00;
     92c:	1e 86       	std	Y+14, r1	; 0x0e
PIN_READ=PINB;
     92e:	e3 e2       	ldi	r30, 0x23	; 35
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	8e 87       	std	Y+14, r24	; 0x0e
if(PIN_READ & (1<<PB1))
     936:	8e 85       	ldd	r24, Y+14	; 0x0e
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	82 70       	andi	r24, 0x02	; 2
     93e:	90 70       	andi	r25, 0x00	; 0
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	19 f0       	breq	.+6      	; 0x94a <__stack+0x4b>
{
return 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	89 8f       	std	Y+25, r24	; 0x19
     948:	03 c1       	rjmp	.+518    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     94a:	19 8e       	std	Y+25, r1	; 0x19
     94c:	01 c1       	rjmp	.+514    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB2)
     94e:	88 8d       	ldd	r24, Y+24	; 0x18
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	89 f4       	brne	.+34     	; 0x976 <__stack+0x77>
{
uint8_t PIN_READ =0x00;
     954:	1d 86       	std	Y+13, r1	; 0x0d
PIN_READ=PINB;
     956:	e3 e2       	ldi	r30, 0x23	; 35
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8d 87       	std	Y+13, r24	; 0x0d
if(PIN_READ & (1<<PB2))
     95e:	8d 85       	ldd	r24, Y+13	; 0x0d
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	84 70       	andi	r24, 0x04	; 4
     966:	90 70       	andi	r25, 0x00	; 0
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	19 f0       	breq	.+6      	; 0x972 <__stack+0x73>
{
return 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	89 8f       	std	Y+25, r24	; 0x19
     970:	ef c0       	rjmp	.+478    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     972:	19 8e       	std	Y+25, r1	; 0x19
     974:	ed c0       	rjmp	.+474    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB3)
     976:	88 8d       	ldd	r24, Y+24	; 0x18
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	89 f4       	brne	.+34     	; 0x99e <__stack+0x9f>
{
uint8_t PIN_READ =0x00;
     97c:	1c 86       	std	Y+12, r1	; 0x0c
PIN_READ=PINB;
     97e:	e3 e2       	ldi	r30, 0x23	; 35
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	8c 87       	std	Y+12, r24	; 0x0c
if(PIN_READ & (1<<PB3))
     986:	8c 85       	ldd	r24, Y+12	; 0x0c
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	88 70       	andi	r24, 0x08	; 8
     98e:	90 70       	andi	r25, 0x00	; 0
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	19 f0       	breq	.+6      	; 0x99a <__stack+0x9b>
{
return 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	89 8f       	std	Y+25, r24	; 0x19
     998:	db c0       	rjmp	.+438    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     99a:	19 8e       	std	Y+25, r1	; 0x19
     99c:	d9 c0       	rjmp	.+434    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB4)
     99e:	88 8d       	ldd	r24, Y+24	; 0x18
     9a0:	84 30       	cpi	r24, 0x04	; 4
     9a2:	89 f4       	brne	.+34     	; 0x9c6 <__stack+0xc7>
{
uint8_t PIN_READ =0x00;
     9a4:	1b 86       	std	Y+11, r1	; 0x0b
PIN_READ=PINB;
     9a6:	e3 e2       	ldi	r30, 0x23	; 35
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	8b 87       	std	Y+11, r24	; 0x0b
if(PIN_READ & (1<<PB4))
     9ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	80 71       	andi	r24, 0x10	; 16
     9b6:	90 70       	andi	r25, 0x00	; 0
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	19 f0       	breq	.+6      	; 0x9c2 <__stack+0xc3>
{
return 1;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	89 8f       	std	Y+25, r24	; 0x19
     9c0:	c7 c0       	rjmp	.+398    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     9c2:	19 8e       	std	Y+25, r1	; 0x19
     9c4:	c5 c0       	rjmp	.+394    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB5)
     9c6:	88 8d       	ldd	r24, Y+24	; 0x18
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	89 f4       	brne	.+34     	; 0x9ee <__stack+0xef>
{
uint8_t PIN_READ =0x00;
     9cc:	1a 86       	std	Y+10, r1	; 0x0a
PIN_READ=PINB;
     9ce:	e3 e2       	ldi	r30, 0x23	; 35
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8a 87       	std	Y+10, r24	; 0x0a
if(PIN_READ & (1<<PB5))
     9d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d8:	88 2f       	mov	r24, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	80 72       	andi	r24, 0x20	; 32
     9de:	90 70       	andi	r25, 0x00	; 0
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	19 f0       	breq	.+6      	; 0x9ea <__stack+0xeb>
{
return 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	89 8f       	std	Y+25, r24	; 0x19
     9e8:	b3 c0       	rjmp	.+358    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     9ea:	19 8e       	std	Y+25, r1	; 0x19
     9ec:	b1 c0       	rjmp	.+354    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB6)
     9ee:	88 8d       	ldd	r24, Y+24	; 0x18
     9f0:	86 30       	cpi	r24, 0x06	; 6
     9f2:	89 f4       	brne	.+34     	; 0xa16 <__stack+0x117>
{
uint8_t PIN_READ =0x00;
     9f4:	19 86       	std	Y+9, r1	; 0x09
PIN_READ=PINB;
     9f6:	e3 e2       	ldi	r30, 0x23	; 35
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	89 87       	std	Y+9, r24	; 0x09
if(PIN_READ & (1<<PB6))
     9fe:	89 85       	ldd	r24, Y+9	; 0x09
     a00:	88 2f       	mov	r24, r24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	80 74       	andi	r24, 0x40	; 64
     a06:	90 70       	andi	r25, 0x00	; 0
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	19 f0       	breq	.+6      	; 0xa12 <__stack+0x113>
{
return 1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	89 8f       	std	Y+25, r24	; 0x19
     a10:	9f c0       	rjmp	.+318    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     a12:	19 8e       	std	Y+25, r1	; 0x19
     a14:	9d c0       	rjmp	.+314    	; 0xb50 <__stack+0x251>
}
}

if(pin==PB7)
     a16:	88 8d       	ldd	r24, Y+24	; 0x18
     a18:	87 30       	cpi	r24, 0x07	; 7
     a1a:	69 f4       	brne	.+26     	; 0xa36 <__stack+0x137>
{
uint8_t PIN_READ =0x00;
     a1c:	18 86       	std	Y+8, r1	; 0x08
PIN_READ=PINB;
     a1e:	e3 e2       	ldi	r30, 0x23	; 35
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	88 87       	std	Y+8, r24	; 0x08
if(PIN_READ & (1<<PB7))
     a26:	88 85       	ldd	r24, Y+8	; 0x08
     a28:	88 23       	and	r24, r24
     a2a:	1c f4       	brge	.+6      	; 0xa32 <__stack+0x133>
{
return 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	89 8f       	std	Y+25, r24	; 0x19
     a30:	8f c0       	rjmp	.+286    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     a32:	19 8e       	std	Y+25, r1	; 0x19
     a34:	8d c0       	rjmp	.+282    	; 0xb50 <__stack+0x251>
}
}

// port c
if(pin==PC0)
     a36:	88 8d       	ldd	r24, Y+24	; 0x18
     a38:	88 23       	and	r24, r24
     a3a:	89 f4       	brne	.+34     	; 0xa5e <__stack+0x15f>
{
uint8_t PIN_READ =0x00;
     a3c:	1f 82       	std	Y+7, r1	; 0x07
PIN_READ=PINC;
     a3e:	e6 e2       	ldi	r30, 0x26	; 38
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	8f 83       	std	Y+7, r24	; 0x07
if(PIN_READ & (1<<PC0))
     a46:	8f 81       	ldd	r24, Y+7	; 0x07
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	81 70       	andi	r24, 0x01	; 1
     a4e:	90 70       	andi	r25, 0x00	; 0
     a50:	88 23       	and	r24, r24
     a52:	19 f0       	breq	.+6      	; 0xa5a <__stack+0x15b>
{
return 1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	89 8f       	std	Y+25, r24	; 0x19
     a58:	7b c0       	rjmp	.+246    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     a5a:	19 8e       	std	Y+25, r1	; 0x19
     a5c:	79 c0       	rjmp	.+242    	; 0xb50 <__stack+0x251>
}
}

if(pin==PC1)
     a5e:	88 8d       	ldd	r24, Y+24	; 0x18
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	89 f4       	brne	.+34     	; 0xa86 <__stack+0x187>
{
uint8_t PIN_READ =0x00;
     a64:	1e 82       	std	Y+6, r1	; 0x06
PIN_READ=PINC;
     a66:	e6 e2       	ldi	r30, 0x26	; 38
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8e 83       	std	Y+6, r24	; 0x06
if(PIN_READ & (1<<PC1))
     a6e:	8e 81       	ldd	r24, Y+6	; 0x06
     a70:	88 2f       	mov	r24, r24
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	82 70       	andi	r24, 0x02	; 2
     a76:	90 70       	andi	r25, 0x00	; 0
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	19 f0       	breq	.+6      	; 0xa82 <__stack+0x183>
{
return 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	89 8f       	std	Y+25, r24	; 0x19
     a80:	67 c0       	rjmp	.+206    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     a82:	19 8e       	std	Y+25, r1	; 0x19
     a84:	65 c0       	rjmp	.+202    	; 0xb50 <__stack+0x251>
}
}

if(pin==PC2)
     a86:	88 8d       	ldd	r24, Y+24	; 0x18
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	89 f4       	brne	.+34     	; 0xaae <__stack+0x1af>
{
uint8_t PIN_READ =0x00;
     a8c:	1d 82       	std	Y+5, r1	; 0x05
PIN_READ=PINC;
     a8e:	e6 e2       	ldi	r30, 0x26	; 38
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	8d 83       	std	Y+5, r24	; 0x05
if(PIN_READ & (1<<PC2))
     a96:	8d 81       	ldd	r24, Y+5	; 0x05
     a98:	88 2f       	mov	r24, r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	84 70       	andi	r24, 0x04	; 4
     a9e:	90 70       	andi	r25, 0x00	; 0
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	19 f0       	breq	.+6      	; 0xaaa <__stack+0x1ab>
{
return 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	89 8f       	std	Y+25, r24	; 0x19
     aa8:	53 c0       	rjmp	.+166    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     aaa:	19 8e       	std	Y+25, r1	; 0x19
     aac:	51 c0       	rjmp	.+162    	; 0xb50 <__stack+0x251>
}
}

if(pin==PC3)
     aae:	88 8d       	ldd	r24, Y+24	; 0x18
     ab0:	83 30       	cpi	r24, 0x03	; 3
     ab2:	89 f4       	brne	.+34     	; 0xad6 <__stack+0x1d7>
{
uint8_t PIN_READ =0x00;
     ab4:	1c 82       	std	Y+4, r1	; 0x04
PIN_READ=PINC;
     ab6:	e6 e2       	ldi	r30, 0x26	; 38
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8c 83       	std	Y+4, r24	; 0x04
if(PIN_READ & (1<<PC3))
     abe:	8c 81       	ldd	r24, Y+4	; 0x04
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	88 70       	andi	r24, 0x08	; 8
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	19 f0       	breq	.+6      	; 0xad2 <__stack+0x1d3>
{
return 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	89 8f       	std	Y+25, r24	; 0x19
     ad0:	3f c0       	rjmp	.+126    	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     ad2:	19 8e       	std	Y+25, r1	; 0x19
     ad4:	3d c0       	rjmp	.+122    	; 0xb50 <__stack+0x251>
}
}

if(pin==PC4)
     ad6:	88 8d       	ldd	r24, Y+24	; 0x18
     ad8:	84 30       	cpi	r24, 0x04	; 4
     ada:	89 f4       	brne	.+34     	; 0xafe <__stack+0x1ff>
{
uint8_t PIN_READ =0x00;
     adc:	1b 82       	std	Y+3, r1	; 0x03
PIN_READ=PINC;
     ade:	e6 e2       	ldi	r30, 0x26	; 38
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	8b 83       	std	Y+3, r24	; 0x03
if(PIN_READ & (1<<PC4))
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	88 2f       	mov	r24, r24
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	80 71       	andi	r24, 0x10	; 16
     aee:	90 70       	andi	r25, 0x00	; 0
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	19 f0       	breq	.+6      	; 0xafa <__stack+0x1fb>
{
return 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	89 8f       	std	Y+25, r24	; 0x19
     af8:	2b c0       	rjmp	.+86     	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     afa:	19 8e       	std	Y+25, r1	; 0x19
     afc:	29 c0       	rjmp	.+82     	; 0xb50 <__stack+0x251>
}
}

if(pin==PC5)
     afe:	88 8d       	ldd	r24, Y+24	; 0x18
     b00:	85 30       	cpi	r24, 0x05	; 5
     b02:	89 f4       	brne	.+34     	; 0xb26 <__stack+0x227>
{
uint8_t PIN_READ =0x00;
     b04:	1a 82       	std	Y+2, r1	; 0x02
PIN_READ=PINC;
     b06:	e6 e2       	ldi	r30, 0x26	; 38
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8a 83       	std	Y+2, r24	; 0x02
if(PIN_READ & (1<<PC5))
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	80 72       	andi	r24, 0x20	; 32
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	19 f0       	breq	.+6      	; 0xb22 <__stack+0x223>
{
return 1;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	89 8f       	std	Y+25, r24	; 0x19
     b20:	17 c0       	rjmp	.+46     	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     b22:	19 8e       	std	Y+25, r1	; 0x19
     b24:	15 c0       	rjmp	.+42     	; 0xb50 <__stack+0x251>
}
}

if(pin==PC6)
     b26:	88 8d       	ldd	r24, Y+24	; 0x18
     b28:	86 30       	cpi	r24, 0x06	; 6
     b2a:	89 f4       	brne	.+34     	; 0xb4e <__stack+0x24f>
{
uint8_t PIN_READ =0x00;
     b2c:	19 82       	std	Y+1, r1	; 0x01
PIN_READ=PINC;
     b2e:	e6 e2       	ldi	r30, 0x26	; 38
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	89 83       	std	Y+1, r24	; 0x01
if(PIN_READ & (1<<PC6))
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	80 74       	andi	r24, 0x40	; 64
     b3e:	90 70       	andi	r25, 0x00	; 0
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	19 f0       	breq	.+6      	; 0xb4a <__stack+0x24b>
{
return 1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	89 8f       	std	Y+25, r24	; 0x19
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <__stack+0x251>
}
else
{
return 0;
     b4a:	19 8e       	std	Y+25, r1	; 0x19
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <__stack+0x251>
}
}


return 0;
     b4e:	19 8e       	std	Y+25, r1	; 0x19
     b50:	89 8d       	ldd	r24, Y+25	; 0x19
}
     b52:	69 96       	adiw	r28, 0x19	; 25
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <GPIOPinWrite>:
*Pin: The Atmega328P pin used to write LOW or HIGH state.
*State: LOW or HIGH
******************************************************************************/

void GPIOPinWrite(uint8_t pin,uint8_t state)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	00 d0       	rcall	.+0      	; 0xb6a <GPIOPinWrite+0x6>
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	6a 83       	std	Y+2, r22	; 0x02
// write low and high for port d pins
if(pin==PD0 && state == HIGH)
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	88 23       	and	r24, r24
     b76:	51 f4       	brne	.+20     	; 0xb8c <GPIOPinWrite+0x28>
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	39 f4       	brne	.+14     	; 0xb8c <GPIOPinWrite+0x28>
{
    SET_BIT(PORTD,PD0);
     b7e:	ab e2       	ldi	r26, 0x2B	; 43
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	eb e2       	ldi	r30, 0x2B	; 43
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	8c 93       	st	X, r24
}
if(pin==PD0 && state == LOW)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	88 23       	and	r24, r24
     b90:	51 f4       	brne	.+20     	; 0xba6 <GPIOPinWrite+0x42>
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	88 23       	and	r24, r24
     b96:	39 f4       	brne	.+14     	; 0xba6 <GPIOPinWrite+0x42>
{
    CLR_BIT(PORTD,PD0);
     b98:	ab e2       	ldi	r26, 0x2B	; 43
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	eb e2       	ldi	r30, 0x2B	; 43
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	8e 7f       	andi	r24, 0xFE	; 254
     ba4:	8c 93       	st	X, r24
}
if(pin==PD1 && state == HIGH)
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	51 f4       	brne	.+20     	; 0xbc0 <GPIOPinWrite+0x5c>
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <GPIOPinWrite+0x5c>
{
    SET_BIT(PORTD,PD1);
     bb2:	ab e2       	ldi	r26, 0x2B	; 43
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e2       	ldi	r30, 0x2B	; 43
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	8c 93       	st	X, r24
}
if(pin==PD1 && state == LOW)
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	51 f4       	brne	.+20     	; 0xbda <GPIOPinWrite+0x76>
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	88 23       	and	r24, r24
     bca:	39 f4       	brne	.+14     	; 0xbda <GPIOPinWrite+0x76>
{
    CLR_BIT(PORTD,PD1);
     bcc:	ab e2       	ldi	r26, 0x2B	; 43
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	eb e2       	ldi	r30, 0x2B	; 43
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	8c 93       	st	X, r24
}

if(pin==PD2 && state == HIGH)
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	51 f4       	brne	.+20     	; 0xbf4 <GPIOPinWrite+0x90>
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	39 f4       	brne	.+14     	; 0xbf4 <GPIOPinWrite+0x90>
{
    SET_BIT(PORTD,PD2);
     be6:	ab e2       	ldi	r26, 0x2B	; 43
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	8c 93       	st	X, r24
}
if(pin==PD2 && state == LOW)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	51 f4       	brne	.+20     	; 0xc0e <GPIOPinWrite+0xaa>
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	88 23       	and	r24, r24
     bfe:	39 f4       	brne	.+14     	; 0xc0e <GPIOPinWrite+0xaa>
{
    CLR_BIT(PORTD,PD2);
     c00:	ab e2       	ldi	r26, 0x2B	; 43
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	eb e2       	ldi	r30, 0x2B	; 43
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8b 7f       	andi	r24, 0xFB	; 251
     c0c:	8c 93       	st	X, r24
}
if(pin==PD3 && state == HIGH)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	51 f4       	brne	.+20     	; 0xc28 <GPIOPinWrite+0xc4>
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	39 f4       	brne	.+14     	; 0xc28 <GPIOPinWrite+0xc4>
{
    SET_BIT(PORTD,PD3);
     c1a:	ab e2       	ldi	r26, 0x2B	; 43
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	eb e2       	ldi	r30, 0x2B	; 43
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	8c 93       	st	X, r24
}
if(pin==PD3 && state == LOW)
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	51 f4       	brne	.+20     	; 0xc42 <GPIOPinWrite+0xde>
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	88 23       	and	r24, r24
     c32:	39 f4       	brne	.+14     	; 0xc42 <GPIOPinWrite+0xde>
{
    CLR_BIT(PORTD,PD3);
     c34:	ab e2       	ldi	r26, 0x2B	; 43
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e2       	ldi	r30, 0x2B	; 43
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	87 7f       	andi	r24, 0xF7	; 247
     c40:	8c 93       	st	X, r24
}
if(pin==PD4 && state == HIGH)
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	84 30       	cpi	r24, 0x04	; 4
     c46:	51 f4       	brne	.+20     	; 0xc5c <GPIOPinWrite+0xf8>
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	39 f4       	brne	.+14     	; 0xc5c <GPIOPinWrite+0xf8>
{
    SET_BIT(PORTD,PD4);
     c4e:	ab e2       	ldi	r26, 0x2B	; 43
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	eb e2       	ldi	r30, 0x2B	; 43
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	80 61       	ori	r24, 0x10	; 16
     c5a:	8c 93       	st	X, r24
}
if(pin==PD4 && state == LOW)
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	51 f4       	brne	.+20     	; 0xc76 <GPIOPinWrite+0x112>
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	88 23       	and	r24, r24
     c66:	39 f4       	brne	.+14     	; 0xc76 <GPIOPinWrite+0x112>
{
    CLR_BIT(PORTD,PD4);
     c68:	ab e2       	ldi	r26, 0x2B	; 43
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	eb e2       	ldi	r30, 0x2B	; 43
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 7e       	andi	r24, 0xEF	; 239
     c74:	8c 93       	st	X, r24
}
if(pin==PD5 && state == HIGH)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	85 30       	cpi	r24, 0x05	; 5
     c7a:	51 f4       	brne	.+20     	; 0xc90 <GPIOPinWrite+0x12c>
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	39 f4       	brne	.+14     	; 0xc90 <GPIOPinWrite+0x12c>
{
    SET_BIT(PORTD,PD5);
     c82:	ab e2       	ldi	r26, 0x2B	; 43
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 62       	ori	r24, 0x20	; 32
     c8e:	8c 93       	st	X, r24
}
if(pin==PD5 && state == LOW)
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	51 f4       	brne	.+20     	; 0xcaa <GPIOPinWrite+0x146>
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	88 23       	and	r24, r24
     c9a:	39 f4       	brne	.+14     	; 0xcaa <GPIOPinWrite+0x146>
{
    CLR_BIT(PORTD,PD5);
     c9c:	ab e2       	ldi	r26, 0x2B	; 43
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	eb e2       	ldi	r30, 0x2B	; 43
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8f 7d       	andi	r24, 0xDF	; 223
     ca8:	8c 93       	st	X, r24
}

if(pin==PD6 && state == HIGH)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	86 30       	cpi	r24, 0x06	; 6
     cae:	51 f4       	brne	.+20     	; 0xcc4 <GPIOPinWrite+0x160>
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	39 f4       	brne	.+14     	; 0xcc4 <GPIOPinWrite+0x160>
{
    SET_BIT(PORTD,PD6);
     cb6:	ab e2       	ldi	r26, 0x2B	; 43
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	eb e2       	ldi	r30, 0x2B	; 43
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 64       	ori	r24, 0x40	; 64
     cc2:	8c 93       	st	X, r24
}
if(pin==PD6 && state == LOW)
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	86 30       	cpi	r24, 0x06	; 6
     cc8:	51 f4       	brne	.+20     	; 0xcde <GPIOPinWrite+0x17a>
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	88 23       	and	r24, r24
     cce:	39 f4       	brne	.+14     	; 0xcde <GPIOPinWrite+0x17a>
{
    CLR_BIT(PORTD,PD6);
     cd0:	ab e2       	ldi	r26, 0x2B	; 43
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	eb e2       	ldi	r30, 0x2B	; 43
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	8c 93       	st	X, r24
}
if(pin==PD7 && state == HIGH)
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	87 30       	cpi	r24, 0x07	; 7
     ce2:	51 f4       	brne	.+20     	; 0xcf8 <GPIOPinWrite+0x194>
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	39 f4       	brne	.+14     	; 0xcf8 <GPIOPinWrite+0x194>
{
    SET_BIT(PORTD,PD7);
     cea:	ab e2       	ldi	r26, 0x2B	; 43
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	eb e2       	ldi	r30, 0x2B	; 43
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	8c 93       	st	X, r24
}
if(pin==PD7 && state == LOW)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	87 30       	cpi	r24, 0x07	; 7
     cfc:	51 f4       	brne	.+20     	; 0xd12 <GPIOPinWrite+0x1ae>
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	88 23       	and	r24, r24
     d02:	39 f4       	brne	.+14     	; 0xd12 <GPIOPinWrite+0x1ae>
{
    CLR_BIT(PORTD,PD7);
     d04:	ab e2       	ldi	r26, 0x2B	; 43
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	eb e2       	ldi	r30, 0x2B	; 43
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 77       	andi	r24, 0x7F	; 127
     d10:	8c 93       	st	X, r24
}


// write low and high for port B pins
if(pin==PB0 && state == HIGH)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	88 23       	and	r24, r24
     d16:	51 f4       	brne	.+20     	; 0xd2c <GPIOPinWrite+0x1c8>
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	39 f4       	brne	.+14     	; 0xd2c <GPIOPinWrite+0x1c8>
{
    SET_BIT(PORTB,PB0);
     d1e:	a5 e2       	ldi	r26, 0x25	; 37
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e2       	ldi	r30, 0x25	; 37
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	8c 93       	st	X, r24
}
if(pin==PB0 && state == LOW)
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	88 23       	and	r24, r24
     d30:	51 f4       	brne	.+20     	; 0xd46 <GPIOPinWrite+0x1e2>
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	88 23       	and	r24, r24
     d36:	39 f4       	brne	.+14     	; 0xd46 <GPIOPinWrite+0x1e2>
{
    CLR_BIT(PORTB,PB0);
     d38:	a5 e2       	ldi	r26, 0x25	; 37
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e5 e2       	ldi	r30, 0x25	; 37
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	8c 93       	st	X, r24
}
if(pin==PB1 && state == HIGH)
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	51 f4       	brne	.+20     	; 0xd60 <GPIOPinWrite+0x1fc>
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	39 f4       	brne	.+14     	; 0xd60 <GPIOPinWrite+0x1fc>
{
    SET_BIT(PORTB,PB1);
     d52:	a5 e2       	ldi	r26, 0x25	; 37
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e5 e2       	ldi	r30, 0x25	; 37
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 60       	ori	r24, 0x02	; 2
     d5e:	8c 93       	st	X, r24
}
if(pin==PB1 && state == LOW)
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	51 f4       	brne	.+20     	; 0xd7a <GPIOPinWrite+0x216>
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	88 23       	and	r24, r24
     d6a:	39 f4       	brne	.+14     	; 0xd7a <GPIOPinWrite+0x216>
{
    CLR_BIT(PORTB,PB1);
     d6c:	a5 e2       	ldi	r26, 0x25	; 37
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e2       	ldi	r30, 0x25	; 37
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8d 7f       	andi	r24, 0xFD	; 253
     d78:	8c 93       	st	X, r24
}

if(pin==PB2 && state == HIGH)
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	51 f4       	brne	.+20     	; 0xd94 <GPIOPinWrite+0x230>
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	39 f4       	brne	.+14     	; 0xd94 <GPIOPinWrite+0x230>
{
    SET_BIT(PORTB,PB2);
     d86:	a5 e2       	ldi	r26, 0x25	; 37
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e2       	ldi	r30, 0x25	; 37
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	84 60       	ori	r24, 0x04	; 4
     d92:	8c 93       	st	X, r24
}
if(pin==PB2 && state == LOW)
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	51 f4       	brne	.+20     	; 0xdae <GPIOPinWrite+0x24a>
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 23       	and	r24, r24
     d9e:	39 f4       	brne	.+14     	; 0xdae <GPIOPinWrite+0x24a>
{
    CLR_BIT(PORTB,PB2);
     da0:	a5 e2       	ldi	r26, 0x25	; 37
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e2       	ldi	r30, 0x25	; 37
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	8c 93       	st	X, r24
}
if(pin==PB3 && state == HIGH)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	51 f4       	brne	.+20     	; 0xdc8 <GPIOPinWrite+0x264>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	39 f4       	brne	.+14     	; 0xdc8 <GPIOPinWrite+0x264>
{
    SET_BIT(PORTB,PB3);
     dba:	a5 e2       	ldi	r26, 0x25	; 37
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e2       	ldi	r30, 0x25	; 37
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	88 60       	ori	r24, 0x08	; 8
     dc6:	8c 93       	st	X, r24
}
if(pin==PB3 && state == LOW)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	51 f4       	brne	.+20     	; 0xde2 <GPIOPinWrite+0x27e>
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	88 23       	and	r24, r24
     dd2:	39 f4       	brne	.+14     	; 0xde2 <GPIOPinWrite+0x27e>
{
    CLR_BIT(PORTB,PB3);
     dd4:	a5 e2       	ldi	r26, 0x25	; 37
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e5 e2       	ldi	r30, 0x25	; 37
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	8c 93       	st	X, r24
}
if(pin==PB4 && state == HIGH)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	51 f4       	brne	.+20     	; 0xdfc <GPIOPinWrite+0x298>
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	39 f4       	brne	.+14     	; 0xdfc <GPIOPinWrite+0x298>
{
    SET_BIT(PORTB,PB4);
     dee:	a5 e2       	ldi	r26, 0x25	; 37
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e5 e2       	ldi	r30, 0x25	; 37
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	8c 93       	st	X, r24
}
if(pin==PB4 && state == LOW)
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	51 f4       	brne	.+20     	; 0xe16 <GPIOPinWrite+0x2b2>
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	88 23       	and	r24, r24
     e06:	39 f4       	brne	.+14     	; 0xe16 <GPIOPinWrite+0x2b2>
{
    CLR_BIT(PORTB,PB4);
     e08:	a5 e2       	ldi	r26, 0x25	; 37
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e2       	ldi	r30, 0x25	; 37
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	8c 93       	st	X, r24
}
if(pin==PB5 && state == HIGH)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	85 30       	cpi	r24, 0x05	; 5
     e1a:	51 f4       	brne	.+20     	; 0xe30 <GPIOPinWrite+0x2cc>
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	39 f4       	brne	.+14     	; 0xe30 <GPIOPinWrite+0x2cc>
{
    SET_BIT(PORTB,PB5);
     e22:	a5 e2       	ldi	r26, 0x25	; 37
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e2       	ldi	r30, 0x25	; 37
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 62       	ori	r24, 0x20	; 32
     e2e:	8c 93       	st	X, r24
}
if(pin==PB5 && state == LOW)
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	85 30       	cpi	r24, 0x05	; 5
     e34:	51 f4       	brne	.+20     	; 0xe4a <GPIOPinWrite+0x2e6>
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	88 23       	and	r24, r24
     e3a:	39 f4       	brne	.+14     	; 0xe4a <GPIOPinWrite+0x2e6>
{
    CLR_BIT(PORTB,PB5);
     e3c:	a5 e2       	ldi	r26, 0x25	; 37
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e2       	ldi	r30, 0x25	; 37
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7d       	andi	r24, 0xDF	; 223
     e48:	8c 93       	st	X, r24
}

if(pin==PB6 && state == HIGH)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	86 30       	cpi	r24, 0x06	; 6
     e4e:	51 f4       	brne	.+20     	; 0xe64 <GPIOPinWrite+0x300>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	39 f4       	brne	.+14     	; 0xe64 <GPIOPinWrite+0x300>
{
    SET_BIT(PORTB,PB6);
     e56:	a5 e2       	ldi	r26, 0x25	; 37
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e5 e2       	ldi	r30, 0x25	; 37
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	80 64       	ori	r24, 0x40	; 64
     e62:	8c 93       	st	X, r24
}
if(pin==PB6 && state == LOW)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	86 30       	cpi	r24, 0x06	; 6
     e68:	51 f4       	brne	.+20     	; 0xe7e <GPIOPinWrite+0x31a>
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	88 23       	and	r24, r24
     e6e:	39 f4       	brne	.+14     	; 0xe7e <GPIOPinWrite+0x31a>
{
    CLR_BIT(PORTB,PB6);
     e70:	a5 e2       	ldi	r26, 0x25	; 37
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e5 e2       	ldi	r30, 0x25	; 37
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 7b       	andi	r24, 0xBF	; 191
     e7c:	8c 93       	st	X, r24
}
if(pin==PB7 && state == HIGH)
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	87 30       	cpi	r24, 0x07	; 7
     e82:	51 f4       	brne	.+20     	; 0xe98 <GPIOPinWrite+0x334>
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	39 f4       	brne	.+14     	; 0xe98 <GPIOPinWrite+0x334>
{
    SET_BIT(PORTB,PB7);
     e8a:	a5 e2       	ldi	r26, 0x25	; 37
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e2       	ldi	r30, 0x25	; 37
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
if(pin==PB7 && state == LOW)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	87 30       	cpi	r24, 0x07	; 7
     e9c:	51 f4       	brne	.+20     	; 0xeb2 <GPIOPinWrite+0x34e>
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	88 23       	and	r24, r24
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <GPIOPinWrite+0x34e>
{
    CLR_BIT(PORTB,PB7);
     ea4:	a5 e2       	ldi	r26, 0x25	; 37
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e5 e2       	ldi	r30, 0x25	; 37
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8f 77       	andi	r24, 0x7F	; 127
     eb0:	8c 93       	st	X, r24
}

// PORT C pins
// write low and high for port C pins
if(pin==PC0 && state == HIGH)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	88 23       	and	r24, r24
     eb6:	51 f4       	brne	.+20     	; 0xecc <GPIOPinWrite+0x368>
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	39 f4       	brne	.+14     	; 0xecc <GPIOPinWrite+0x368>
{
    SET_BIT(PORTC,PC0);
     ebe:	a8 e2       	ldi	r26, 0x28	; 40
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e8 e2       	ldi	r30, 0x28	; 40
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	8c 93       	st	X, r24
}
if(pin==PC0 && state == LOW)
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	88 23       	and	r24, r24
     ed0:	51 f4       	brne	.+20     	; 0xee6 <GPIOPinWrite+0x382>
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	88 23       	and	r24, r24
     ed6:	39 f4       	brne	.+14     	; 0xee6 <GPIOPinWrite+0x382>
{
    CLR_BIT(PORTC,PC0);
     ed8:	a8 e2       	ldi	r26, 0x28	; 40
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e2       	ldi	r30, 0x28	; 40
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	8c 93       	st	X, r24
}
if(pin==PC1 && state == HIGH)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	51 f4       	brne	.+20     	; 0xf00 <GPIOPinWrite+0x39c>
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	39 f4       	brne	.+14     	; 0xf00 <GPIOPinWrite+0x39c>
{
    SET_BIT(PORTC,PC1);
     ef2:	a8 e2       	ldi	r26, 0x28	; 40
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e8 e2       	ldi	r30, 0x28	; 40
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	82 60       	ori	r24, 0x02	; 2
     efe:	8c 93       	st	X, r24
}
if(pin==PC1 && state == LOW)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	51 f4       	brne	.+20     	; 0xf1a <GPIOPinWrite+0x3b6>
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	88 23       	and	r24, r24
     f0a:	39 f4       	brne	.+14     	; 0xf1a <GPIOPinWrite+0x3b6>
{
    CLR_BIT(PORTC,PC1);
     f0c:	a8 e2       	ldi	r26, 0x28	; 40
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e2       	ldi	r30, 0x28	; 40
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8d 7f       	andi	r24, 0xFD	; 253
     f18:	8c 93       	st	X, r24
}

if(pin==PC2 && state == HIGH)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	51 f4       	brne	.+20     	; 0xf34 <GPIOPinWrite+0x3d0>
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	39 f4       	brne	.+14     	; 0xf34 <GPIOPinWrite+0x3d0>
{
    SET_BIT(PORTC,PC2);
     f26:	a8 e2       	ldi	r26, 0x28	; 40
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e8 e2       	ldi	r30, 0x28	; 40
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	8c 93       	st	X, r24
}
if(pin==PC2 && state == LOW)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	51 f4       	brne	.+20     	; 0xf4e <GPIOPinWrite+0x3ea>
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	88 23       	and	r24, r24
     f3e:	39 f4       	brne	.+14     	; 0xf4e <GPIOPinWrite+0x3ea>
{
    CLR_BIT(PORTC,PC2);
     f40:	a8 e2       	ldi	r26, 0x28	; 40
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e8 e2       	ldi	r30, 0x28	; 40
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8b 7f       	andi	r24, 0xFB	; 251
     f4c:	8c 93       	st	X, r24
}
if(pin==PC3 && state == HIGH)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	51 f4       	brne	.+20     	; 0xf68 <GPIOPinWrite+0x404>
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	39 f4       	brne	.+14     	; 0xf68 <GPIOPinWrite+0x404>
{
    SET_BIT(PORTC,PC3);
     f5a:	a8 e2       	ldi	r26, 0x28	; 40
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e2       	ldi	r30, 0x28	; 40
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	8c 93       	st	X, r24
}
if(pin==PC3 && state == LOW)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	51 f4       	brne	.+20     	; 0xf82 <GPIOPinWrite+0x41e>
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 23       	and	r24, r24
     f72:	39 f4       	brne	.+14     	; 0xf82 <GPIOPinWrite+0x41e>
{
    CLR_BIT(PORTC,PC3);
     f74:	a8 e2       	ldi	r26, 0x28	; 40
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e8 e2       	ldi	r30, 0x28	; 40
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	8c 93       	st	X, r24
}
if(pin==PC4 && state == HIGH)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	51 f4       	brne	.+20     	; 0xf9c <GPIOPinWrite+0x438>
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	39 f4       	brne	.+14     	; 0xf9c <GPIOPinWrite+0x438>
{
    SET_BIT(PORTC,PC4);
     f8e:	a8 e2       	ldi	r26, 0x28	; 40
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e2       	ldi	r30, 0x28	; 40
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 61       	ori	r24, 0x10	; 16
     f9a:	8c 93       	st	X, r24
}
if(pin==PC4 && state == LOW)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	51 f4       	brne	.+20     	; 0xfb6 <GPIOPinWrite+0x452>
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 23       	and	r24, r24
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <GPIOPinWrite+0x452>
{
    CLR_BIT(PORTC,PC4);
     fa8:	a8 e2       	ldi	r26, 0x28	; 40
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e2       	ldi	r30, 0x28	; 40
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7e       	andi	r24, 0xEF	; 239
     fb4:	8c 93       	st	X, r24
}
if(pin==PC5 && state == HIGH)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	85 30       	cpi	r24, 0x05	; 5
     fba:	51 f4       	brne	.+20     	; 0xfd0 <GPIOPinWrite+0x46c>
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	39 f4       	brne	.+14     	; 0xfd0 <GPIOPinWrite+0x46c>
{
    SET_BIT(PORTC,PC5);
     fc2:	a8 e2       	ldi	r26, 0x28	; 40
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e2       	ldi	r30, 0x28	; 40
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	8c 93       	st	X, r24
}
if(pin==PC5 && state == LOW)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	85 30       	cpi	r24, 0x05	; 5
     fd4:	51 f4       	brne	.+20     	; 0xfea <GPIOPinWrite+0x486>
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 23       	and	r24, r24
     fda:	39 f4       	brne	.+14     	; 0xfea <GPIOPinWrite+0x486>
{
    CLR_BIT(PORTC,PC5);
     fdc:	a8 e2       	ldi	r26, 0x28	; 40
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e2       	ldi	r30, 0x28	; 40
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7d       	andi	r24, 0xDF	; 223
     fe8:	8c 93       	st	X, r24
}
if(pin==PC6 && state == HIGH)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	86 30       	cpi	r24, 0x06	; 6
     fee:	51 f4       	brne	.+20     	; 0x1004 <GPIOPinWrite+0x4a0>
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	39 f4       	brne	.+14     	; 0x1004 <GPIOPinWrite+0x4a0>
{
    SET_BIT(PORTC,PC6);
     ff6:	a8 e2       	ldi	r26, 0x28	; 40
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e8 e2       	ldi	r30, 0x28	; 40
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	8c 93       	st	X, r24
}
if(pin==PC6 && state == LOW)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	86 30       	cpi	r24, 0x06	; 6
    1008:	51 f4       	brne	.+20     	; 0x101e <GPIOPinWrite+0x4ba>
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	88 23       	and	r24, r24
    100e:	39 f4       	brne	.+14     	; 0x101e <GPIOPinWrite+0x4ba>
{
    CLR_BIT(PORTC,PC6);
    1010:	a8 e2       	ldi	r26, 0x28	; 40
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e8 e2       	ldi	r30, 0x28	; 40
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8f 7b       	andi	r24, 0xBF	; 191
    101c:	8c 93       	st	X, r24
}


}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <main>:
/******************************************************************************
* Name:
* Description:
******************************************************************************/
int main(void)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	e8 97       	sbiw	r28, 0x38	; 56
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61

GPIOConfig(PD7,OUTPUT);
    103c:	87 e0       	ldi	r24, 0x07	; 7
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	0e 94 4b 00 	call	0x96	; 0x96 <GPIOConfig>
GPIOConfig(PD3,OUTPUT);
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	0e 94 4b 00 	call	0x96	; 0x96 <GPIOConfig>
GPIOConfig(PD2,INPUT);
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	0e 94 4b 00 	call	0x96	; 0x96 <GPIOConfig>
GPIOConfig(PD0,INPUT);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	0e 94 4b 00 	call	0x96	; 0x96 <GPIOConfig>
//PULL and PULL down
GPIOPinWrite(PD2,LOW);//Pull down
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
//GPIOPinWrite(PD2,HIGH);//Pull up
GPIOPinWrite(PD0,LOW);//Pull down
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>

while(1)
{

if(GPIOPinRead(PD0)==0  && GPIOPinRead(PD2)== 0)
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    1072:	88 23       	and	r24, r24
    1074:	71 f4       	brne	.+28     	; 0x1092 <main+0x6a>
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    107c:	88 23       	and	r24, r24
    107e:	49 f4       	brne	.+18     	; 0x1092 <main+0x6a>
{
    GPIOPinWrite(PD3,LOW);
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    GPIOPinWrite(PD7,LOW);
    1088:	87 e0       	ldi	r24, 0x07	; 7
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    1090:	ed cf       	rjmp	.-38     	; 0x106c <main+0x44>

}
else if(GPIOPinRead(PD0)==0  && GPIOPinRead(PD2)== 1)
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    1098:	88 23       	and	r24, r24
    109a:	71 f4       	brne	.+28     	; 0x10b8 <main+0x90>
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	49 f4       	brne	.+18     	; 0x10b8 <main+0x90>
{
    GPIOPinWrite(PD3,LOW);
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    GPIOPinWrite(PD7,HIGH);
    10ae:	87 e0       	ldi	r24, 0x07	; 7
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    10b6:	da cf       	rjmp	.-76     	; 0x106c <main+0x44>

}
else if(GPIOPinRead(PD0)==1  && GPIOPinRead(PD2)== 0)
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	71 f4       	brne	.+28     	; 0x10de <main+0xb6>
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    10c8:	88 23       	and	r24, r24
    10ca:	49 f4       	brne	.+18     	; 0x10de <main+0xb6>
{
    GPIOPinWrite(PD3,HIGH);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    GPIOPinWrite(PD7,LOW);
    10d4:	87 e0       	ldi	r24, 0x07	; 7
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    10dc:	c7 cf       	rjmp	.-114    	; 0x106c <main+0x44>

}
else if(GPIOPinRead(PD0)==1  && GPIOPinRead(PD2)== 1)
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <main+0xc2>
    10e8:	df c1       	rjmp	.+958    	; 0x14a8 <main+0x480>
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <GPIOPinRead>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <main+0xce>
    10f4:	d9 c1       	rjmp	.+946    	; 0x14a8 <main+0x480>
{

        GPIOPinWrite(PD7,HIGH);
    10f6:	87 e0       	ldi	r24, 0x07	; 7
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	aa e7       	ldi	r26, 0x7A	; 122
    1104:	b4 e4       	ldi	r27, 0x44	; 68
    1106:	8d ab       	std	Y+53, r24	; 0x35
    1108:	9e ab       	std	Y+54, r25	; 0x36
    110a:	af ab       	std	Y+55, r26	; 0x37
    110c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110e:	6d a9       	ldd	r22, Y+53	; 0x35
    1110:	7e a9       	ldd	r23, Y+54	; 0x36
    1112:	8f a9       	ldd	r24, Y+55	; 0x37
    1114:	98 ad       	ldd	r25, Y+56	; 0x38
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a e7       	ldi	r20, 0x7A	; 122
    111c:	55 e4       	ldi	r21, 0x45	; 69
    111e:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	89 ab       	std	Y+49, r24	; 0x31
    1128:	9a ab       	std	Y+50, r25	; 0x32
    112a:	ab ab       	std	Y+51, r26	; 0x33
    112c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    112e:	69 a9       	ldd	r22, Y+49	; 0x31
    1130:	7a a9       	ldd	r23, Y+50	; 0x32
    1132:	8b a9       	ldd	r24, Y+51	; 0x33
    1134:	9c a9       	ldd	r25, Y+52	; 0x34
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ltsf2>
    1142:	88 23       	and	r24, r24
    1144:	2c f4       	brge	.+10     	; 0x1150 <main+0x128>
		__ticks = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	98 ab       	std	Y+48, r25	; 0x30
    114c:	8f a7       	std	Y+47, r24	; 0x2f
    114e:	3f c0       	rjmp	.+126    	; 0x11ce <main+0x1a6>
	else if (__tmp > 65535)
    1150:	69 a9       	ldd	r22, Y+49	; 0x31
    1152:	7a a9       	ldd	r23, Y+50	; 0x32
    1154:	8b a9       	ldd	r24, Y+51	; 0x33
    1156:	9c a9       	ldd	r25, Y+52	; 0x34
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	57 e4       	ldi	r21, 0x47	; 71
    1160:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__gtsf2>
    1164:	18 16       	cp	r1, r24
    1166:	4c f5       	brge	.+82     	; 0x11ba <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1168:	6d a9       	ldd	r22, Y+53	; 0x35
    116a:	7e a9       	ldd	r23, Y+54	; 0x36
    116c:	8f a9       	ldd	r24, Y+55	; 0x37
    116e:	98 ad       	ldd	r25, Y+56	; 0x38
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	98 ab       	std	Y+48, r25	; 0x30
    118e:	8f a7       	std	Y+47, r24	; 0x2f
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <main+0x188>
    1192:	80 e9       	ldi	r24, 0x90	; 144
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	9e a7       	std	Y+46, r25	; 0x2e
    1198:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    119a:	8d a5       	ldd	r24, Y+45	; 0x2d
    119c:	9e a5       	ldd	r25, Y+46	; 0x2e
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <main+0x176>
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a8:	98 a9       	ldd	r25, Y+48	; 0x30
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	98 ab       	std	Y+48, r25	; 0x30
    11ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b2:	98 a9       	ldd	r25, Y+48	; 0x30
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f7       	brne	.-38     	; 0x1192 <main+0x16a>
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ba:	69 a9       	ldd	r22, Y+49	; 0x31
    11bc:	7a a9       	ldd	r23, Y+50	; 0x32
    11be:	8b a9       	ldd	r24, Y+51	; 0x33
    11c0:	9c a9       	ldd	r25, Y+52	; 0x34
    11c2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	98 ab       	std	Y+48, r25	; 0x30
    11cc:	8f a7       	std	Y+47, r24	; 0x2f
    11ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d0:	98 a9       	ldd	r25, Y+48	; 0x30
    11d2:	9c a7       	std	Y+44, r25	; 0x2c
    11d4:	8b a7       	std	Y+43, r24	; 0x2b
    11d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <main+0x1b2>
    11de:	9c a7       	std	Y+44, r25	; 0x2c
    11e0:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1000);
        GPIOPinWrite(PD7,LOW);
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	aa e7       	ldi	r26, 0x7A	; 122
    11f0:	b4 e4       	ldi	r27, 0x44	; 68
    11f2:	8f a3       	std	Y+39, r24	; 0x27
    11f4:	98 a7       	std	Y+40, r25	; 0x28
    11f6:	a9 a7       	std	Y+41, r26	; 0x29
    11f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	6f a1       	ldd	r22, Y+39	; 0x27
    11fc:	78 a5       	ldd	r23, Y+40	; 0x28
    11fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1200:	9a a5       	ldd	r25, Y+42	; 0x2a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a e7       	ldi	r20, 0x7A	; 122
    1208:	55 e4       	ldi	r21, 0x45	; 69
    120a:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8b a3       	std	Y+35, r24	; 0x23
    1214:	9c a3       	std	Y+36, r25	; 0x24
    1216:	ad a3       	std	Y+37, r26	; 0x25
    1218:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    121a:	6b a1       	ldd	r22, Y+35	; 0x23
    121c:	7c a1       	ldd	r23, Y+36	; 0x24
    121e:	8d a1       	ldd	r24, Y+37	; 0x25
    1220:	9e a1       	ldd	r25, Y+38	; 0x26
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <main+0x214>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9a a3       	std	Y+34, r25	; 0x22
    1238:	89 a3       	std	Y+33, r24	; 0x21
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <main+0x292>
	else if (__tmp > 65535)
    123c:	6b a1       	ldd	r22, Y+35	; 0x23
    123e:	7c a1       	ldd	r23, Y+36	; 0x24
    1240:	8d a1       	ldd	r24, Y+37	; 0x25
    1242:	9e a1       	ldd	r25, Y+38	; 0x26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__gtsf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <main+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	6f a1       	ldd	r22, Y+39	; 0x27
    1256:	78 a5       	ldd	r23, Y+40	; 0x28
    1258:	89 a5       	ldd	r24, Y+41	; 0x29
    125a:	9a a5       	ldd	r25, Y+42	; 0x2a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9a a3       	std	Y+34, r25	; 0x22
    127a:	89 a3       	std	Y+33, r24	; 0x21
    127c:	0f c0       	rjmp	.+30     	; 0x129c <main+0x274>
    127e:	80 e9       	ldi	r24, 0x90	; 144
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	98 a3       	std	Y+32, r25	; 0x20
    1284:	8f 8f       	std	Y+31, r24	; 0x1f
    1286:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1288:	98 a1       	ldd	r25, Y+32	; 0x20
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <main+0x262>
    128e:	98 a3       	std	Y+32, r25	; 0x20
    1290:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	89 a1       	ldd	r24, Y+33	; 0x21
    1294:	9a a1       	ldd	r25, Y+34	; 0x22
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	89 a1       	ldd	r24, Y+33	; 0x21
    129e:	9a a1       	ldd	r25, Y+34	; 0x22
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <main+0x256>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <main+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6b a1       	ldd	r22, Y+35	; 0x23
    12a8:	7c a1       	ldd	r23, Y+36	; 0x24
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9a a3       	std	Y+34, r25	; 0x22
    12b8:	89 a3       	std	Y+33, r24	; 0x21
    12ba:	89 a1       	ldd	r24, Y+33	; 0x21
    12bc:	9a a1       	ldd	r25, Y+34	; 0x22
    12be:	9e 8f       	std	Y+30, r25	; 0x1e
    12c0:	8d 8f       	std	Y+29, r24	; 0x1d
    12c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <main+0x29e>
    12ca:	9e 8f       	std	Y+30, r25	; 0x1e
    12cc:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1000);
        GPIOPinWrite(PD3,HIGH);
    12ce:	83 e0       	ldi	r24, 0x03	; 3
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	aa e7       	ldi	r26, 0x7A	; 122
    12dc:	b4 e4       	ldi	r27, 0x44	; 68
    12de:	89 8f       	std	Y+25, r24	; 0x19
    12e0:	9a 8f       	std	Y+26, r25	; 0x1a
    12e2:	ab 8f       	std	Y+27, r26	; 0x1b
    12e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	69 8d       	ldd	r22, Y+25	; 0x19
    12e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	4a e7       	ldi	r20, 0x7A	; 122
    12f4:	55 e4       	ldi	r21, 0x45	; 69
    12f6:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	8d 8b       	std	Y+21, r24	; 0x15
    1300:	9e 8b       	std	Y+22, r25	; 0x16
    1302:	af 8b       	std	Y+23, r26	; 0x17
    1304:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	5f e3       	ldi	r21, 0x3F	; 63
    1316:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ltsf2>
    131a:	88 23       	and	r24, r24
    131c:	2c f4       	brge	.+10     	; 0x1328 <main+0x300>
		__ticks = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
    1326:	3f c0       	rjmp	.+126    	; 0x13a6 <main+0x37e>
	else if (__tmp > 65535)
    1328:	6d 89       	ldd	r22, Y+21	; 0x15
    132a:	7e 89       	ldd	r23, Y+22	; 0x16
    132c:	8f 89       	ldd	r24, Y+23	; 0x17
    132e:	98 8d       	ldd	r25, Y+24	; 0x18
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	3f ef       	ldi	r19, 0xFF	; 255
    1334:	4f e7       	ldi	r20, 0x7F	; 127
    1336:	57 e4       	ldi	r21, 0x47	; 71
    1338:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__gtsf2>
    133c:	18 16       	cp	r1, r24
    133e:	4c f5       	brge	.+82     	; 0x1392 <main+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1340:	69 8d       	ldd	r22, Y+25	; 0x19
    1342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e2       	ldi	r20, 0x20	; 32
    134e:	51 e4       	ldi	r21, 0x41	; 65
    1350:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9c 8b       	std	Y+20, r25	; 0x14
    1366:	8b 8b       	std	Y+19, r24	; 0x13
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <main+0x360>
    136a:	80 e9       	ldi	r24, 0x90	; 144
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	9a 8b       	std	Y+18, r25	; 0x12
    1370:	89 8b       	std	Y+17, r24	; 0x11
    1372:	89 89       	ldd	r24, Y+17	; 0x11
    1374:	9a 89       	ldd	r25, Y+18	; 0x12
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <main+0x34e>
    137a:	9a 8b       	std	Y+18, r25	; 0x12
    137c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	8b 89       	ldd	r24, Y+19	; 0x13
    1380:	9c 89       	ldd	r25, Y+20	; 0x14
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	8b 89       	ldd	r24, Y+19	; 0x13
    138a:	9c 89       	ldd	r25, Y+20	; 0x14
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	69 f7       	brne	.-38     	; 0x136a <main+0x342>
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <main+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	6d 89       	ldd	r22, Y+21	; 0x15
    1394:	7e 89       	ldd	r23, Y+22	; 0x16
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9c 8b       	std	Y+20, r25	; 0x14
    13a4:	8b 8b       	std	Y+19, r24	; 0x13
    13a6:	8b 89       	ldd	r24, Y+19	; 0x13
    13a8:	9c 89       	ldd	r25, Y+20	; 0x14
    13aa:	98 8b       	std	Y+16, r25	; 0x10
    13ac:	8f 87       	std	Y+15, r24	; 0x0f
    13ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b0:	98 89       	ldd	r25, Y+16	; 0x10
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x38a>
    13b6:	98 8b       	std	Y+16, r25	; 0x10
    13b8:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1000);
        GPIOPinWrite(PD3,LOW);
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	aa e7       	ldi	r26, 0x7A	; 122
    13c8:	b4 e4       	ldi	r27, 0x44	; 68
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	55 e4       	ldi	r21, 0x45	; 69
    13e2:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <main+0x3ec>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <main+0x46a>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <main+0x44c>
    1456:	80 e9       	ldi	r24, 0x90	; 144
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <main+0x43a>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <main+0x42e>
    147c:	f7 cd       	rjmp	.-1042   	; 0x106c <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <main+0x476>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	e2 cd       	rjmp	.-1084   	; 0x106c <main+0x44>
        _delay_ms(1000);

}
else
{
     GPIOPinWrite(PD7,LOW);
    14a8:	87 e0       	ldi	r24, 0x07	; 7
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
     GPIOPinWrite(PD3,LOW);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPIOPinWrite>
    14b8:	d9 cd       	rjmp	.-1102   	; 0x106c <main+0x44>

000014ba <__fixunssfsi>:
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	7b 01       	movw	r14, r22
    14c4:	8c 01       	movw	r16, r24
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	5f e4       	ldi	r21, 0x4F	; 79
    14ce:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gesf2>
    14d2:	88 23       	and	r24, r24
    14d4:	8c f0       	brlt	.+34     	; 0x14f8 <__fixunssfsi+0x3e>
    14d6:	c8 01       	movw	r24, r16
    14d8:	b7 01       	movw	r22, r14
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	5f e4       	ldi	r21, 0x4F	; 79
    14e2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__subsf3>
    14e6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__fixsfsi>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	20 50       	subi	r18, 0x00	; 0
    14f0:	30 40       	sbci	r19, 0x00	; 0
    14f2:	40 40       	sbci	r20, 0x00	; 0
    14f4:	50 48       	sbci	r21, 0x80	; 128
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <__fixunssfsi+0x4a>
    14f8:	c8 01       	movw	r24, r16
    14fa:	b7 01       	movw	r22, r14
    14fc:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__fixsfsi>
    1500:	9b 01       	movw	r18, r22
    1502:	ac 01       	movw	r20, r24
    1504:	b9 01       	movw	r22, r18
    1506:	ca 01       	movw	r24, r20
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	08 95       	ret

00001512 <_fpadd_parts>:
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ef e8       	ldi	r30, 0x8F	; 143
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
    151e:	dc 01       	movw	r26, r24
    1520:	2b 01       	movw	r4, r22
    1522:	fa 01       	movw	r30, r20
    1524:	9c 91       	ld	r25, X
    1526:	92 30       	cpi	r25, 0x02	; 2
    1528:	08 f4       	brcc	.+2      	; 0x152c <_fpadd_parts+0x1a>
    152a:	39 c1       	rjmp	.+626    	; 0x179e <_fpadd_parts+0x28c>
    152c:	eb 01       	movw	r28, r22
    152e:	88 81       	ld	r24, Y
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	08 f4       	brcc	.+2      	; 0x1536 <_fpadd_parts+0x24>
    1534:	33 c1       	rjmp	.+614    	; 0x179c <_fpadd_parts+0x28a>
    1536:	94 30       	cpi	r25, 0x04	; 4
    1538:	69 f4       	brne	.+26     	; 0x1554 <_fpadd_parts+0x42>
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	09 f0       	breq	.+2      	; 0x1540 <_fpadd_parts+0x2e>
    153e:	2f c1       	rjmp	.+606    	; 0x179e <_fpadd_parts+0x28c>
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	9c 91       	ld	r25, X
    1544:	11 97       	sbiw	r26, 0x01	; 1
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	98 17       	cp	r25, r24
    154a:	09 f4       	brne	.+2      	; 0x154e <_fpadd_parts+0x3c>
    154c:	28 c1       	rjmp	.+592    	; 0x179e <_fpadd_parts+0x28c>
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b1 e0       	ldi	r27, 0x01	; 1
    1552:	25 c1       	rjmp	.+586    	; 0x179e <_fpadd_parts+0x28c>
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	09 f4       	brne	.+2      	; 0x155a <_fpadd_parts+0x48>
    1558:	21 c1       	rjmp	.+578    	; 0x179c <_fpadd_parts+0x28a>
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	a9 f4       	brne	.+42     	; 0x1588 <_fpadd_parts+0x76>
    155e:	92 30       	cpi	r25, 0x02	; 2
    1560:	09 f0       	breq	.+2      	; 0x1564 <_fpadd_parts+0x52>
    1562:	1d c1       	rjmp	.+570    	; 0x179e <_fpadd_parts+0x28c>
    1564:	9a 01       	movw	r18, r20
    1566:	ad 01       	movw	r20, r26
    1568:	88 e0       	ldi	r24, 0x08	; 8
    156a:	ea 01       	movw	r28, r20
    156c:	09 90       	ld	r0, Y+
    156e:	ae 01       	movw	r20, r28
    1570:	e9 01       	movw	r28, r18
    1572:	09 92       	st	Y+, r0
    1574:	9e 01       	movw	r18, r28
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	c1 f7       	brne	.-16     	; 0x156a <_fpadd_parts+0x58>
    157a:	e2 01       	movw	r28, r4
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	11 96       	adiw	r26, 0x01	; 1
    1580:	9c 91       	ld	r25, X
    1582:	89 23       	and	r24, r25
    1584:	81 83       	std	Z+1, r24	; 0x01
    1586:	08 c1       	rjmp	.+528    	; 0x1798 <_fpadd_parts+0x286>
    1588:	92 30       	cpi	r25, 0x02	; 2
    158a:	09 f4       	brne	.+2      	; 0x158e <_fpadd_parts+0x7c>
    158c:	07 c1       	rjmp	.+526    	; 0x179c <_fpadd_parts+0x28a>
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	2d 90       	ld	r2, X+
    1592:	3c 90       	ld	r3, X
    1594:	13 97       	sbiw	r26, 0x03	; 3
    1596:	eb 01       	movw	r28, r22
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	14 96       	adiw	r26, 0x04	; 4
    159e:	ad 90       	ld	r10, X+
    15a0:	bd 90       	ld	r11, X+
    15a2:	cd 90       	ld	r12, X+
    15a4:	dc 90       	ld	r13, X
    15a6:	17 97       	sbiw	r26, 0x07	; 7
    15a8:	ec 80       	ldd	r14, Y+4	; 0x04
    15aa:	fd 80       	ldd	r15, Y+5	; 0x05
    15ac:	0e 81       	ldd	r16, Y+6	; 0x06
    15ae:	1f 81       	ldd	r17, Y+7	; 0x07
    15b0:	91 01       	movw	r18, r2
    15b2:	28 1b       	sub	r18, r24
    15b4:	39 0b       	sbc	r19, r25
    15b6:	b9 01       	movw	r22, r18
    15b8:	37 ff       	sbrs	r19, 7
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <_fpadd_parts+0xb2>
    15bc:	66 27       	eor	r22, r22
    15be:	77 27       	eor	r23, r23
    15c0:	62 1b       	sub	r22, r18
    15c2:	73 0b       	sbc	r23, r19
    15c4:	60 32       	cpi	r22, 0x20	; 32
    15c6:	71 05       	cpc	r23, r1
    15c8:	0c f0       	brlt	.+2      	; 0x15cc <_fpadd_parts+0xba>
    15ca:	61 c0       	rjmp	.+194    	; 0x168e <_fpadd_parts+0x17c>
    15cc:	12 16       	cp	r1, r18
    15ce:	13 06       	cpc	r1, r19
    15d0:	6c f5       	brge	.+90     	; 0x162c <_fpadd_parts+0x11a>
    15d2:	37 01       	movw	r6, r14
    15d4:	48 01       	movw	r8, r16
    15d6:	06 2e       	mov	r0, r22
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <_fpadd_parts+0xd0>
    15da:	96 94       	lsr	r9
    15dc:	87 94       	ror	r8
    15de:	77 94       	ror	r7
    15e0:	67 94       	ror	r6
    15e2:	0a 94       	dec	r0
    15e4:	d2 f7       	brpl	.-12     	; 0x15da <_fpadd_parts+0xc8>
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <_fpadd_parts+0xe6>
    15f0:	22 0f       	add	r18, r18
    15f2:	33 1f       	adc	r19, r19
    15f4:	44 1f       	adc	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	6a 95       	dec	r22
    15fa:	d2 f7       	brpl	.-12     	; 0x15f0 <_fpadd_parts+0xde>
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	30 40       	sbci	r19, 0x00	; 0
    1600:	40 40       	sbci	r20, 0x00	; 0
    1602:	50 40       	sbci	r21, 0x00	; 0
    1604:	2e 21       	and	r18, r14
    1606:	3f 21       	and	r19, r15
    1608:	40 23       	and	r20, r16
    160a:	51 23       	and	r21, r17
    160c:	21 15       	cp	r18, r1
    160e:	31 05       	cpc	r19, r1
    1610:	41 05       	cpc	r20, r1
    1612:	51 05       	cpc	r21, r1
    1614:	21 f0       	breq	.+8      	; 0x161e <_fpadd_parts+0x10c>
    1616:	21 e0       	ldi	r18, 0x01	; 1
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	79 01       	movw	r14, r18
    1620:	8a 01       	movw	r16, r20
    1622:	e6 28       	or	r14, r6
    1624:	f7 28       	or	r15, r7
    1626:	08 29       	or	r16, r8
    1628:	19 29       	or	r17, r9
    162a:	3c c0       	rjmp	.+120    	; 0x16a4 <_fpadd_parts+0x192>
    162c:	23 2b       	or	r18, r19
    162e:	d1 f1       	breq	.+116    	; 0x16a4 <_fpadd_parts+0x192>
    1630:	26 0e       	add	r2, r22
    1632:	37 1e       	adc	r3, r23
    1634:	35 01       	movw	r6, r10
    1636:	46 01       	movw	r8, r12
    1638:	06 2e       	mov	r0, r22
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <_fpadd_parts+0x132>
    163c:	96 94       	lsr	r9
    163e:	87 94       	ror	r8
    1640:	77 94       	ror	r7
    1642:	67 94       	ror	r6
    1644:	0a 94       	dec	r0
    1646:	d2 f7       	brpl	.-12     	; 0x163c <_fpadd_parts+0x12a>
    1648:	21 e0       	ldi	r18, 0x01	; 1
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	04 c0       	rjmp	.+8      	; 0x165a <_fpadd_parts+0x148>
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	44 1f       	adc	r20, r20
    1658:	55 1f       	adc	r21, r21
    165a:	6a 95       	dec	r22
    165c:	d2 f7       	brpl	.-12     	; 0x1652 <_fpadd_parts+0x140>
    165e:	21 50       	subi	r18, 0x01	; 1
    1660:	30 40       	sbci	r19, 0x00	; 0
    1662:	40 40       	sbci	r20, 0x00	; 0
    1664:	50 40       	sbci	r21, 0x00	; 0
    1666:	2a 21       	and	r18, r10
    1668:	3b 21       	and	r19, r11
    166a:	4c 21       	and	r20, r12
    166c:	5d 21       	and	r21, r13
    166e:	21 15       	cp	r18, r1
    1670:	31 05       	cpc	r19, r1
    1672:	41 05       	cpc	r20, r1
    1674:	51 05       	cpc	r21, r1
    1676:	21 f0       	breq	.+8      	; 0x1680 <_fpadd_parts+0x16e>
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	59 01       	movw	r10, r18
    1682:	6a 01       	movw	r12, r20
    1684:	a6 28       	or	r10, r6
    1686:	b7 28       	or	r11, r7
    1688:	c8 28       	or	r12, r8
    168a:	d9 28       	or	r13, r9
    168c:	0b c0       	rjmp	.+22     	; 0x16a4 <_fpadd_parts+0x192>
    168e:	82 15       	cp	r24, r2
    1690:	93 05       	cpc	r25, r3
    1692:	2c f0       	brlt	.+10     	; 0x169e <_fpadd_parts+0x18c>
    1694:	1c 01       	movw	r2, r24
    1696:	aa 24       	eor	r10, r10
    1698:	bb 24       	eor	r11, r11
    169a:	65 01       	movw	r12, r10
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <_fpadd_parts+0x192>
    169e:	ee 24       	eor	r14, r14
    16a0:	ff 24       	eor	r15, r15
    16a2:	87 01       	movw	r16, r14
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	9c 91       	ld	r25, X
    16a8:	d2 01       	movw	r26, r4
    16aa:	11 96       	adiw	r26, 0x01	; 1
    16ac:	8c 91       	ld	r24, X
    16ae:	98 17       	cp	r25, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <_fpadd_parts+0x1a2>
    16b2:	45 c0       	rjmp	.+138    	; 0x173e <_fpadd_parts+0x22c>
    16b4:	99 23       	and	r25, r25
    16b6:	39 f0       	breq	.+14     	; 0x16c6 <_fpadd_parts+0x1b4>
    16b8:	a8 01       	movw	r20, r16
    16ba:	97 01       	movw	r18, r14
    16bc:	2a 19       	sub	r18, r10
    16be:	3b 09       	sbc	r19, r11
    16c0:	4c 09       	sbc	r20, r12
    16c2:	5d 09       	sbc	r21, r13
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <_fpadd_parts+0x1c0>
    16c6:	a6 01       	movw	r20, r12
    16c8:	95 01       	movw	r18, r10
    16ca:	2e 19       	sub	r18, r14
    16cc:	3f 09       	sbc	r19, r15
    16ce:	40 0b       	sbc	r20, r16
    16d0:	51 0b       	sbc	r21, r17
    16d2:	57 fd       	sbrc	r21, 7
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <_fpadd_parts+0x1d4>
    16d6:	11 82       	std	Z+1, r1	; 0x01
    16d8:	33 82       	std	Z+3, r3	; 0x03
    16da:	22 82       	std	Z+2, r2	; 0x02
    16dc:	24 83       	std	Z+4, r18	; 0x04
    16de:	35 83       	std	Z+5, r19	; 0x05
    16e0:	46 83       	std	Z+6, r20	; 0x06
    16e2:	57 83       	std	Z+7, r21	; 0x07
    16e4:	1d c0       	rjmp	.+58     	; 0x1720 <_fpadd_parts+0x20e>
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	81 83       	std	Z+1, r24	; 0x01
    16ea:	33 82       	std	Z+3, r3	; 0x03
    16ec:	22 82       	std	Z+2, r2	; 0x02
    16ee:	88 27       	eor	r24, r24
    16f0:	99 27       	eor	r25, r25
    16f2:	dc 01       	movw	r26, r24
    16f4:	82 1b       	sub	r24, r18
    16f6:	93 0b       	sbc	r25, r19
    16f8:	a4 0b       	sbc	r26, r20
    16fa:	b5 0b       	sbc	r27, r21
    16fc:	84 83       	std	Z+4, r24	; 0x04
    16fe:	95 83       	std	Z+5, r25	; 0x05
    1700:	a6 83       	std	Z+6, r26	; 0x06
    1702:	b7 83       	std	Z+7, r27	; 0x07
    1704:	0d c0       	rjmp	.+26     	; 0x1720 <_fpadd_parts+0x20e>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	24 83       	std	Z+4, r18	; 0x04
    1710:	35 83       	std	Z+5, r19	; 0x05
    1712:	46 83       	std	Z+6, r20	; 0x06
    1714:	57 83       	std	Z+7, r21	; 0x07
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	93 83       	std	Z+3, r25	; 0x03
    171e:	82 83       	std	Z+2, r24	; 0x02
    1720:	24 81       	ldd	r18, Z+4	; 0x04
    1722:	35 81       	ldd	r19, Z+5	; 0x05
    1724:	46 81       	ldd	r20, Z+6	; 0x06
    1726:	57 81       	ldd	r21, Z+7	; 0x07
    1728:	da 01       	movw	r26, r20
    172a:	c9 01       	movw	r24, r18
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	a1 09       	sbc	r26, r1
    1730:	b1 09       	sbc	r27, r1
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	af 4f       	sbci	r26, 0xFF	; 255
    1738:	bf 43       	sbci	r27, 0x3F	; 63
    173a:	28 f3       	brcs	.-54     	; 0x1706 <_fpadd_parts+0x1f4>
    173c:	0b c0       	rjmp	.+22     	; 0x1754 <_fpadd_parts+0x242>
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	33 82       	std	Z+3, r3	; 0x03
    1742:	22 82       	std	Z+2, r2	; 0x02
    1744:	ea 0c       	add	r14, r10
    1746:	fb 1c       	adc	r15, r11
    1748:	0c 1d       	adc	r16, r12
    174a:	1d 1d       	adc	r17, r13
    174c:	e4 82       	std	Z+4, r14	; 0x04
    174e:	f5 82       	std	Z+5, r15	; 0x05
    1750:	06 83       	std	Z+6, r16	; 0x06
    1752:	17 83       	std	Z+7, r17	; 0x07
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	80 83       	st	Z, r24
    1758:	24 81       	ldd	r18, Z+4	; 0x04
    175a:	35 81       	ldd	r19, Z+5	; 0x05
    175c:	46 81       	ldd	r20, Z+6	; 0x06
    175e:	57 81       	ldd	r21, Z+7	; 0x07
    1760:	57 ff       	sbrs	r21, 7
    1762:	1a c0       	rjmp	.+52     	; 0x1798 <_fpadd_parts+0x286>
    1764:	c9 01       	movw	r24, r18
    1766:	aa 27       	eor	r26, r26
    1768:	97 fd       	sbrc	r25, 7
    176a:	a0 95       	com	r26
    176c:	ba 2f       	mov	r27, r26
    176e:	81 70       	andi	r24, 0x01	; 1
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	a0 70       	andi	r26, 0x00	; 0
    1774:	b0 70       	andi	r27, 0x00	; 0
    1776:	56 95       	lsr	r21
    1778:	47 95       	ror	r20
    177a:	37 95       	ror	r19
    177c:	27 95       	ror	r18
    177e:	82 2b       	or	r24, r18
    1780:	93 2b       	or	r25, r19
    1782:	a4 2b       	or	r26, r20
    1784:	b5 2b       	or	r27, r21
    1786:	84 83       	std	Z+4, r24	; 0x04
    1788:	95 83       	std	Z+5, r25	; 0x05
    178a:	a6 83       	std	Z+6, r26	; 0x06
    178c:	b7 83       	std	Z+7, r27	; 0x07
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	93 83       	std	Z+3, r25	; 0x03
    1796:	82 83       	std	Z+2, r24	; 0x02
    1798:	df 01       	movw	r26, r30
    179a:	01 c0       	rjmp	.+2      	; 0x179e <_fpadd_parts+0x28c>
    179c:	d2 01       	movw	r26, r4
    179e:	cd 01       	movw	r24, r26
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	e2 e1       	ldi	r30, 0x12	; 18
    17a6:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

000017aa <__subsf3>:
    17aa:	a0 e2       	ldi	r26, 0x20	; 32
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb ed       	ldi	r30, 0xDB	; 219
    17b0:	fb e0       	ldi	r31, 0x0B	; 11
    17b2:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
    17b6:	69 83       	std	Y+1, r22	; 0x01
    17b8:	7a 83       	std	Y+2, r23	; 0x02
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	2d 83       	std	Y+5, r18	; 0x05
    17c0:	3e 83       	std	Y+6, r19	; 0x06
    17c2:	4f 83       	std	Y+7, r20	; 0x07
    17c4:	58 87       	std	Y+8, r21	; 0x08
    17c6:	e9 e0       	ldi	r30, 0x09	; 9
    17c8:	ee 2e       	mov	r14, r30
    17ca:	f1 2c       	mov	r15, r1
    17cc:	ec 0e       	add	r14, r28
    17ce:	fd 1e       	adc	r15, r29
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	b7 01       	movw	r22, r14
    17d6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    17da:	8e 01       	movw	r16, r28
    17dc:	0f 5e       	subi	r16, 0xEF	; 239
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	ce 01       	movw	r24, r28
    17e2:	05 96       	adiw	r24, 0x05	; 5
    17e4:	b8 01       	movw	r22, r16
    17e6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    17ea:	8a 89       	ldd	r24, Y+18	; 0x12
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	89 27       	eor	r24, r25
    17f0:	8a 8b       	std	Y+18, r24	; 0x12
    17f2:	c7 01       	movw	r24, r14
    17f4:	b8 01       	movw	r22, r16
    17f6:	ae 01       	movw	r20, r28
    17f8:	47 5e       	subi	r20, 0xE7	; 231
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255
    17fc:	0e 94 89 0a 	call	0x1512	; 0x1512 <_fpadd_parts>
    1800:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__pack_f>
    1804:	a0 96       	adiw	r28, 0x20	; 32
    1806:	e6 e0       	ldi	r30, 0x06	; 6
    1808:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

0000180c <__addsf3>:
    180c:	a0 e2       	ldi	r26, 0x20	; 32
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ec e0       	ldi	r30, 0x0C	; 12
    1812:	fc e0       	ldi	r31, 0x0C	; 12
    1814:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
    1818:	69 83       	std	Y+1, r22	; 0x01
    181a:	7a 83       	std	Y+2, r23	; 0x02
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	2d 83       	std	Y+5, r18	; 0x05
    1822:	3e 83       	std	Y+6, r19	; 0x06
    1824:	4f 83       	std	Y+7, r20	; 0x07
    1826:	58 87       	std	Y+8, r21	; 0x08
    1828:	f9 e0       	ldi	r31, 0x09	; 9
    182a:	ef 2e       	mov	r14, r31
    182c:	f1 2c       	mov	r15, r1
    182e:	ec 0e       	add	r14, r28
    1830:	fd 1e       	adc	r15, r29
    1832:	ce 01       	movw	r24, r28
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	b7 01       	movw	r22, r14
    1838:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    183c:	8e 01       	movw	r16, r28
    183e:	0f 5e       	subi	r16, 0xEF	; 239
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	ce 01       	movw	r24, r28
    1844:	05 96       	adiw	r24, 0x05	; 5
    1846:	b8 01       	movw	r22, r16
    1848:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    184c:	c7 01       	movw	r24, r14
    184e:	b8 01       	movw	r22, r16
    1850:	ae 01       	movw	r20, r28
    1852:	47 5e       	subi	r20, 0xE7	; 231
    1854:	5f 4f       	sbci	r21, 0xFF	; 255
    1856:	0e 94 89 0a 	call	0x1512	; 0x1512 <_fpadd_parts>
    185a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__pack_f>
    185e:	a0 96       	adiw	r28, 0x20	; 32
    1860:	e6 e0       	ldi	r30, 0x06	; 6
    1862:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00001866 <__mulsf3>:
    1866:	a0 e2       	ldi	r26, 0x20	; 32
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e9 e3       	ldi	r30, 0x39	; 57
    186c:	fc e0       	ldi	r31, 0x0C	; 12
    186e:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
    1872:	69 83       	std	Y+1, r22	; 0x01
    1874:	7a 83       	std	Y+2, r23	; 0x02
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	2d 83       	std	Y+5, r18	; 0x05
    187c:	3e 83       	std	Y+6, r19	; 0x06
    187e:	4f 83       	std	Y+7, r20	; 0x07
    1880:	58 87       	std	Y+8, r21	; 0x08
    1882:	ce 01       	movw	r24, r28
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	be 01       	movw	r22, r28
    1888:	67 5f       	subi	r22, 0xF7	; 247
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1890:	ce 01       	movw	r24, r28
    1892:	05 96       	adiw	r24, 0x05	; 5
    1894:	be 01       	movw	r22, r28
    1896:	6f 5e       	subi	r22, 0xEF	; 239
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    189e:	99 85       	ldd	r25, Y+9	; 0x09
    18a0:	92 30       	cpi	r25, 0x02	; 2
    18a2:	88 f0       	brcs	.+34     	; 0x18c6 <__mulsf3+0x60>
    18a4:	89 89       	ldd	r24, Y+17	; 0x11
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	c8 f0       	brcs	.+50     	; 0x18dc <__mulsf3+0x76>
    18aa:	94 30       	cpi	r25, 0x04	; 4
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <__mulsf3+0x4e>
    18ae:	82 30       	cpi	r24, 0x02	; 2
    18b0:	51 f4       	brne	.+20     	; 0x18c6 <__mulsf3+0x60>
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <__mulsf3+0x56>
    18b4:	84 30       	cpi	r24, 0x04	; 4
    18b6:	29 f4       	brne	.+10     	; 0x18c2 <__mulsf3+0x5c>
    18b8:	92 30       	cpi	r25, 0x02	; 2
    18ba:	81 f4       	brne	.+32     	; 0x18dc <__mulsf3+0x76>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	c6 c0       	rjmp	.+396    	; 0x1a4e <__mulsf3+0x1e8>
    18c2:	92 30       	cpi	r25, 0x02	; 2
    18c4:	49 f4       	brne	.+18     	; 0x18d8 <__mulsf3+0x72>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	8a 89       	ldd	r24, Y+18	; 0x12
    18cc:	98 13       	cpse	r25, r24
    18ce:	21 e0       	ldi	r18, 0x01	; 1
    18d0:	2a 87       	std	Y+10, r18	; 0x0a
    18d2:	ce 01       	movw	r24, r28
    18d4:	09 96       	adiw	r24, 0x09	; 9
    18d6:	bb c0       	rjmp	.+374    	; 0x1a4e <__mulsf3+0x1e8>
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	49 f4       	brne	.+18     	; 0x18ee <__mulsf3+0x88>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	8a 89       	ldd	r24, Y+18	; 0x12
    18e2:	98 13       	cpse	r25, r24
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	2a 8b       	std	Y+18, r18	; 0x12
    18e8:	ce 01       	movw	r24, r28
    18ea:	41 96       	adiw	r24, 0x11	; 17
    18ec:	b0 c0       	rjmp	.+352    	; 0x1a4e <__mulsf3+0x1e8>
    18ee:	2d 84       	ldd	r2, Y+13	; 0x0d
    18f0:	3e 84       	ldd	r3, Y+14	; 0x0e
    18f2:	4f 84       	ldd	r4, Y+15	; 0x0f
    18f4:	58 88       	ldd	r5, Y+16	; 0x10
    18f6:	6d 88       	ldd	r6, Y+21	; 0x15
    18f8:	7e 88       	ldd	r7, Y+22	; 0x16
    18fa:	8f 88       	ldd	r8, Y+23	; 0x17
    18fc:	98 8c       	ldd	r9, Y+24	; 0x18
    18fe:	ee 24       	eor	r14, r14
    1900:	ff 24       	eor	r15, r15
    1902:	87 01       	movw	r16, r14
    1904:	aa 24       	eor	r10, r10
    1906:	bb 24       	eor	r11, r11
    1908:	65 01       	movw	r12, r10
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	e0 e0       	ldi	r30, 0x00	; 0
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	c1 01       	movw	r24, r2
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	90 70       	andi	r25, 0x00	; 0
    191c:	89 2b       	or	r24, r25
    191e:	e9 f0       	breq	.+58     	; 0x195a <__mulsf3+0xf4>
    1920:	e6 0c       	add	r14, r6
    1922:	f7 1c       	adc	r15, r7
    1924:	08 1d       	adc	r16, r8
    1926:	19 1d       	adc	r17, r9
    1928:	9a 01       	movw	r18, r20
    192a:	ab 01       	movw	r20, r22
    192c:	2a 0d       	add	r18, r10
    192e:	3b 1d       	adc	r19, r11
    1930:	4c 1d       	adc	r20, r12
    1932:	5d 1d       	adc	r21, r13
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a0 e0       	ldi	r26, 0x00	; 0
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e6 14       	cp	r14, r6
    193e:	f7 04       	cpc	r15, r7
    1940:	08 05       	cpc	r16, r8
    1942:	19 05       	cpc	r17, r9
    1944:	20 f4       	brcc	.+8      	; 0x194e <__mulsf3+0xe8>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ba 01       	movw	r22, r20
    1950:	a9 01       	movw	r20, r18
    1952:	48 0f       	add	r20, r24
    1954:	59 1f       	adc	r21, r25
    1956:	6a 1f       	adc	r22, r26
    1958:	7b 1f       	adc	r23, r27
    195a:	aa 0c       	add	r10, r10
    195c:	bb 1c       	adc	r11, r11
    195e:	cc 1c       	adc	r12, r12
    1960:	dd 1c       	adc	r13, r13
    1962:	97 fe       	sbrs	r9, 7
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <__mulsf3+0x110>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	a8 2a       	or	r10, r24
    1970:	b9 2a       	or	r11, r25
    1972:	ca 2a       	or	r12, r26
    1974:	db 2a       	or	r13, r27
    1976:	31 96       	adiw	r30, 0x01	; 1
    1978:	e0 32       	cpi	r30, 0x20	; 32
    197a:	f1 05       	cpc	r31, r1
    197c:	49 f0       	breq	.+18     	; 0x1990 <__mulsf3+0x12a>
    197e:	66 0c       	add	r6, r6
    1980:	77 1c       	adc	r7, r7
    1982:	88 1c       	adc	r8, r8
    1984:	99 1c       	adc	r9, r9
    1986:	56 94       	lsr	r5
    1988:	47 94       	ror	r4
    198a:	37 94       	ror	r3
    198c:	27 94       	ror	r2
    198e:	c3 cf       	rjmp	.-122    	; 0x1916 <__mulsf3+0xb0>
    1990:	fa 85       	ldd	r31, Y+10	; 0x0a
    1992:	ea 89       	ldd	r30, Y+18	; 0x12
    1994:	2b 89       	ldd	r18, Y+19	; 0x13
    1996:	3c 89       	ldd	r19, Y+20	; 0x14
    1998:	8b 85       	ldd	r24, Y+11	; 0x0b
    199a:	9c 85       	ldd	r25, Y+12	; 0x0c
    199c:	28 0f       	add	r18, r24
    199e:	39 1f       	adc	r19, r25
    19a0:	2e 5f       	subi	r18, 0xFE	; 254
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	17 c0       	rjmp	.+46     	; 0x19d4 <__mulsf3+0x16e>
    19a6:	ca 01       	movw	r24, r20
    19a8:	81 70       	andi	r24, 0x01	; 1
    19aa:	90 70       	andi	r25, 0x00	; 0
    19ac:	89 2b       	or	r24, r25
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <__mulsf3+0x162>
    19b0:	16 95       	lsr	r17
    19b2:	07 95       	ror	r16
    19b4:	f7 94       	ror	r15
    19b6:	e7 94       	ror	r14
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e8       	ldi	r27, 0x80	; 128
    19c0:	e8 2a       	or	r14, r24
    19c2:	f9 2a       	or	r15, r25
    19c4:	0a 2b       	or	r16, r26
    19c6:	1b 2b       	or	r17, r27
    19c8:	76 95       	lsr	r23
    19ca:	67 95       	ror	r22
    19cc:	57 95       	ror	r21
    19ce:	47 95       	ror	r20
    19d0:	2f 5f       	subi	r18, 0xFF	; 255
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	77 fd       	sbrc	r23, 7
    19d6:	e7 cf       	rjmp	.-50     	; 0x19a6 <__mulsf3+0x140>
    19d8:	0c c0       	rjmp	.+24     	; 0x19f2 <__mulsf3+0x18c>
    19da:	44 0f       	add	r20, r20
    19dc:	55 1f       	adc	r21, r21
    19de:	66 1f       	adc	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	17 fd       	sbrc	r17, 7
    19e4:	41 60       	ori	r20, 0x01	; 1
    19e6:	ee 0c       	add	r14, r14
    19e8:	ff 1c       	adc	r15, r15
    19ea:	00 1f       	adc	r16, r16
    19ec:	11 1f       	adc	r17, r17
    19ee:	21 50       	subi	r18, 0x01	; 1
    19f0:	30 40       	sbci	r19, 0x00	; 0
    19f2:	40 30       	cpi	r20, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	59 07       	cpc	r21, r25
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	69 07       	cpc	r22, r25
    19fc:	90 e4       	ldi	r25, 0x40	; 64
    19fe:	79 07       	cpc	r23, r25
    1a00:	60 f3       	brcs	.-40     	; 0x19da <__mulsf3+0x174>
    1a02:	2b 8f       	std	Y+27, r18	; 0x1b
    1a04:	3c 8f       	std	Y+28, r19	; 0x1c
    1a06:	db 01       	movw	r26, r22
    1a08:	ca 01       	movw	r24, r20
    1a0a:	8f 77       	andi	r24, 0x7F	; 127
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	80 34       	cpi	r24, 0x40	; 64
    1a14:	91 05       	cpc	r25, r1
    1a16:	a1 05       	cpc	r26, r1
    1a18:	b1 05       	cpc	r27, r1
    1a1a:	61 f4       	brne	.+24     	; 0x1a34 <__mulsf3+0x1ce>
    1a1c:	47 fd       	sbrc	r20, 7
    1a1e:	0a c0       	rjmp	.+20     	; 0x1a34 <__mulsf3+0x1ce>
    1a20:	e1 14       	cp	r14, r1
    1a22:	f1 04       	cpc	r15, r1
    1a24:	01 05       	cpc	r16, r1
    1a26:	11 05       	cpc	r17, r1
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <__mulsf3+0x1ce>
    1a2a:	40 5c       	subi	r20, 0xC0	; 192
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	6f 4f       	sbci	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	40 78       	andi	r20, 0x80	; 128
    1a34:	1a 8e       	std	Y+26, r1	; 0x1a
    1a36:	fe 17       	cp	r31, r30
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <__mulsf3+0x1d8>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a3e:	4d 8f       	std	Y+29, r20	; 0x1d
    1a40:	5e 8f       	std	Y+30, r21	; 0x1e
    1a42:	6f 8f       	std	Y+31, r22	; 0x1f
    1a44:	78 a3       	std	Y+32, r23	; 0x20
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	89 8f       	std	Y+25, r24	; 0x19
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	49 96       	adiw	r24, 0x19	; 25
    1a4e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__pack_f>
    1a52:	a0 96       	adiw	r28, 0x20	; 32
    1a54:	e2 e1       	ldi	r30, 0x12	; 18
    1a56:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

00001a5a <__gtsf2>:
    1a5a:	a8 e1       	ldi	r26, 0x18	; 24
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e3       	ldi	r30, 0x33	; 51
    1a60:	fd e0       	ldi	r31, 0x0D	; 13
    1a62:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
    1a66:	69 83       	std	Y+1, r22	; 0x01
    1a68:	7a 83       	std	Y+2, r23	; 0x02
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	2d 83       	std	Y+5, r18	; 0x05
    1a70:	3e 83       	std	Y+6, r19	; 0x06
    1a72:	4f 83       	std	Y+7, r20	; 0x07
    1a74:	58 87       	std	Y+8, r21	; 0x08
    1a76:	89 e0       	ldi	r24, 0x09	; 9
    1a78:	e8 2e       	mov	r14, r24
    1a7a:	f1 2c       	mov	r15, r1
    1a7c:	ec 0e       	add	r14, r28
    1a7e:	fd 1e       	adc	r15, r29
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	b7 01       	movw	r22, r14
    1a86:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1a8a:	8e 01       	movw	r16, r28
    1a8c:	0f 5e       	subi	r16, 0xEF	; 239
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a90:	ce 01       	movw	r24, r28
    1a92:	05 96       	adiw	r24, 0x05	; 5
    1a94:	b8 01       	movw	r22, r16
    1a96:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	82 30       	cpi	r24, 0x02	; 2
    1a9e:	40 f0       	brcs	.+16     	; 0x1ab0 <__gtsf2+0x56>
    1aa0:	89 89       	ldd	r24, Y+17	; 0x11
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	28 f0       	brcs	.+10     	; 0x1ab0 <__gtsf2+0x56>
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	b8 01       	movw	r22, r16
    1aaa:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fpcmp_parts_f>
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <__gtsf2+0x58>
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	68 96       	adiw	r28, 0x18	; 24
    1ab4:	e6 e0       	ldi	r30, 0x06	; 6
    1ab6:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00001aba <__gesf2>:
    1aba:	a8 e1       	ldi	r26, 0x18	; 24
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e6       	ldi	r30, 0x63	; 99
    1ac0:	fd e0       	ldi	r31, 0x0D	; 13
    1ac2:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
    1ac6:	69 83       	std	Y+1, r22	; 0x01
    1ac8:	7a 83       	std	Y+2, r23	; 0x02
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	3e 83       	std	Y+6, r19	; 0x06
    1ad2:	4f 83       	std	Y+7, r20	; 0x07
    1ad4:	58 87       	std	Y+8, r21	; 0x08
    1ad6:	89 e0       	ldi	r24, 0x09	; 9
    1ad8:	e8 2e       	mov	r14, r24
    1ada:	f1 2c       	mov	r15, r1
    1adc:	ec 0e       	add	r14, r28
    1ade:	fd 1e       	adc	r15, r29
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1aea:	8e 01       	movw	r16, r28
    1aec:	0f 5e       	subi	r16, 0xEF	; 239
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	ce 01       	movw	r24, r28
    1af2:	05 96       	adiw	r24, 0x05	; 5
    1af4:	b8 01       	movw	r22, r16
    1af6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	40 f0       	brcs	.+16     	; 0x1b10 <__gesf2+0x56>
    1b00:	89 89       	ldd	r24, Y+17	; 0x11
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	28 f0       	brcs	.+10     	; 0x1b10 <__gesf2+0x56>
    1b06:	c7 01       	movw	r24, r14
    1b08:	b8 01       	movw	r22, r16
    1b0a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fpcmp_parts_f>
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <__gesf2+0x58>
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	68 96       	adiw	r28, 0x18	; 24
    1b14:	e6 e0       	ldi	r30, 0x06	; 6
    1b16:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00001b1a <__ltsf2>:
    1b1a:	a8 e1       	ldi	r26, 0x18	; 24
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e3 e9       	ldi	r30, 0x93	; 147
    1b20:	fd e0       	ldi	r31, 0x0D	; 13
    1b22:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
    1b26:	69 83       	std	Y+1, r22	; 0x01
    1b28:	7a 83       	std	Y+2, r23	; 0x02
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	9c 83       	std	Y+4, r25	; 0x04
    1b2e:	2d 83       	std	Y+5, r18	; 0x05
    1b30:	3e 83       	std	Y+6, r19	; 0x06
    1b32:	4f 83       	std	Y+7, r20	; 0x07
    1b34:	58 87       	std	Y+8, r21	; 0x08
    1b36:	89 e0       	ldi	r24, 0x09	; 9
    1b38:	e8 2e       	mov	r14, r24
    1b3a:	f1 2c       	mov	r15, r1
    1b3c:	ec 0e       	add	r14, r28
    1b3e:	fd 1e       	adc	r15, r29
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	b7 01       	movw	r22, r14
    1b46:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1b4a:	8e 01       	movw	r16, r28
    1b4c:	0f 5e       	subi	r16, 0xEF	; 239
    1b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b50:	ce 01       	movw	r24, r28
    1b52:	05 96       	adiw	r24, 0x05	; 5
    1b54:	b8 01       	movw	r22, r16
    1b56:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	82 30       	cpi	r24, 0x02	; 2
    1b5e:	40 f0       	brcs	.+16     	; 0x1b70 <__ltsf2+0x56>
    1b60:	89 89       	ldd	r24, Y+17	; 0x11
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	28 f0       	brcs	.+10     	; 0x1b70 <__ltsf2+0x56>
    1b66:	c7 01       	movw	r24, r14
    1b68:	b8 01       	movw	r22, r16
    1b6a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fpcmp_parts_f>
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <__ltsf2+0x58>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	68 96       	adiw	r28, 0x18	; 24
    1b74:	e6 e0       	ldi	r30, 0x06	; 6
    1b76:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00001b7a <__fixsfsi>:
    1b7a:	ac e0       	ldi	r26, 0x0C	; 12
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1b80:	fd e0       	ldi	r31, 0x0D	; 13
    1b82:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__prologue_saves__+0x20>
    1b86:	69 83       	std	Y+1, r22	; 0x01
    1b88:	7a 83       	std	Y+2, r23	; 0x02
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	be 01       	movw	r22, r28
    1b94:	6b 5f       	subi	r22, 0xFB	; 251
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__unpack_f>
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	61 f1       	breq	.+88     	; 0x1bfa <__fixsfsi+0x80>
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	50 f1       	brcs	.+84     	; 0x1bfa <__fixsfsi+0x80>
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	21 f4       	brne	.+8      	; 0x1bb2 <__fixsfsi+0x38>
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	88 23       	and	r24, r24
    1bae:	51 f1       	breq	.+84     	; 0x1c04 <__fixsfsi+0x8a>
    1bb0:	2e c0       	rjmp	.+92     	; 0x1c0e <__fixsfsi+0x94>
    1bb2:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb4:	38 85       	ldd	r19, Y+8	; 0x08
    1bb6:	37 fd       	sbrc	r19, 7
    1bb8:	20 c0       	rjmp	.+64     	; 0x1bfa <__fixsfsi+0x80>
    1bba:	6e 81       	ldd	r22, Y+6	; 0x06
    1bbc:	2f 31       	cpi	r18, 0x1F	; 31
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	1c f0       	brlt	.+6      	; 0x1bc8 <__fixsfsi+0x4e>
    1bc2:	66 23       	and	r22, r22
    1bc4:	f9 f0       	breq	.+62     	; 0x1c04 <__fixsfsi+0x8a>
    1bc6:	23 c0       	rjmp	.+70     	; 0x1c0e <__fixsfsi+0x94>
    1bc8:	8e e1       	ldi	r24, 0x1E	; 30
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	82 1b       	sub	r24, r18
    1bce:	93 0b       	sbc	r25, r19
    1bd0:	29 85       	ldd	r18, Y+9	; 0x09
    1bd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <__fixsfsi+0x68>
    1bda:	56 95       	lsr	r21
    1bdc:	47 95       	ror	r20
    1bde:	37 95       	ror	r19
    1be0:	27 95       	ror	r18
    1be2:	8a 95       	dec	r24
    1be4:	d2 f7       	brpl	.-12     	; 0x1bda <__fixsfsi+0x60>
    1be6:	66 23       	and	r22, r22
    1be8:	b1 f0       	breq	.+44     	; 0x1c16 <__fixsfsi+0x9c>
    1bea:	50 95       	com	r21
    1bec:	40 95       	com	r20
    1bee:	30 95       	com	r19
    1bf0:	21 95       	neg	r18
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	4f 4f       	sbci	r20, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <__fixsfsi+0x9c>
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <__fixsfsi+0x9c>
    1c04:	2f ef       	ldi	r18, 0xFF	; 255
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f ef       	ldi	r20, 0xFF	; 255
    1c0a:	5f e7       	ldi	r21, 0x7F	; 127
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__fixsfsi+0x9c>
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	50 e8       	ldi	r21, 0x80	; 128
    1c16:	b9 01       	movw	r22, r18
    1c18:	ca 01       	movw	r24, r20
    1c1a:	2c 96       	adiw	r28, 0x0c	; 12
    1c1c:	e2 e0       	ldi	r30, 0x02	; 2
    1c1e:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__epilogue_restores__+0x20>

00001c22 <__pack_f>:
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e4 80       	ldd	r14, Z+4	; 0x04
    1c30:	f5 80       	ldd	r15, Z+5	; 0x05
    1c32:	06 81       	ldd	r16, Z+6	; 0x06
    1c34:	17 81       	ldd	r17, Z+7	; 0x07
    1c36:	d1 80       	ldd	r13, Z+1	; 0x01
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	48 f4       	brcc	.+18     	; 0x1c50 <__pack_f+0x2e>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e1       	ldi	r26, 0x10	; 16
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e8 2a       	or	r14, r24
    1c48:	f9 2a       	or	r15, r25
    1c4a:	0a 2b       	or	r16, r26
    1c4c:	1b 2b       	or	r17, r27
    1c4e:	a5 c0       	rjmp	.+330    	; 0x1d9a <__pack_f+0x178>
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <__pack_f+0x34>
    1c54:	9f c0       	rjmp	.+318    	; 0x1d94 <__pack_f+0x172>
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	21 f4       	brne	.+8      	; 0x1c62 <__pack_f+0x40>
    1c5a:	ee 24       	eor	r14, r14
    1c5c:	ff 24       	eor	r15, r15
    1c5e:	87 01       	movw	r16, r14
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <__pack_f+0x4a>
    1c62:	e1 14       	cp	r14, r1
    1c64:	f1 04       	cpc	r15, r1
    1c66:	01 05       	cpc	r16, r1
    1c68:	11 05       	cpc	r17, r1
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <__pack_f+0x50>
    1c6c:	e0 e0       	ldi	r30, 0x00	; 0
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	96 c0       	rjmp	.+300    	; 0x1d9e <__pack_f+0x17c>
    1c72:	62 81       	ldd	r22, Z+2	; 0x02
    1c74:	73 81       	ldd	r23, Z+3	; 0x03
    1c76:	9f ef       	ldi	r25, 0xFF	; 255
    1c78:	62 38       	cpi	r22, 0x82	; 130
    1c7a:	79 07       	cpc	r23, r25
    1c7c:	0c f0       	brlt	.+2      	; 0x1c80 <__pack_f+0x5e>
    1c7e:	5b c0       	rjmp	.+182    	; 0x1d36 <__pack_f+0x114>
    1c80:	22 e8       	ldi	r18, 0x82	; 130
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	26 1b       	sub	r18, r22
    1c86:	37 0b       	sbc	r19, r23
    1c88:	2a 31       	cpi	r18, 0x1A	; 26
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f0       	brlt	.+10     	; 0x1c98 <__pack_f+0x76>
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	2a c0       	rjmp	.+84     	; 0x1cec <__pack_f+0xca>
    1c98:	b8 01       	movw	r22, r16
    1c9a:	a7 01       	movw	r20, r14
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <__pack_f+0x86>
    1ca0:	76 95       	lsr	r23
    1ca2:	67 95       	ror	r22
    1ca4:	57 95       	ror	r21
    1ca6:	47 95       	ror	r20
    1ca8:	0a 94       	dec	r0
    1caa:	d2 f7       	brpl	.-12     	; 0x1ca0 <__pack_f+0x7e>
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e0       	ldi	r26, 0x00	; 0
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <__pack_f+0x9c>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	aa 1f       	adc	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	2a 95       	dec	r18
    1cc0:	d2 f7       	brpl	.-12     	; 0x1cb6 <__pack_f+0x94>
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	a1 09       	sbc	r26, r1
    1cc6:	b1 09       	sbc	r27, r1
    1cc8:	8e 21       	and	r24, r14
    1cca:	9f 21       	and	r25, r15
    1ccc:	a0 23       	and	r26, r16
    1cce:	b1 23       	and	r27, r17
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	a1 05       	cpc	r26, r1
    1cd4:	b1 05       	cpc	r27, r1
    1cd6:	21 f0       	breq	.+8      	; 0x1ce0 <__pack_f+0xbe>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	9a 01       	movw	r18, r20
    1ce2:	ab 01       	movw	r20, r22
    1ce4:	28 2b       	or	r18, r24
    1ce6:	39 2b       	or	r19, r25
    1ce8:	4a 2b       	or	r20, r26
    1cea:	5b 2b       	or	r21, r27
    1cec:	da 01       	movw	r26, r20
    1cee:	c9 01       	movw	r24, r18
    1cf0:	8f 77       	andi	r24, 0x7F	; 127
    1cf2:	90 70       	andi	r25, 0x00	; 0
    1cf4:	a0 70       	andi	r26, 0x00	; 0
    1cf6:	b0 70       	andi	r27, 0x00	; 0
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	a1 05       	cpc	r26, r1
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	39 f4       	brne	.+14     	; 0x1d10 <__pack_f+0xee>
    1d02:	27 ff       	sbrs	r18, 7
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <__pack_f+0xf6>
    1d06:	20 5c       	subi	r18, 0xC0	; 192
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <__pack_f+0xf6>
    1d10:	21 5c       	subi	r18, 0xC1	; 193
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	4f 4f       	sbci	r20, 0xFF	; 255
    1d16:	5f 4f       	sbci	r21, 0xFF	; 255
    1d18:	e0 e0       	ldi	r30, 0x00	; 0
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	20 30       	cpi	r18, 0x00	; 0
    1d1e:	a0 e0       	ldi	r26, 0x00	; 0
    1d20:	3a 07       	cpc	r19, r26
    1d22:	a0 e0       	ldi	r26, 0x00	; 0
    1d24:	4a 07       	cpc	r20, r26
    1d26:	a0 e4       	ldi	r26, 0x40	; 64
    1d28:	5a 07       	cpc	r21, r26
    1d2a:	10 f0       	brcs	.+4      	; 0x1d30 <__pack_f+0x10e>
    1d2c:	e1 e0       	ldi	r30, 0x01	; 1
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	79 01       	movw	r14, r18
    1d32:	8a 01       	movw	r16, r20
    1d34:	27 c0       	rjmp	.+78     	; 0x1d84 <__pack_f+0x162>
    1d36:	60 38       	cpi	r22, 0x80	; 128
    1d38:	71 05       	cpc	r23, r1
    1d3a:	64 f5       	brge	.+88     	; 0x1d94 <__pack_f+0x172>
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	e1 58       	subi	r30, 0x81	; 129
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	d8 01       	movw	r26, r16
    1d44:	c7 01       	movw	r24, r14
    1d46:	8f 77       	andi	r24, 0x7F	; 127
    1d48:	90 70       	andi	r25, 0x00	; 0
    1d4a:	a0 70       	andi	r26, 0x00	; 0
    1d4c:	b0 70       	andi	r27, 0x00	; 0
    1d4e:	80 34       	cpi	r24, 0x40	; 64
    1d50:	91 05       	cpc	r25, r1
    1d52:	a1 05       	cpc	r26, r1
    1d54:	b1 05       	cpc	r27, r1
    1d56:	39 f4       	brne	.+14     	; 0x1d66 <__pack_f+0x144>
    1d58:	e7 fe       	sbrs	r14, 7
    1d5a:	0d c0       	rjmp	.+26     	; 0x1d76 <__pack_f+0x154>
    1d5c:	80 e4       	ldi	r24, 0x40	; 64
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <__pack_f+0x14c>
    1d66:	8f e3       	ldi	r24, 0x3F	; 63
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e0       	ldi	r26, 0x00	; 0
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e8 0e       	add	r14, r24
    1d70:	f9 1e       	adc	r15, r25
    1d72:	0a 1f       	adc	r16, r26
    1d74:	1b 1f       	adc	r17, r27
    1d76:	17 ff       	sbrs	r17, 7
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <__pack_f+0x162>
    1d7a:	16 95       	lsr	r17
    1d7c:	07 95       	ror	r16
    1d7e:	f7 94       	ror	r15
    1d80:	e7 94       	ror	r14
    1d82:	31 96       	adiw	r30, 0x01	; 1
    1d84:	87 e0       	ldi	r24, 0x07	; 7
    1d86:	16 95       	lsr	r17
    1d88:	07 95       	ror	r16
    1d8a:	f7 94       	ror	r15
    1d8c:	e7 94       	ror	r14
    1d8e:	8a 95       	dec	r24
    1d90:	d1 f7       	brne	.-12     	; 0x1d86 <__pack_f+0x164>
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <__pack_f+0x17c>
    1d94:	ee 24       	eor	r14, r14
    1d96:	ff 24       	eor	r15, r15
    1d98:	87 01       	movw	r16, r14
    1d9a:	ef ef       	ldi	r30, 0xFF	; 255
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	6e 2f       	mov	r22, r30
    1da0:	67 95       	ror	r22
    1da2:	66 27       	eor	r22, r22
    1da4:	67 95       	ror	r22
    1da6:	90 2f       	mov	r25, r16
    1da8:	9f 77       	andi	r25, 0x7F	; 127
    1daa:	d7 94       	ror	r13
    1dac:	dd 24       	eor	r13, r13
    1dae:	d7 94       	ror	r13
    1db0:	8e 2f       	mov	r24, r30
    1db2:	86 95       	lsr	r24
    1db4:	49 2f       	mov	r20, r25
    1db6:	46 2b       	or	r20, r22
    1db8:	58 2f       	mov	r21, r24
    1dba:	5d 29       	or	r21, r13
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	ca 01       	movw	r24, r20
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	df 90       	pop	r13
    1dca:	08 95       	ret

00001dcc <__unpack_f>:
    1dcc:	fc 01       	movw	r30, r24
    1dce:	db 01       	movw	r26, r22
    1dd0:	40 81       	ld	r20, Z
    1dd2:	51 81       	ldd	r21, Z+1	; 0x01
    1dd4:	22 81       	ldd	r18, Z+2	; 0x02
    1dd6:	62 2f       	mov	r22, r18
    1dd8:	6f 77       	andi	r22, 0x7F	; 127
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	22 1f       	adc	r18, r18
    1dde:	22 27       	eor	r18, r18
    1de0:	22 1f       	adc	r18, r18
    1de2:	93 81       	ldd	r25, Z+3	; 0x03
    1de4:	89 2f       	mov	r24, r25
    1de6:	88 0f       	add	r24, r24
    1de8:	82 2b       	or	r24, r18
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	99 1f       	adc	r25, r25
    1df0:	99 27       	eor	r25, r25
    1df2:	99 1f       	adc	r25, r25
    1df4:	11 96       	adiw	r26, 0x01	; 1
    1df6:	9c 93       	st	X, r25
    1df8:	11 97       	sbiw	r26, 0x01	; 1
    1dfa:	21 15       	cp	r18, r1
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	a9 f5       	brne	.+106    	; 0x1e6a <__unpack_f+0x9e>
    1e00:	41 15       	cp	r20, r1
    1e02:	51 05       	cpc	r21, r1
    1e04:	61 05       	cpc	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	11 f4       	brne	.+4      	; 0x1e0e <__unpack_f+0x42>
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	37 c0       	rjmp	.+110    	; 0x1e7c <__unpack_f+0xb0>
    1e0e:	82 e8       	ldi	r24, 0x82	; 130
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
    1e12:	13 96       	adiw	r26, 0x03	; 3
    1e14:	9c 93       	st	X, r25
    1e16:	8e 93       	st	-X, r24
    1e18:	12 97       	sbiw	r26, 0x02	; 2
    1e1a:	9a 01       	movw	r18, r20
    1e1c:	ab 01       	movw	r20, r22
    1e1e:	67 e0       	ldi	r22, 0x07	; 7
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	44 1f       	adc	r20, r20
    1e26:	55 1f       	adc	r21, r21
    1e28:	6a 95       	dec	r22
    1e2a:	d1 f7       	brne	.-12     	; 0x1e20 <__unpack_f+0x54>
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	8c 93       	st	X, r24
    1e30:	0d c0       	rjmp	.+26     	; 0x1e4c <__unpack_f+0x80>
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	44 1f       	adc	r20, r20
    1e38:	55 1f       	adc	r21, r21
    1e3a:	12 96       	adiw	r26, 0x02	; 2
    1e3c:	8d 91       	ld	r24, X+
    1e3e:	9c 91       	ld	r25, X
    1e40:	13 97       	sbiw	r26, 0x03	; 3
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	13 96       	adiw	r26, 0x03	; 3
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
    1e4a:	12 97       	sbiw	r26, 0x02	; 2
    1e4c:	20 30       	cpi	r18, 0x00	; 0
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	38 07       	cpc	r19, r24
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	48 07       	cpc	r20, r24
    1e56:	80 e4       	ldi	r24, 0x40	; 64
    1e58:	58 07       	cpc	r21, r24
    1e5a:	58 f3       	brcs	.-42     	; 0x1e32 <__unpack_f+0x66>
    1e5c:	14 96       	adiw	r26, 0x04	; 4
    1e5e:	2d 93       	st	X+, r18
    1e60:	3d 93       	st	X+, r19
    1e62:	4d 93       	st	X+, r20
    1e64:	5c 93       	st	X, r21
    1e66:	17 97       	sbiw	r26, 0x07	; 7
    1e68:	08 95       	ret
    1e6a:	2f 3f       	cpi	r18, 0xFF	; 255
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	79 f4       	brne	.+30     	; 0x1e8e <__unpack_f+0xc2>
    1e70:	41 15       	cp	r20, r1
    1e72:	51 05       	cpc	r21, r1
    1e74:	61 05       	cpc	r22, r1
    1e76:	71 05       	cpc	r23, r1
    1e78:	19 f4       	brne	.+6      	; 0x1e80 <__unpack_f+0xb4>
    1e7a:	84 e0       	ldi	r24, 0x04	; 4
    1e7c:	8c 93       	st	X, r24
    1e7e:	08 95       	ret
    1e80:	64 ff       	sbrs	r22, 4
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <__unpack_f+0xbe>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8c 93       	st	X, r24
    1e88:	12 c0       	rjmp	.+36     	; 0x1eae <__unpack_f+0xe2>
    1e8a:	1c 92       	st	X, r1
    1e8c:	10 c0       	rjmp	.+32     	; 0x1eae <__unpack_f+0xe2>
    1e8e:	2f 57       	subi	r18, 0x7F	; 127
    1e90:	30 40       	sbci	r19, 0x00	; 0
    1e92:	13 96       	adiw	r26, 0x03	; 3
    1e94:	3c 93       	st	X, r19
    1e96:	2e 93       	st	-X, r18
    1e98:	12 97       	sbiw	r26, 0x02	; 2
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	8c 93       	st	X, r24
    1e9e:	87 e0       	ldi	r24, 0x07	; 7
    1ea0:	44 0f       	add	r20, r20
    1ea2:	55 1f       	adc	r21, r21
    1ea4:	66 1f       	adc	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	8a 95       	dec	r24
    1eaa:	d1 f7       	brne	.-12     	; 0x1ea0 <__unpack_f+0xd4>
    1eac:	70 64       	ori	r23, 0x40	; 64
    1eae:	14 96       	adiw	r26, 0x04	; 4
    1eb0:	4d 93       	st	X+, r20
    1eb2:	5d 93       	st	X+, r21
    1eb4:	6d 93       	st	X+, r22
    1eb6:	7c 93       	st	X, r23
    1eb8:	17 97       	sbiw	r26, 0x07	; 7
    1eba:	08 95       	ret

00001ebc <__fpcmp_parts_f>:
    1ebc:	1f 93       	push	r17
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	fb 01       	movw	r30, r22
    1ec2:	9c 91       	ld	r25, X
    1ec4:	92 30       	cpi	r25, 0x02	; 2
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <__fpcmp_parts_f+0xe>
    1ec8:	47 c0       	rjmp	.+142    	; 0x1f58 <__fpcmp_parts_f+0x9c>
    1eca:	80 81       	ld	r24, Z
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	08 f4       	brcc	.+2      	; 0x1ed2 <__fpcmp_parts_f+0x16>
    1ed0:	43 c0       	rjmp	.+134    	; 0x1f58 <__fpcmp_parts_f+0x9c>
    1ed2:	94 30       	cpi	r25, 0x04	; 4
    1ed4:	51 f4       	brne	.+20     	; 0x1eea <__fpcmp_parts_f+0x2e>
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	1c 91       	ld	r17, X
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	99 f5       	brne	.+102    	; 0x1f44 <__fpcmp_parts_f+0x88>
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	68 2f       	mov	r22, r24
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	61 1b       	sub	r22, r17
    1ee6:	71 09       	sbc	r23, r1
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <__fpcmp_parts_f+0xac>
    1eea:	84 30       	cpi	r24, 0x04	; 4
    1eec:	21 f0       	breq	.+8      	; 0x1ef6 <__fpcmp_parts_f+0x3a>
    1eee:	92 30       	cpi	r25, 0x02	; 2
    1ef0:	31 f4       	brne	.+12     	; 0x1efe <__fpcmp_parts_f+0x42>
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	b9 f1       	breq	.+110    	; 0x1f64 <__fpcmp_parts_f+0xa8>
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	88 23       	and	r24, r24
    1efa:	89 f1       	breq	.+98     	; 0x1f5e <__fpcmp_parts_f+0xa2>
    1efc:	2d c0       	rjmp	.+90     	; 0x1f58 <__fpcmp_parts_f+0x9c>
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	1c 91       	ld	r17, X
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	82 30       	cpi	r24, 0x02	; 2
    1f06:	f1 f0       	breq	.+60     	; 0x1f44 <__fpcmp_parts_f+0x88>
    1f08:	81 81       	ldd	r24, Z+1	; 0x01
    1f0a:	18 17       	cp	r17, r24
    1f0c:	d9 f4       	brne	.+54     	; 0x1f44 <__fpcmp_parts_f+0x88>
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	2d 91       	ld	r18, X+
    1f12:	3c 91       	ld	r19, X
    1f14:	13 97       	sbiw	r26, 0x03	; 3
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	82 17       	cp	r24, r18
    1f1c:	93 07       	cpc	r25, r19
    1f1e:	94 f0       	brlt	.+36     	; 0x1f44 <__fpcmp_parts_f+0x88>
    1f20:	28 17       	cp	r18, r24
    1f22:	39 07       	cpc	r19, r25
    1f24:	bc f0       	brlt	.+46     	; 0x1f54 <__fpcmp_parts_f+0x98>
    1f26:	14 96       	adiw	r26, 0x04	; 4
    1f28:	8d 91       	ld	r24, X+
    1f2a:	9d 91       	ld	r25, X+
    1f2c:	0d 90       	ld	r0, X+
    1f2e:	bc 91       	ld	r27, X
    1f30:	a0 2d       	mov	r26, r0
    1f32:	24 81       	ldd	r18, Z+4	; 0x04
    1f34:	35 81       	ldd	r19, Z+5	; 0x05
    1f36:	46 81       	ldd	r20, Z+6	; 0x06
    1f38:	57 81       	ldd	r21, Z+7	; 0x07
    1f3a:	28 17       	cp	r18, r24
    1f3c:	39 07       	cpc	r19, r25
    1f3e:	4a 07       	cpc	r20, r26
    1f40:	5b 07       	cpc	r21, r27
    1f42:	18 f4       	brcc	.+6      	; 0x1f4a <__fpcmp_parts_f+0x8e>
    1f44:	11 23       	and	r17, r17
    1f46:	41 f0       	breq	.+16     	; 0x1f58 <__fpcmp_parts_f+0x9c>
    1f48:	0a c0       	rjmp	.+20     	; 0x1f5e <__fpcmp_parts_f+0xa2>
    1f4a:	82 17       	cp	r24, r18
    1f4c:	93 07       	cpc	r25, r19
    1f4e:	a4 07       	cpc	r26, r20
    1f50:	b5 07       	cpc	r27, r21
    1f52:	40 f4       	brcc	.+16     	; 0x1f64 <__fpcmp_parts_f+0xa8>
    1f54:	11 23       	and	r17, r17
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <__fpcmp_parts_f+0xa2>
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <__fpcmp_parts_f+0xac>
    1f5e:	6f ef       	ldi	r22, 0xFF	; 255
    1f60:	7f ef       	ldi	r23, 0xFF	; 255
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <__fpcmp_parts_f+0xac>
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	cb 01       	movw	r24, r22
    1f6a:	1f 91       	pop	r17
    1f6c:	08 95       	ret

00001f6e <__prologue_saves__>:
    1f6e:	2f 92       	push	r2
    1f70:	3f 92       	push	r3
    1f72:	4f 92       	push	r4
    1f74:	5f 92       	push	r5
    1f76:	6f 92       	push	r6
    1f78:	7f 92       	push	r7
    1f7a:	8f 92       	push	r8
    1f7c:	9f 92       	push	r9
    1f7e:	af 92       	push	r10
    1f80:	bf 92       	push	r11
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	ca 1b       	sub	r28, r26
    1f98:	db 0b       	sbc	r29, r27
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	09 94       	ijmp

00001fa6 <__epilogue_restores__>:
    1fa6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa8:	39 88       	ldd	r3, Y+17	; 0x11
    1faa:	48 88       	ldd	r4, Y+16	; 0x10
    1fac:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fae:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fba:	c8 84       	ldd	r12, Y+8	; 0x08
    1fbc:	df 80       	ldd	r13, Y+7	; 0x07
    1fbe:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fca:	ce 0f       	add	r28, r30
    1fcc:	d1 1d       	adc	r29, r1
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	ed 01       	movw	r28, r26
    1fda:	08 95       	ret

00001fdc <_exit>:
    1fdc:	f8 94       	cli

00001fde <__stop_program>:
    1fde:	ff cf       	rjmp	.-2      	; 0x1fde <__stop_program>
